exclude_outliers(a, lim = 2.5e5)
})
remove(msr_fragments_tables); remove(rna_fragments_tables); gc()
lapply(c(1,3,5), cat("ciao"))
lapply(c(1,3,5), function(x) cat("ciao"))
# DATASET
train_prop = 0.8; cat("\ntrain_data_proportion: ", train_prop)
random = T
model_datas <- lapply(data_tables, function(dt)
{
md <- dt[complete.cases(data_table[,msr_predictors]),]
cat("\n missing data: ", (1-(length(md[,1])/length(dt[,1])))*100, "%")
# UNDERSAMPLING
l = length(md[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = md[train_rows,]
test_model_data = md[test_rows,]
List(train_model_data=train_model_data, test_model_data=test_model_data)
})
# DATASET
train_prop = 0.8; cat("\ntrain_data_proportion: ", train_prop)
random = T
model_datas <- lapply(data_tables, function(dt)
{
md <- dt[complete.cases(dt[,msr_predictors]),]
cat("\n missing data: ", (1-(length(md[,1])/length(dt[,1])))*100, "%")
# UNDERSAMPLING
l = length(md[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = md[train_rows,]
test_model_data = md[test_rows,]
List(train_model_data=train_model_data, test_model_data=test_model_data)
})
# DATASET
train_prop = 0.8; cat("\ntrain_data_proportion: ", train_prop)
random = T
model_datas <- lapply(1:l, function(i)
{
dt <- data_tables[[i]]
name <- names[i]
md <- dt[complete.cases(dt[,msr_predictors]),]
cat("\n", name, " missing data: ", (1-(length(md[,1])/length(dt[,1])))*100, "%")
# UNDERSAMPLING
l = length(md[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = md[train_rows,]
test_model_data = md[test_rows,]
List(train_model_data=train_model_data, test_model_data=test_model_data)
})
# DATASET
train_prop = 0.8; cat("\ntrain_data_proportion: ", train_prop)
random = T
model_datas <- lapply(1:l, function(i)
{
dt <- data_tables[[i]]
name <- names[i]
md <- dt[complete.cases(dt[,msr_predictors]),]
cat("\n", name, " missing data: ", (1-(length(md[,1])/length(dt[,1])))*100, "%")
# UNDERSAMPLING
l = length(md[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = md[train_rows,]
test_model_data = md[test_rows,]
List(train_model_data=train_model_data, test_model_data=test_model_data, name=name)
})
model_datas[[1]]$name
setwd()
setwd("~/Scrivania/Tesi/Methylation-project/Plots/24-08")
k562 <- readRDS("../../../MethylationCode/MethylationData/wgbs/K562.Rda"))
k562 <- readRDS("../../../MethylationCode/MethylationData/wgbs/K62.Rda"))
k562 <- readRDS("../../../MethylationCode/MethylationData/wgbs/K62.Rda"))
k562 <- readRDS("../../../MethylationCode/MethylationData/wgbs/K62.Rda")
k562 <- readRDS("../../../MethylationCode/MethylationData/wgbs/K562.Rda")
k562 <- sum_strands(k562)
gc()
k562
mean(k562$reads==0)
mean(k562$reads>1)
mean(k562$reads>5)
data_tables[[7]]
d <- data_tables[[7]]
d$ecdf
length(d$ecdf)
length(d$start_chr)
length(d$`inverted ecdf`)
sum(is.na(d$start_chr))
sum(is.na(d$total_TPM))
sum(is.na(d$ecdf))
sum(is.na(d$inverted_msr))
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
genebody = readRDS("Rexperiments/genebody_improved.Rda")
##########################
y <- c("gene_count", "log_tpm")
basic_predictors <- c("nucleotides", "CpG_density", "meth rate", "msr_density")
essentials <- c(y, basic_predictors)
essential_msr_predictors <- c("msr", "inverted_msr")
fancy_msr_predictors <- c("ecdf", "inverted ecdf", "residual", "inverted_residual")
msr_predictors <- c(essential_msr_predictors, fancy_msr_predictors)
msr_fragments_table = readRDS("../../../Rexperiments/stomach_msr_table_1000.Rda")
rna_fragment_table = readRDS("../../../Rexperiments/stomach_rna_table_1000_extended.Rda")
#########################
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
#tpm_noise <- rexp(length(data_table$log_tpm), rate = 1e3)
log_tpm_noise <- rnorm(length(data_table$log_tpm), sd = 0.5)
log_tpm_noise[data_table$total_TPM>0] <- 0
data_table$log_tpm <- data_table$log_tpm + log_tpm_noise
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
rows <- sample(1:length(data_table[,1]), size = 1e3)
chart.Correlation(data_table[rows,essentials])
chart.Correlation(data_table[rows,c(essentials, essential_msr_predictors)])
chart.Correlation(data_table[rows,c(y, fancy_msr_predictors)])
#mi.plot(data_table[,c(essentials, essential_msr_predictors)])
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
((ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + geom_point(alpha = 0.03))) + ylab("log (TPM)")
((ggplot(data_table,aes(x=residual,y=log_tpm)) + geom_point(alpha = 0.03)))+ ylab("log (TPM)")
((ggplot(data_table,aes(x=msr_density,y=log_tpm)) + geom_point(alpha = 0.03)))+ ylab("log (TPM)")
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$inverted_msr, breaks = 40, col = cols[1], probability = F, xlab = "inverted msr", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$inverted_msr, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$msr_density, breaks = 40, col = cols[1], probability = F, xlab = "discretized meth rate", main = "Distribution comparison", ylim = c(0,3000))
hist(data_table[data_table$total_TPM>threshold,]$msr_density, breaks = 40, col = cols[2], add = T, probability = F, ylim = c(0,3000))
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
# DATASET
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
cat("missing data: ", (1-(length(model_data[,1])/length(data_table[,1])))*100, "%")
# UNDERSAMPLING
train_prop = 0.2; cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = model_data[train_rows,]
test_model_data = model_data[test_rows,]
mean(train_model_data$total_TPM>threshold, na.rm=T)
# Logistics Regression
glm.fit <- glm(train_model_data$total_TPM>threshold ~ nucleotides+CpG_density+`meth rate`+ msr_density , data = train_model_data, family = binomial)
#summary(glm.fit)
cat("TRAIN DATA ")
nd <- train_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2], "\n\n")
cat("TEST DATA ")
nd <- test_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
glm.fit <- glm(train_model_data$total_TPM>threshold ~ inverted_msr , data = train_model_data, family = binomial)
#summary(glm.fit)
cat("TRAIN DATA")
nd <- train_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2], "\n\n")
cat("TEST DATA")
nd <- test_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
glm.fit <- glm(train_model_data$total_TPM>threshold ~ . , data = train_model_data[, c(basic_predictors, msr_predictors)], family = binomial)
#summary(glm.fit)
cat("TRAIN DATA")
nd <- train_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2], "\n\n")
cat("TEST DATA")
nd <- test_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
hist(log(model_data[model_data$gene_count>0, ]$total_TPM+1e-3, base = 10), xlab = "log(TPM + 1e-3)", main = "", breaks = 50)
standard_predictors = c(essentials, "genes_nucleotides_count")
model = lm(log_tpm ~ . , data = train_model_data[, standard_predictors])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ . , data = train_model_data[, c(standard_predictors, msr_predictors)])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c(standard_predictors, "inverted_msr")])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c("log_tpm", basic_predictors)])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c("log_tpm", basic_predictors, msr_predictors)])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c("log_tpm", basic_predictors, "inverted_msr")])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
test_models <- function(model_datas, y, predictors)
{
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
model <- lm(train_model_data$y ~ . , data = train_model_data[, predictors])
summary(model)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
})
}
test_models <- function(model_datas, y, predictors)
{
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
model <- lm(train_model_data$y ~ . , data = train_model_data[, predictors])
summary(model)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
trsq
})
}
test_models(model_datas, "log_tpm", c("msr_density"))
test_models <- function(model_datas, y, predictors)
{
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
model <- lm(train_model_data$y ~ . , data = train_model_data[, predictors])
summary(model)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
trsq
})
}
test_models(model_datas, "log_tpm", c("msr_density"))
test_models <- function(model_datas, y, predictors)
{
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
model <- lm(y ~ . , data = train_model_data[, predictors])
summary(model)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
trsq
})
}
test_models(model_datas, "log_tpm", c("msr_density"))
test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
test_models <- function(model_datas, y, predictors)
{
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
cat(md$name)
model <- lm(y ~ . , data = train_model_data[, predictors])
summary(model)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
trsq
})
}
test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
model <- lm(log_tpm ~ . , data = model_datas[[1]]$train_model_data[, msr_predictors])
model_datas[[1]]$train_model_data
model_datas[[1]]$train_model_data$log_tpm
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
model <- lm(log_tpm ~ . , data = model_datas[[1]]$train_model_data[, standard_predictors])
summary(model)
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(model_datas[[1]]$train_model_data$y ~ . , data = model_datas[[1]]$train_model_data[, predictors])
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(model_datas[[1]]$train_model_data$..y ~ . , data = model_datas[[1]]$train_model_data[, predictors])
y
..y
model_datas[[1]]$train_model_data$CpG_density
model_datas[[1]]$train_model_data$y
model_datas[[1]]$train_model_data$..y
model_datas[[1]]$train_model_data$.y
model_datas[[1]]$train_model_data[,y]
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(model_datas[[1]]$train_model_data[,y] ~ . , data = model_datas[[1]]$train_model_data[, predictors])
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(model_datas[[1]]$train_model_data[,y] ~ . , data = model_datas[[1]]$train_model_data[, c(predictors,y)])
summary(model)
test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
test_models(model_datas, "log_tpm", c("msr_density"))
test_models <- function(model_datas, y, predictors)
{
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
cat(md$name)
model <- lm(train_model_data[,y] ~ . , data = train_model_data[, c(predictors,y)])
summary(model)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
trsq
})
}
test_models(model_datas, "log_tpm", c("msr_density"))
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(model_datas[[1]]$train_model_data[,y] ~ . , data = model_datas[[1]]$train_model_data[, c(predictors,y)])
summary(model)
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(model_datas[[1]]$train_model_data[,y] ~ . , data = model_datas[[1]]$train_model_data[, c(predictors)])
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(y ~ . , data = model_datas[[1]]$train_model_data[, c(predictors,y)])
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(model_datas[[1]]$train_model_data[,y] ~ . , data = model_datas[[1]]$train_model_data[, c(predictors)])
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(model_datas[[1]]$train_model_data[,y] ~ predictors. , data = model_datas[[1]]$train_model_data)
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(model_datas[[1]]$train_model_data[,y] ~ predictors , data = model_datas[[1]]$train_model_data)
as.formula(paste(y, "~", paste(predictors, sep = "+")))
predictors <- c("msr_density", "msr")
as.formula(paste(y, "~", paste(predictors, sep = "+")))
predictors
paste(y, "~", paste(predictors, sep = "+"))
paste(predictors, sep = "+")
paste(predictors, sep = "+")
paste(predictors, , collapse = " + ")
paste(predictors, collapse = " + ")
as.formula(paste(y, "~", paste(predictors, collapse = " + ")))
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density")
model <- lm(as.formula(paste(y, "~", paste(predictors, collapse = " + "))), data = model_datas[[1]]$train_model_data)
summary(model)
#test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
y <- "log_tpm"
predictors <- c("msr_density", "msr")
model <- lm(as.formula(paste(y, "~", paste(predictors, collapse = " + "))), data = model_datas[[1]]$train_model_data)
summary(model)
test_models <- function(model_datas, y, predictors)
{
formul <- as.formula(paste(y, "~", paste(predictors, collapse = " + ")))
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
cat(md$name)
model <- lm(formul, data = train_model_data)
summary(model)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
trsq
})
}
test_models(model_datas, "log_tpm", c("log_tpm","msr_density"))
test_models(model_datas, "log_tpm", c("msr_density"))
test_models <- function(model_datas, y, predictors)
{
formul <- as.formula(paste(y, "~", paste(predictors, collapse = " + ")))
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
model <- lm(formul, data = train_model_data)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
cat(md$name, ": ", trsq)
trsq
})
}
test_models(model_datas, "log_tpm", c("msr_density"))
test_models <- function(model_datas, y, predictors)
{
formul <- as.formula(paste(y, "~", paste(predictors, collapse = " + ")))
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
model <- lm(formul, data = train_model_data)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
cat("\n", md$name, ": ", trsq)
trsq
})
}
test_models(model_datas, "log_tpm", c("msr_density"))
test_models <- function(model_datas, y, predictors)
{
formul <- as.formula(paste(y, "~", paste(predictors, collapse = " + ")))
lapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
model <- lm(formul, data = train_model_data)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
cat(md$name, ": ", trsq, "\n")
trsq
})
}
test_models(model_datas, "log_tpm", c("msr_density"))
test_models <- function(model_datas, y, predictors)
{
formul <- as.formula(paste(y, "~", paste(predictors, collapse = " + ")))
sapply(model_datas, function(md)
{
train_model_data <- md$train_model_data
test_model_data <- md$test_model_data
model <- lm(formul, data = train_model_data)
trsq <- 1-(var(predict(model, test_model_data,   type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm)
cat(md$name, ": ", trsq, "\n")
trsq
})
}
test_models(model_datas, "log_tpm", c("msr_density"))
test_models(model_datas, "log_tpm", basic_predictors)
test_models(model_datas, "log_tpm", c("msr_density", "msr"))
test_models(model_datas, "log_tpm", c("msr_density", "`meth rate`"))
test_models(model_datas, "log_tpm", c("msr_density", "meth rate"))
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
genebody = readRDS("Rexperiments/genebody_improved.Rda")
##########################
y <- c("gene_count", "log_tpm")
basic_predictors <- c("nucleotides", "CpG_density", "`meth rate`", "msr_density")
essentials <- c(y, basic_predictors)
essential_msr_predictors <- c("msr", "inverted_msr")
fancy_msr_predictors <- c("ecdf", "`inverted ecdf`", "residual", "inverted_residual")
msr_predictors <- c(essential_msr_predictors, fancy_msr_predictors)
test_models(model_datas, "log_tpm", basic_predictors)
test_models(model_datas, "log_tpm", basic_predictors)
test_models(model_datas, "log_tpm", c(basic_predictors, essential_msr_predictors))
test_models(model_datas, "log_tpm", c(basic_predictors, essential_msr_predictors, fancy_msr_predictors))
r1 <- test_models(model_datas, "log_tpm", basic_predictors)
r2 <- test_models(model_datas, "log_tpm", c(basic_predictors, essential_msr_predictors))
r3 <- test_models(model_datas, "log_tpm", c(basic_predictors, essential_msr_predictors, fancy_msr_predictors))
r2-r1
(1-(r2/r1))*100
((r2/r1)-1)*100
((r3/r1)-1)*100
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
msr_ecdf_1e3 = readRDS("../../MethylationCode/MethylationData/msr_ecdf_1e3.Rda")
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
msr_ecdf_1e3 = readRDS("../../MethylationCode/MethylationData/msr_ecdf_1e3.Rda")
