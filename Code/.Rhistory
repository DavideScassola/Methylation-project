summary(model)
model_data = data_table[gene_presence, ]
meth_rate = model_data$`meth rate`
model = gam(log_tpm ~ (model_data$inverted_msr) + (model_data$CpG_density) + s(meth_rate) + (model_data$gene_count), data = model_data)
summary(model)
model_data = data_table[gene_presence, ]
meth_rate = model_data$`meth rate`
model = gam(log_tpm ~ s(model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count), data = model_data)
summary(model)
model_data = data_table[gene_presence, ]
meth_rate = model_data$`meth rate`
model = gam(log_tpm ~ (model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count), data = model_data)
summary(model)
plot(model)
model_data = data_table[gene_presence, ]
meth_rate = model_data$`meth rate`
model = gam(log_tpm ~ te(model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count), data = model_data)
summary(model)
model_data = data_table[gene_presence, ]
meth_rate = model_data$`meth rate`
model = gam(log_tpm ~ ti(model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count), data = model_data)
summary(model)
plot(model)
model_data = data_table[gene_presence, ]
meth_rate = model_data$`meth rate`
model = gam(log_tpm ~ s(model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count), data = model_data)
summary(model)
plot(model)
model_data = data_table[gene_presence, ]
meth_rate = model_data$`meth rate`
model = gam(log_tpm ~ s(model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + s(model_data$gene_count), data = model_data)
summary(model)
model_data = data_table[gene_presence, ]
meth_rate = model_data$`meth rate`
model = gam(log_tpm ~ (model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count), data = model_data)
summary(model)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
file_rna_stomach = "MethylationCode/MethylationData/rna-seq/ENCFF918KPC_stomach.tsv"
stomach_rna <- read_rna_file(file_rna_stomach)
load("Rexperiments/stomach_fragments_table_stoc_V2.Rdata")
load("Rexperiments/stomach_fragments_table_discrete_V2.Rdata")
load("Rexperiments/stomach_fragments_table_adaptive.Rdata")
load("Rexperiments/stomach_rna_fragment_tables.Rdata")
data_stomach <- readRDS("MethylationCode/MethylationData/wgbs/stomach.Rda")
data_stomach <- sum_strands(data_stomach)
genebody = readRDS("Rexperiments/genebody_improved.Rda")
#########################
y <- c("gene_count", "log_tpm")
basic_predictors <- c("nucleotides", "CpG_density", "meth rate")
essentials <- c(y, basic_predictors)
essential_msr_predictors <- c("msr", "inverted_msr")
fancy_msr_predictors <- c("ecdf", "inverted ecdf", "residual", "inverted_residual")
msr_predictors <- c(essential_msr_predictors, fancy_msr_predictors)
data_table <- join_rna_and_msr_tables(stomach_rna_fragment_tables, stomach_fragments_table_stoc, 1)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
chart.Correlation(data_table[,essentials])
chart.Correlation(data_table[,c(essentials, essential_msr_predictors)])
chart.Correlation(data_table[,c(y, fancy_msr_predictors)])
gene_mask = data_table$gene_count>0
feature = feature = data_table$`meth rate`
feature_name = "methylation rate"
binary_predictivity_hist(feature,
mask = gene_mask,
xlab = feature_name, sep_names = c("one or more genes", "no genes"),
colors = c(5,7), breaks = 15,
main = sprintf("Can %s predict the presence of a gene?", feature_name),
max_y = 8)
feature = feature = 1000/data_table$nucleotides
feature_name = "CpG density"
binary_predictivity_hist(feature,
mask = gene_mask,
xlab = feature_name, sep_names = c("one or more genes", "no genes"),
colors = c(5,7), breaks = 15,
main = sprintf("Can %s predict the presence of a gene?", feature_name),
max_y = 70)
feature = data_table$inverted_msr
feature_name = "inverted MSR"
binary_predictivity_hist(feature,
mask = gene_mask,
xlab = "inverted MSR", sep_names = c("one or more genes", "no genes"),
colors = c(5,7), breaks = 15,
main = sprintf("Can %s predict the presence of a gene?", feature_name),
max_y = 30)
#feature = data_table$inverted_msr
#feature = data_table$`ecdf(msr, density)`
#feature = data_table$`inverted ecdf(msr, density)`
feature = feature = data_table$`inverted ecdf`
feature_name = "inverted ecdf"
binary_predictivity_hist(feature,
mask = gene_mask,
xlab = feature_name, sep_names = c("one or more genes", "no genes"),
colors = c(5,7), breaks = 15,
main = sprintf("Can %s predict the presence of a gene?", feature_name),
max_y = 13)
gene_0 = data_table$gene_count==0
gene_1 = data_table$gene_count==1
gene_2 = data_table$gene_count==2
gene_many = data_table$gene_count>2
boxplot(data_table$inverted_msr[gene_0], data_table$inverted_msr[gene_1], data_table$inverted_msr[gene_2], data_table$inverted_msr[gene_many], names = c("No genes", "one gene", "two genes", "more than 2 genes"), ylab = "inverted MSR")
title("Inverted MSR and number of genes")
mean(data_table$gene_count>0, na.rm=T)
# Logistics Regression
model_data = data_table[complete.cases(data_table),]
glm.fit <- glm(model_data$gene_count>0 ~ nucleotides+CpG_density+`meth rate`, data = model_data[, c(essentials)], family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
model_data = data_table[complete.cases(data_table),]
glm.fit <- glm(model_data$gene_count>0 ~ nucleotides+CpG_density+`meth rate`, data = model_data[, c(essentials)], family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ model_data$inverted_msr , data = model_data, family = binomial)
#glm.fit <- gam(model_data$gene_count>0 ~ s(model_data$inverted_msr) , data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
gene_presence = data_table$gene_count>0
model = lm(log_tpm ~ . , data = data_table[gene_presence, c(essentials)])
summary(model)
model = lm(log_tpm ~ . , data = data_table[gene_presence, c(essentials, msr_predictors, "genes_nucleotides_count")])
summary(model)
model_data = data_table[gene_presence, ]
meth_rate = model_data$`meth rate`
model = lm(log_tpm ~ (model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count), data = model_data)
summary(model)
d = data_table[data_table$gene_count>0, ]
d = d[complete.cases(d), ]
hist(log(d$total_TPM+1e-3, base = 10), xlab = "log(TPM + 1e-3)", main = "", breaks = 50)
mean(d$total_TPM>0)
# Logistics Regression
glm.fit <- glm(total_TPM>0 ~ . , data = d[, c(basic_predictors, msr_predictors, "total_TPM", "gene_count")],  family = binomial)
summary(glm.fit)
#glm.fit <- gam(model_data$gene_count>0 ~ s(model_data$inverted_msr) , data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = (glm.fit$data)$total_TPM>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
data_table <- join_rna_and_msr_tables(stomach_rna_fragment_tables, stomach_fragments_table_adaptive, 1)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
chart.Correlation(data_table[,essentials])
chart.Correlation(data_table[,c(essentials, essential_msr_predictors)])
chart.Correlation(data_table[,c(y, fancy_msr_predictors)])
plot(data_table$log_tpm, data_table$ecdf)
plot(data_table$log_tpm, data_table$ecdf, pch=".")
meh = lm(data_table$log_tpm ~ data_table$ecdf)
plot(meh)
summary(meh)
meh = lm(data_table$log_tpm[data_table$total_TPM>0,]~ data_table[data_table$total_TPM>0, ]$ecdf)
meh = lm(data_table[data_table$total_TPM>0,]$log_tpm~ data_table[data_table$total_TPM>0, ]$ecdf)
plot(meh)
summary(meh)
genebody = readRDS("../../Rexperiments/genebody_improved.Rda")
#source("WGBS_analysis_functions.R", chdir = T)
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
data_stomach <- readRDS("../../MethylationCode/MethylationData/wgbs/stomach.Rda")
data_stomach <- sum_strands(data_stomach)
data_stomach <- sum_strands(data_stomach)
genebody = readRDS("../../Rexperiments/genebody_improved.Rda")
##########################
file_rna_stomach = "../../MethylationCode/MethylationData/rna-seq/ENCFF918KPC_stomach.tsv"
stomach_rna <- read_rna_file(file_rna_stomach)
stomach_tables = produce_fragments_rna_tables(data_stomach, rna_data, genebody_annotation, sizes = c(1e3,1e4,1e5))
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody_annotation, sizes = c(1e3,1e4,1e5))
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody, sizes = c(1e3,1e4,1e5))
3%1
3 mod 1
3 mod 32
33 mod 32
33 %% 32
33.4 %% 32
make_rna_window_data_frame <- function(wgbs_data, rna_data, genebody_annotation, window)
{
wgbs_data = sum_strands(wgbs_data, verbose = F)
l = length(wgbs_data$prop)
fragments <- floor(l/window)
i_starting_points <- ((0:(fragments-1))*window)+1
window = i_starting_points[2]-i_starting_points[1]
start_position = wgbs_data[i_starting_points]$Cpos
start_chr = wgbs_data[i_starting_points]$chr
end_position = wgbs_data[i_starting_points+window]$Cpos
#end_chr = wgbs_data[i_starting_points+window]$chr
l = length(start_positions)
rna_data = rna_data[gene_id %in% genebody_annotation$id]
gene_info = sapply(1:l, function(i)
{
if(((i*100)/l)%%10 == 0)
cat(i, " ")
genes = get_genes_by_region(start_chr[i], start_position[i], end_position[i], genebody_annotation)
genes_nucleotides_count <- get_genes_nucleotides_intersection(start_chr[i], start_position[i], end_position[i], genebody_annotation)
tpm = get_TPM(genes, rna_data)
total_TPM = sum(tpm)
std_TPM = std(tpm)
if(length(genes)==0)
{
total_TPM = NA
std_TPM = NA
}
c(length(genes), total_TPM, genes_nucleotides_count, std_TPM)
})
nucleotides = end_position-start_position
nucleotides[nucleotides<=0] = NA
data.frame(start_chr, start_position, end_position,
nucleotides, gene_count = gene_info[1,], genes_nucleotides_count = gene_info[3,], total_TPM = gene_info[2,], std_TPM = gene_info[4,])
}
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody, sizes = c(1e3,1e4,1e5))
make_rna_window_data_frame <- function(wgbs_data, rna_data, genebody_annotation, window)
{
wgbs_data = sum_strands(wgbs_data, verbose = F)
l = length(wgbs_data$prop)
fragments <- floor(l/window)
i_starting_points <- ((0:(fragments-1))*window)+1
window = i_starting_points[2]-i_starting_points[1]
start_position = wgbs_data[i_starting_points]$Cpos
start_chr = wgbs_data[i_starting_points]$chr
end_position = wgbs_data[i_starting_points+window]$Cpos
#end_chr = wgbs_data[i_starting_points+window]$chr
l = length(start_position)
rna_data = rna_data[gene_id %in% genebody_annotation$id]
gene_info = sapply(1:l, function(i)
{
if(((i*100)/l)%%10 == 0)
cat(i, " ")
genes = get_genes_by_region(start_chr[i], start_position[i], end_position[i], genebody_annotation)
genes_nucleotides_count <- get_genes_nucleotides_intersection(start_chr[i], start_position[i], end_position[i], genebody_annotation)
tpm = get_TPM(genes, rna_data)
total_TPM = sum(tpm)
std_TPM = std(tpm)
if(length(genes)==0)
{
total_TPM = NA
std_TPM = NA
}
c(length(genes), total_TPM, genes_nucleotides_count, std_TPM)
})
nucleotides = end_position-start_position
nucleotides[nucleotides<=0] = NA
data.frame(start_chr, start_position, end_position,
nucleotides, gene_count = gene_info[1,], genes_nucleotides_count = gene_info[3,], total_TPM = gene_info[2,], std_TPM = gene_info[4,])
}
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody, sizes = c(1e3,1e4,1e5))
make_rna_window_data_frame <- function(wgbs_data, rna_data, genebody_annotation, window)
{
wgbs_data = sum_strands(wgbs_data, verbose = F)
l = length(wgbs_data$prop)
fragments <- floor(l/window)
i_starting_points <- ((0:(fragments-1))*window)+1
window = i_starting_points[2]-i_starting_points[1]
start_position = wgbs_data[i_starting_points]$Cpos
start_chr = wgbs_data[i_starting_points]$chr
end_position = wgbs_data[i_starting_points+window]$Cpos
#end_chr = wgbs_data[i_starting_points+window]$chr
l = length(start_position)
rna_data = rna_data[gene_id %in% genebody_annotation$id]
gene_info = sapply(1:l, function(i)
{
if((floor(i*100)/l)%%10 == 0)
cat((floor(i*100)/l), "%")
genes = get_genes_by_region(start_chr[i], start_position[i], end_position[i], genebody_annotation)
genes_nucleotides_count <- get_genes_nucleotides_intersection(start_chr[i], start_position[i], end_position[i], genebody_annotation)
tpm = get_TPM(genes, rna_data)
total_TPM = sum(tpm)
std_TPM = std(tpm)
if(length(genes)==0)
{
total_TPM = NA
std_TPM = NA
}
c(length(genes), total_TPM, genes_nucleotides_count, std_TPM)
})
nucleotides = end_position-start_position
nucleotides[nucleotides<=0] = NA
data.frame(start_chr, start_position, end_position,
nucleotides, gene_count = gene_info[1,], genes_nucleotides_count = gene_info[3,], total_TPM = gene_info[2,], std_TPM = gene_info[4,])
}
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody, sizes = c(1e3,1e4,1e5))
make_rna_window_data_frame <- function(wgbs_data, rna_data, genebody_annotation, window)
{
wgbs_data = sum_strands(wgbs_data, verbose = F)
l = length(wgbs_data$prop)
fragments <- floor(l/window)
i_starting_points <- ((0:(fragments-1))*window)+1
window = i_starting_points[2]-i_starting_points[1]
start_position = wgbs_data[i_starting_points]$Cpos
start_chr = wgbs_data[i_starting_points]$chr
end_position = wgbs_data[i_starting_points+window]$Cpos
#end_chr = wgbs_data[i_starting_points+window]$chr
l = length(start_position)
rna_data = rna_data[gene_id %in% genebody_annotation$id]
gene_info = sapply(1:l, function(i)
{
if((floor(i*100)/l)%%10 == 0)
cat((floor(i*100)/l), "%")
genes = get_genes_by_region(start_chr[i], start_position[i], end_position[i], genebody_annotation)
genes_nucleotides_count <- get_genes_nucleotides_intersection(start_chr[i], start_position[i], end_position[i], genebody_annotation)
tpm = get_TPM(genes, rna_data)
total_TPM = sum(tpm)
std_TPM = std(tpm)
if(length(genes)==0)
{
total_TPM = NA
std_TPM = NA
}
c(length(genes), total_TPM, genes_nucleotides_count, std_TPM)
})
nucleotides = end_position-start_position
nucleotides[nucleotides<=0] = NA
data.frame(start_chr, start_position, end_position,
nucleotides, gene_count = gene_info[1,], genes_nucleotides_count = gene_info[3,], total_TPM = gene_info[2,], std_TPM = gene_info[4,])
}
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody, sizes = c(1e3,1e4,1e5))
((29199*100)/290000)
floor((29199*100)/290000)
floor((29199*100)/290000)%%10
make_rna_window_data_frame <- function(wgbs_data, rna_data, genebody_annotation, window)
{
wgbs_data = sum_strands(wgbs_data, verbose = F)
l = length(wgbs_data$prop)
fragments <- floor(l/window)
i_starting_points <- ((0:(fragments-1))*window)+1
window = i_starting_points[2]-i_starting_points[1]
start_position = wgbs_data[i_starting_points]$Cpos
start_chr = wgbs_data[i_starting_points]$chr
end_position = wgbs_data[i_starting_points+window]$Cpos
#end_chr = wgbs_data[i_starting_points+window]$chr
l = length(start_position)
rna_data = rna_data[gene_id %in% genebody_annotation$id]
gene_info = sapply(1:l, function(i)
{
if((i %% floor(l/100)) == 0)
cat(100*i/l, "%")
genes = get_genes_by_region(start_chr[i], start_position[i], end_position[i], genebody_annotation)
genes_nucleotides_count <- get_genes_nucleotides_intersection(start_chr[i], start_position[i], end_position[i], genebody_annotation)
tpm = get_TPM(genes, rna_data)
total_TPM = sum(tpm)
std_TPM = std(tpm)
if(length(genes)==0)
{
total_TPM = NA
std_TPM = NA
}
c(length(genes), total_TPM, genes_nucleotides_count, std_TPM)
})
nucleotides = end_position-start_position
nucleotides[nucleotides<=0] = NA
print(gene_info[1,])
print(gene_info)
data.frame(start_chr, start_position, end_position,
nucleotides, gene_count = gene_info[1,], genes_nucleotides_count = gene_info[3,], total_TPM = gene_info[2,], std_TPM = gene_info[4,])
}
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody, sizes = c(1e3,1e4,1e5))
make_rna_window_data_frame <- function(wgbs_data, rna_data, genebody_annotation, window)
{
wgbs_data = sum_strands(wgbs_data, verbose = F)
l = length(wgbs_data$prop)
fragments <- floor(l/window)
i_starting_points <- ((0:(fragments-1))*window)+1
window = i_starting_points[2]-i_starting_points[1]
start_position = wgbs_data[i_starting_points]$Cpos
start_chr = wgbs_data[i_starting_points]$chr
end_position = wgbs_data[i_starting_points+window]$Cpos
#end_chr = wgbs_data[i_starting_points+window]$chr
l = length(start_position)
rna_data = rna_data[gene_id %in% genebody_annotation$id]
gene_info = sapply(1:l, function(i)
{
if((i %% floor(l/100)) == 0)
cat(floor(100*i/l), "%  ")
genes = get_genes_by_region(start_chr[i], start_position[i], end_position[i], genebody_annotation)
genes_nucleotides_count <- get_genes_nucleotides_intersection(start_chr[i], start_position[i], end_position[i], genebody_annotation)
tpm = get_TPM(genes, rna_data)
total_TPM = sum(tpm)
std_TPM = std(tpm)
if(length(genes)==0)
{
total_TPM = NA
std_TPM = NA
}
c(length(genes), total_TPM, genes_nucleotides_count, std_TPM)
})
nucleotides = end_position-start_position
nucleotides[nucleotides<=0] = NA
print(gene_info)
print(gene_info[,1])
data.frame(start_chr, start_position, end_position,
nucleotides, gene_count = gene_info[1,], genes_nucleotides_count = gene_info[3,], total_TPM = gene_info[2,], std_TPM = gene_info[4,])
}
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody, sizes = c(1e3,1e4,1e5))
std(c(1,2,3))
sd(c(1,2,3))
sd(c(1,2,3,4,5))
std(c(1,2,3,4,5))
make_rna_window_data_frame <- function(wgbs_data, rna_data, genebody_annotation, window)
{
wgbs_data = sum_strands(wgbs_data, verbose = F)
l = length(wgbs_data$prop)
fragments <- floor(l/window)
i_starting_points <- ((0:(fragments-1))*window)+1
window = i_starting_points[2]-i_starting_points[1]
start_position = wgbs_data[i_starting_points]$Cpos
start_chr = wgbs_data[i_starting_points]$chr
end_position = wgbs_data[i_starting_points+window]$Cpos
#end_chr = wgbs_data[i_starting_points+window]$chr
l = length(start_position)
rna_data = rna_data[gene_id %in% genebody_annotation$id]
gene_info = sapply(1:l, function(i)
{
if((i %% floor(l/100)) == 0)
cat(floor(100*i/l), "%  ")
genes = get_genes_by_region(start_chr[i], start_position[i], end_position[i], genebody_annotation)
genes_nucleotides_count <- get_genes_nucleotides_intersection(start_chr[i], start_position[i], end_position[i], genebody_annotation)
tpm = get_TPM(genes, rna_data)
total_TPM = sum(tpm)
std_TPM = sd(tpm)
c(length(genes), total_TPM, genes_nucleotides_count, std_TPM)
})
nucleotides = end_position-start_position
nucleotides[nucleotides<=0] = NA
print(gene_info)
print(gene_info[,1])
data.frame(start_chr, start_position, end_position,
nucleotides, gene_count = gene_info[1,], genes_nucleotides_count = gene_info[3,], total_TPM = gene_info[2,], std_TPM = gene_info[4,])
}
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody, sizes = c(1e3,1e4,1e5))
stomach_tables
stomach_tables[[3]]
stomach_tables[[4]]
stomach_tables[[1]]
stomach_tables[[1]]$std_TPM
stomach_tables[[1]][stomach_tables[[1]]$gene_count==0,]$std_TPM
stomach_tables[[1]][stomach_tables[[1]]$gene_count==1,]$std_TPM
stomach_tables[[1]][stomach_tables[[1]]$gene_count==2,]$std_TPM
stomach_rna
produce_fragments_rna_tables <- function(wgbs_data, rna_data, genebody_annotation, sizes = c(1e3,1e4,1e5,1e6), file = "")
{
tables = lapply(sizes, function(window)
{
make_rna_window_data_frame(wgbs_data, rna_data, genebody_annotation, window)
})
if(nchar(file>1))
saveRDS(tables, file = file)
return(tables)
}
stomach_tables = produce_fragments_rna_tables(data_stomach, stomach_rna, genebody, sizes = c(1e3,1e4,1e5), file = "../../Rexperiments/stomach_rna_fragment_tables.Rda")
make_rna_window_data_frame <- function(wgbs_data, rna_data, genebody_annotation, window)
{
wgbs_data = sum_strands(wgbs_data, verbose = F)
l = length(wgbs_data$prop)
fragments <- floor(l/window)
i_starting_points <- ((0:(fragments-1))*window)+1
window = i_starting_points[2]-i_starting_points[1]
start_position = wgbs_data[i_starting_points]$Cpos
start_chr = wgbs_data[i_starting_points]$chr
end_position = wgbs_data[i_starting_points+window]$Cpos
#end_chr = wgbs_data[i_starting_points+window]$chr
l = length(start_position)
rna_data = rna_data[gene_id %in% genebody_annotation$id]
gene_info = sapply(1:l, function(i)
{
if((i %% floor(l/100)) == 0)
cat(floor(100*i/l), "%  ")
genes = get_genes_by_region(start_chr[i], start_position[i], end_position[i], genebody_annotation)
genes_nucleotides_count <- get_genes_nucleotides_intersection(start_chr[i], start_position[i], end_position[i], genebody_annotation)
tpm = get_TPM(genes, rna_data)
total_TPM = sum(tpm)
std_TPM = sd(tpm)
c(length(genes), total_TPM, genes_nucleotides_count, std_TPM)
})
nucleotides = end_position-start_position
nucleotides[nucleotides<=0] = NA
data.frame(start_chr, start_position, end_position,
nucleotides, gene_count = gene_info[1,], genes_nucleotides_count = gene_info[3,], total_TPM = gene_info[2,], std_TPM = gene_info[4,])
}
h1_rna = read_rna_file("../../MethylationCode/MethylationData/rna-seq/ENCFF653XHG_H1.tsv")
data_H1 <- sum_strands(readRDS("../../MethylationCode/MethylationData/wgbs/H1.Rda"))
H1_tables = produce_fragments_rna_tables(data_H1, H1_rna, genebody, sizes = c(1e3,1e4,1e5), file = "../../Rexperiments/H1_rna_fragment_tables.Rda")
H1_tables = produce_fragments_rna_tables(data_H1, h1_rna, genebody, sizes = c(1e3,1e4,1e5), file = "../../Rexperiments/H1_rna_fragment_tables.Rda")
file_rna_K562 = "../../MethylationCode/MethylationData/rna-seq/ENCFF172GIN_K562.tsv"
K562_rna = read_rna_file(file_rna_K562)
rm(data_H1, data_stomach)
gc()
data_K562 <- sum_strands(readRDS("../../MethylationCode/MethylationData/wgbs/K562.Rda"))
K562_tables = produce_fragments_rna_tables(data_K562, K562_rna, genebody, sizes = c(1e3,1e4,1e5), file = "../../Rexperiments/K562_rna_fragment_tables.Rda")
