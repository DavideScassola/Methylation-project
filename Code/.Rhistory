MSR_visualization(runif(4), perturb = 0.000001)
MSR_visualization(runif(4), perturb = 0.000001)
MSR_visualization(runif(4), perturb = 0.000001)
MSR_visualization(runif(4), perturb = 0.000001)
MSR_visualization(runif(4), perturb = 0.000001)
MSR_visualization(runif(4), perturb = 0.000001)
MSR_visualization(runif(4), perturb = 0.000001)
MSR_visualization(runif(4), perturb = 0.000001)
MSR_visualization(runif(4), perturb = 0.000001)
v <- runif(4)
MSR_visualization(v, perturb = 0.000001)
MSR_visualization(v, perturb = 0.000001)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
v <- runif(400)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
v <- runif(400)
v <- runif(400)
v <- runif(400)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 2)
MSR_visualization(v, perturb = 2)
MSR_visualization(v, perturb = 2)
MSR_visualization(v, perturb = 2)
MSR_visualization(v, perturb = 2)
MSR_visualization(v, perturb = 2)
MSR_visualization(v, perturb = 2)
MSR_visualization(v, perturb = 2)
MSR_visualization(v, perturb = 2)
MSR_visualization <- function(positions, discretization_bin_size = NA, perturb = 0)
{
if(perturb)
{
s <- sort(positions)
sd <- mean(s[2:length(s)]-s[1:(length(s)-1)])*perturb
positions <- s + rnorm(length(s), sd = sd)
}
rr <- positions_MSR(positions, discretization_bin_size, F, F, max_bins = 1e6)
msr <- MSR_area(rr)
resolution_relevance_plot(rr)
title(paste("MSR:", round(msr, digits = 4)))
}
MSR_visualization(v, perturb = 2)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.01)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
v <- runif(100)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 0.001)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
v <- runif(1000)
MSR_visualization(v, perturb = 0)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 0.1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 1)
MSR_visualization(v, perturb = 17)
MSR_visualization(v, perturb = 17)
MSR_visualization(v)
if(0) 6
if(1) 6
if(-1) 6
MSR_example(v)
par(mfrow = c(1,2))
MSR_example(v)
v <- runif(20)
MSR_example(v)
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v)))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.0001))
MSR_example(v+rnorm(length(v), sd = 0.0001))
MSR_example(v+rnorm(length(v), sd = 0.0001))
MSR_example(v+rnorm(length(v), sd = 0.0001))
MSR_example(v+rnorm(length(v), sd = 0.0001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.01))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
v <- runif(1000)
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example(v+rnorm(length(v), sd = 0.001))
MSR_example((1:20)+rnorm(length(v), sd = 0.001))
MSR_example((1:20)+rnorm(length(v), sd = 0.001))
MSR_example((1:20)+rnorm(length(v), sd = 0.01))
MSR_example((1:20)+rnorm(length(v), sd = 0.01))
MSR_example((1:20)+rnorm(length(v), sd = 0.01))
MSR_example((1:20)+rnorm(length(v), sd = 0))
MSR_example((1:20)+rnorm(length(v), sd = 0))
MSR_example((1:20)+rnorm(length(v), sd = 0.000001))
MSR_example((1:20)+rnorm(length(v), sd = 0.00001))
MSR_example((1:20)+rnorm(length(v), sd = 0.0001))
MSR_example((1:20)+rnorm(length(v), sd = 0.0001))
positions_MSR(runif(100000))
MSR_visualization(runif(100000))
MSR_visualization(runif(1000000))
MSR_visualization(runif(10000))
MSR_visualization(runif(900000))
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
short_name <- "stomach"
wgbs_file  <- "../../MethylationCode/MethylationData/wgbs/stomach.Rda"
genebody_annotation_file <- "../../Rexperiments/detailed_genebody_improved.Rda"
gbt <- readRDS("../../Rexperiments/stomach_genes_msr_table.Rda")
gbt2 <- make_genes_table2(sum_strands(readRDS(wgbs_file)), genebody_annotation = readRDS(genebody_annotation_file), no_msr = T)
gbt2
sum(gbt2$meth_autocorrelation - gbt$meth_autocorrelation, na.rm = T)
merge(gbt, gbt2[, c("meth_rate", "drift")], by = "gene_id")
merge(gbt, gbt2[, c("meth_rate", "drift", "gene_id")], by = "gene_id")
gbt2[, c("meth_rate", "drift", "gene_id")
[]
]
gbt2[, c("meth_rate", "drift", "gene_id")]
merge(gbt, gbt2[, c("meth_rate", "drift", "gene_id")], by = gene_id)
merge(gbt, gbt2[, c("meth_rate", "drift", "gene_id")])
gbt$meth_rate
gbt$meth_rate <- gbt2$meth_rate
gbt$meth_rate
gbt$drift <- gbt2$drift
saveRDS(gbt, "../../Rexperiments/stomach_genes_msr_table.Rda")
gbt
gbt$CG_list_inverted_msr
knitr::opts_chunk$set(echo = TRUE)
meth_data_file <- "../../../Rexperiments/stomach_genes_msr_table.Rda"
rna_file <- "../../../MethylationCode/MethylationData/rna-seq/ENCFF918KPC_stomach.tsv
"
filter_gene_type <- c("protein_coding")
#filter_gene_type <- NA
response_variable <- "log_pme_tpm"
#response_variable <- "log_tpm"
epsilon <- 1e-3
train_prop <- 0.6
lasso_lambda <- 0.1
library("PerformanceAnalytics")
library("MASS")
library(ggplot2)
library(ggExtra)
source("../../../Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
basic_predictors <- c("log_nucleotides", "CG_density", "log_CG_count", "meth_rate")
basic_predictors_with_autoc <- c(basic_predictors, "meth_autocorrelation", "drift")
expression_measures <- c("TPM", "pme_TPM")
msr_features <- c("CGsites_msr", "meth_msr", "unmeth_msr", "CG_list_msr", "CG_list_inverted_msr")
all_predictors <- c(basic_predictors_with_autoc, msr_features)
genes_meth_table = readRDS(meth_data_file)
genes_meth_table$gene_id <- remove_version_from_gene(genes_meth_table$gene_id)
rna <- read_rna_file(rna_file, reduced = F, correct_gene_id = T);
train_model_data
knitr::opts_chunk$set(echo = TRUE)
meth_data_file <- "../../../Rexperiments/stomach_genes_msr_table.Rda"
rna_file <- "../../../MethylationCode/MethylationData/rna-seq/ENCFF918KPC_stomach.tsv"
filter_gene_type <- c("protein_coding")
#filter_gene_type <- NA
response_variable <- "log_pme_tpm"
#response_variable <- "log_tpm"
epsilon <- 1e-3
train_prop <- 0.6
lasso_lambda <- 0.1
library("PerformanceAnalytics")
library("MASS")
library(ggplot2)
library(ggExtra)
source("../../../Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
basic_predictors <- c("log_nucleotides", "CG_density", "log_CG_count", "meth_rate")
basic_predictors_with_autoc <- c(basic_predictors, "meth_autocorrelation", "drift")
expression_measures <- c("TPM", "pme_TPM")
msr_features <- c("CGsites_msr", "meth_msr", "unmeth_msr", "CG_list_msr", "CG_list_inverted_msr")
all_predictors <- c(basic_predictors_with_autoc, msr_features)
genes_meth_table = readRDS(meth_data_file)
genes_meth_table$gene_id <- remove_version_from_gene(genes_meth_table$gene_id)
rna <- read_rna_file(rna_file, reduced = F, correct_gene_id = T);
data_table <- as.data.frame(merge(genes_meth_table, rna))
cat("TPM fraction: ", sum(data_table$TPM)/1e6, "\n")
##### filter genes type
if(!is.na(filter_gene_type))
{
data_table <- data_table[data_table$gene_type %in% filter_gene_type, ]
cat(paste(filter_gene_type, "TPM fraction: "), sum(data_table$TPM)/1e6)
}
##### add log(tpm)
data_table$log_tpm <- log(data_table$TPM + epsilon)
data_table$log_pme_tpm <- log(data_table$pme_TPM + epsilon)
#data_table$noisy_log_tpm <-
#data_table$noisy_log_pme_tpm <-
#### log transformation
data_table$log_nucleotides <- log(data_table$nucleotides, 10)
data_table$log_CG_count<- log(data_table$CG_count, 10)
#data_table$CG_density<- log(data_table$CG_density, 10)
rows <- sample(1:length(data_table$chr), size = 3e3)
chart.Correlation(data_table[rows,c(basic_predictors_with_autoc, response_variable)], method = "pearson")
chart.Correlation(data_table[rows,c(msr_features, response_variable)])
ggscatter <- function(data_table, xn, response_variable, alpha = 0.1)
{
df <- data_table[, c(xn, response_variable)]
colnames(df) <- c("x","y")
((ggplot(df,aes(x=x,y=y)) + geom_point(alpha = alpha))) + ylab(response_variable) + xlab(xn)
}
ggscatter(data_table[rows, ], "meth_autocorrelation", response_variable)
ggscatter(data_table[rows, ], "CG_list_inverted_msr", response_variable)
ggscatter(data_table[rows, ], "meth_rate", response_variable)
ggscatter(data_table[rows, ], "drift", response_variable)
# #### save NA
#     fragile_features <- c(msr_features)
#     data_table$valid_msr_measures <- (complete.cases(data_table[,fragile_features]))
#     data_table[!data_table$valid_msr_measures, fragile_features] <- -1e3
#     msr_features <- c(msr_features, "valid_msr_measures")
#     all_predictors <- c(basic_predictors_with_autoc, msr_features)
#     data_table$valid_msr_measures <- as.factor(data_table$valid_msr_measures)
# DATASET
model_data = data_table[complete.cases(data_table[,c(all_predictors,expression_measures)]),]
cat("missing data: ", (1-(length(model_data[,1])/length(data_table[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = model_data[train_rows,]
test_model_data = model_data[test_rows,]
# DATASET
model_data_basic = data_table[complete.cases(data_table[,c(basic_predictors_with_autoc,expression_measures)]),]
cat("\n\nbasic missing data: ", (1-(length(model_data_basic[,1])/length(model_data_basic[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data_basic[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
basic_train_model_data = model_data_basic[train_rows,]
basic_test_model_data = model_data_basic[test_rows,]
check_model <- function(train_model_data, test_model_data, response_variable, predictors, summary = T)
{
formula <- as.formula(paste(response_variable, "~ ."))
model = lm(formula, data = train_model_data[, c(response_variable, predictors)])
if(summary)
print(summary(model))
cat("Test data R squared: ", tmse(model, test_model_data, response_variable))
#1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
}
check_model(train_model_data, test_model_data, response_variable, basic_predictors)
cat("\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors, summary = F)
check_model(train_model_data, test_model_data, response_variable, basic_predictors_with_autoc)
cat("\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors_with_autoc, summary = F)
check_model(train_model_data, test_model_data, response_variable, all_predictors)
check_model(train_model_data, test_model_data, response_variable, c("meth_autocorrelation", "drift","nucleotides"))
model <- lasso(response_variable, df = train_model_data[,c(response_variable, all_predictors)], lambda = lasso_lambda)
cat("lambda:", model$lambda, "\n")
print(model$beta)
cat("\nTest data R squared: ", tmse.glmnet(model, test_model_data, response_variable, all_predictors ))
#library(randomForest)
# model <- randomForest(model_this(response_variable), train_model_data[,c(response_variable, all_predictors)], importance = T)
View(train_model_data)
train_model_data
scale(train_model_data)
model$beta
model$beta@factors
model$beta[1,]
model$beta[,1]
model$beta@i
model$beta@p
model$beta@Dim
model$beta@Dimnames
model$beta[,1]
train_model_data[, c(all_predictors)]
std(train_model_data[, c(all_predictors)])
std(as.matrix.data.frame(train_model_data[, c(all_predictors)]))
(as.matrix.data.frame(train_model_data[, c(all_predictors)]))
scale(as.matrix.data.frame(train_model_data[, c(all_predictors)]))
ss <- scale(as.matrix.data.frame(train_model_data[, c(all_predictors)]))
ss
ss[1,]
ss[2,]
ss[3,]
ss[,1]
length(ss[,1])
length(train_model_data[,1])
ss:center
attributes(ss)
center(ss)
attr(ss, "scale")
attr(ss, 'scale')
attr(ss, 'scaled:scale')
attr(ss, 'scaled:scaljhe')
attr(ss, 'scaled:scale')
s <- attr(ss, 'scaled:scale')
ss <- scale(as.matrix.data.frame(train_model_data[, c(all_predictors)]))
s <- attr(ss, 'scaled:scale')
s
s*model$beta[,1]
model$beta[,1]
model <- lasso(response_variable, df = train_model_data[,c(response_variable, all_predictors)], lambda = lasso_lambda)
cat("lambda:", model$lambda, "\n")
print(model$beta)
cat("\nTest data R squared: ", tmse.glmnet(model, test_model_data, response_variable, all_predictors ))
ss <- scale(as.matrix.data.frame(train_model_data[, c(all_predictors)]))
s <- attr(ss, 'scaled:scale')
s*model$beta[,1]
model <- lasso(response_variable, df = train_model_data[,c(response_variable, all_predictors)], lambda = lasso_lambda)
cat("lambda:", model$lambda, "\n")
print(model$beta)
cat("\nTest data R squared: ", tmse.glmnet(model, test_model_data, response_variable, all_predictors ))
ss <- scale(as.matrix.data.frame(train_model_data[, c(all_predictors)]))
s <- attr(ss, 'scaled:scale')
print(s*model$beta[,1])
print(s*model$beta[,1])
cat(s*model$beta[,1])
model$beta[,1] <- s*model$beta[,1]
print(model$beta)
rda_convert("../../MethylationCode/MethylationData/wgbs/ENCFF043NUK_endodermal_cell.bed.gz", "../../MethylationCode/MethylationData/wgbs/ENCFF043NUK_endodermal_cell.rda")
gc(full = T)
