# mixed_test_r2(model, test_datas)
self_test_r2(lms)
# LINEAR MODEL BASIC_PREDICTORS
# self_test_r2(models, test_datas)
# cross_matrix_test_r2(models, test_datas)
# mixed_test_r2(model, test_datas)
predictors <- basic_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
cross_matrix_test_r2 <- function(models_and_test, eval_method = tmse)
{
sapply(models_and_test, function(mt1)
{
sapply(models_and_test, function(mt2) {eval_method(mt1$model, mt2$test)})
})
}
self_test <- function(models_and_test, eval_method = tmse)
{
sapply(models_and_test, function(mt){eval_method(mt$model, mt$test)})
}
cross_matrix_test <- function(models_and_test, eval_method = tmse)
{
sapply(models_and_test, function(mt1)
{
sapply(models_and_test, function(mt2) {eval_method(mt1$model, mt2$test)})
})
}
cross_matrix_test(lms)
single_correlations_matrix <- function(data, response_variable, predictors)
{
m <- sapply(data_tables, function(dt) {single_correlations(response_variable, predictors)})
m
}
single_correlations_matrix(data_tables, response_variable, basic_and_advanced_predictors)
names(data_tables) <- cell_names
single_correlations_matrix <- function(data, response_variable, predictors)
{
m <- sapply(data_tables, function(dt) {single_correlations(dt, response_variable, predictors)})
m
}
single_correlations_matrix <- function(data, response_variable, predictors)
)))
single_correlations_matrix <- function(data, response_variable, predictors)
{
m <- sapply(data_tables, function(dt) {single_correlations(dt, response_variable, predictors)})
m
}
single_correlations_matrix(data_tables, response_variable, basic_predictors)
single_correlations_matrix <- function(data, response_variable, predictors)
{
m <- sapply(data_tables, function(dt) {single_correlations(dt, response_variable, predictors)})
rownames(m) <- predictors
m
}
single_correlations_matrix(data_tables, response_variable, basic_predictors)
single_correlations_matrix(data_tables, response_variable, all_predictors)
# LINEAR MODEL BASIC_PREDICTORS
# self_test_r2(models, test_datas)
# cross_matrix_test_r2(models, test_datas)
# mixed_test_r2(model, test_datas)
predictors <- basic_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
cross_matrix_test(lms)
# LINEAR MODEL BASIC_PREDICTORS
# self_test_r2(models, test_datas)
# cross_matrix_test_r2(models, test_datas)
# mixed_test_r2(model, test_datas)
predictors <- basic_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(cross_matrix_test(lms))
# LINEAR MODEL BASIC_PREDICTORS
# self_test_r2(models, test_datas)
# cross_matrix_test_r2(models, test_datas)
# mixed_test_r2(model, test_datas)
predictors <- basic_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(cross_matrix_test(lms))
# LINEAR MODEL BASIC_PREDICTORS
# self_test_r2(models, test_datas)
# cross_matrix_test_r2(models, test_datas)
# mixed_test_r2(model, test_datas)
predictors <- basic_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(cross_matrix_test(lms),2))
print(round(cross_matrix_test(lms, prediction_correlation_score()),2))
print(round(cross_matrix_test(lms, prediction_correlation_score,2))
)
print(round(cross_matrix_test(lms, prediction_correlation_score,2)))
print(round(cross_matrix_test(lms, prediction_correlation_score),2))
print(round(cross_matrix_test(lms, prediction_correlation_score),2)^2)
print(round(cross_matrix_test(lms, prediction_correlation_score)^2,2))
print(round(cross_matrix_test(lms, prediction_correlation_score)^2,2))
print(round(self_test(lms, prediction_correlation_score)^2,2))
print(round(self_test(lms, prediction_correlation_score),2))
# LINEAR MODEL BASIC_PREDICTORS
# self_test_r2(models, test_datas)
# cross_matrix_test_r2(models, test_datas)
# mixed_test_r2(model, test_datas)
predictors <- basic_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
# predictors selection
basic_predictors <- c("log_nucleotides", "CpG_density", "meth_rate")
advanced_predictors <- c("meth_autocorrelation", "drift", "meth_sd")
msr_related_predictors <- c("msr", "inverted_msr", "ecdf", "inverted_ecdf", "residual", "inverted_residual")
basic_and_advanced_predictors <- c(basic_predictors, advanced_predictors)
all_predictors <- c(basic_predictors, advanced_predictors, msr_related_predictors)
# LINEAR MODEL BASIC_PREDICTORS
predictors <- basic_and_advanced_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL BASIC_PREDICTORS
predictors <- basic_and_advanced_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL BASIC_PREDICTORS
predictors <- basic_and_advanced_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL ALL PREDICTORS
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL ALL PREDICTORS
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train),
test_data=md$test)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL ALL PREDICTORS
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train),
test_data=md$test)
})
print(round(self_test(lms, prediction_correlation_score),2))
# LINEAR MODEL ALL PREDICTORS
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train),
test_data=md$test)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL BASIC AND ADVANCED PREDICTORS
predictors <- basic_and_advanced_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
print(round(self_test(lms, tmse),2))
# LINEAR MODEL BASIC AND ADVANCED PREDICTORS
predictors <- basic_and_advanced_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
print(round(cross_matrix_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL BASIC AND ADVANCED PREDICTORS
predictors <- basic_and_advanced_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2), "\n")
# LINEAR MODEL BASIC AND ADVANCED PREDICTORS
predictors <- basic_and_advanced_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
cat("\n")
print(round(cross_matrix_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL ALL PREDICTORS
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train),
test_data=md$test)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
cat("\n")
print(round(cross_matrix_test(lms, prediction_correlation_score)^2,2))
# general paramenters
train_prop <- 0.6
random_train_test_split <- T
epsilon <- 1e-3
lasso_lambda <- 0.1
response_variable <- "log_total_pme_TPM"
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train, lasso_lambda),
test_data=md$test)
})
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
models <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train, lasso_lambda),
test_data=md$test)
})
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
models <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train[,predictors], lasso_lambda),
test_data=md$test)
})
model_datas$H1$train[,predictors]
lasso(response_variable, model_datas$H1$train[,predictors], lasso_lambda)
lasso(response_variable, model_datas$H1$train[,c(response_variable, predictors)], lasso_lambda)
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
models <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train[,c(response_variable, predictors)], lasso_lambda),
test_data=md$test)
})
lasso(response_variable, model_datas$H1$train[,c(response_variable, predictors)], lasso_lambda)
m <- lasso(response_variable, model_datas$H1$train[,c(response_variable, predictors)], lasso_lambda)
m$beta
models <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train[,c(response_variable, predictors)], lasso_lambda),
test_data=md$test)
})
models <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train[,c(response_variable, predictors)], lasso_lambda),
test_data=md$test)
})
models <- lapply(model_datas, function(md){ cat("ciao")
List(model=lasso(response_variable, md$train[,c(response_variable, predictors)], lasso_lambda),
test_data=md$test)
})
m <- lasso(response_variable, model_datas$GM12878$train[,c(response_variable, predictors)], lasso_lambda)
m <- lasso(response_variable, model_datas$K562$train[,c(response_variable, predictors)], lasso_lambda)
# DATASET SPLIT
model_datas <- lapply(1:l, function(i)
{
dt <- data_tables[[i]]
name <- cell_names[i]
dt_msr <- dt[complete.cases(dt[,all_predictors]),]
dt_basic <- dt[complete.cases(dt[,basic_and_advanced_predictors]),]
cat("\n", name, " missing data: ", (1-(length(dt_msr[,1])/length(dt[,1])))*100, "%")
cat(" ", name, "basic features: ", (1-(length(dt_basic[,1])/length(dt[,1])))*100, "%")
split_msr <- train_and_test_split(dt_msr, train_prop, random_train_test_split)
split_basic <- train_and_test_split(dt_basic, train_prop, random_train_test_split)
dl <- List(train=split_msr$train, test=split_msr$test, train_basic=split_basic$train, test_basic=split_basic$test, name=name)
})
names(model_datas) <- cell_names
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
predictors <- all_predictors
models <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train[,c(response_variable, predictors)], lasso_lambda),
test_data=md$test)
})
print(round(self_test(models, prediction_correlation_score)^2,2))
predict(models$H1$model, models$H1$test_data)
tmse(models$H1$model, models$H1$test_data)
predict(models$H1$model, models$H1$test_data,  type="response")
predict.glm(models$H1$model, models$H1$test_data,  type="response")
predict.glmnet(models$H1$model, models$H1$test_data,  type="response")
m <- models$H1$model
m$df
m$beta
m$beta@Dimnames
as.character(formula(m)[2])
as.character(formula(m))
prediction_correlation_score.glmnet <- function(model, test_data, y_name, x_names)
{
newx = as.matrix.data.frame(test_data[, x_names])
c <- cor.test(predict.glmnet(model, newx = newx,  type="response"), test_data[,y_name])$estimate
names(c) <- NULL
c
}
self_test.glmnet <- function(models_and_test, eval_method = tmse.glmnet)
{
sapply(models_and_test, function(mt){eval_method(mt$model, mt$test)})
}
cross_matrix_test.glmnet <- function(models_and_test, eval_method = tmse.glmnet)
{
sapply(models_and_test, function(mt1){
sapply(models_and_test, function(mt2) {eval_method(mt1$model, mt2$test)})})
}
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
predictors <- all_predictors
models <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train[,c(response_variable, predictors)], lasso_lambda),
test_data=md$test)
})
print(round(self_test(models, prediction_correlation_score.glmnet)^2,2))
prediction_correlation_score.glmnet(models$H1$model, models$H1$test_data)
knitr::opts_chunk$set(echo = TRUE)
library(ggfortify)
library("PerformanceAnalytics")
source("WGBS_analysis_functions.R", chdir = T)
knitr::opts_chunk$set(echo = TRUE)
library(ggfortify)
library("PerformanceAnalytics")
source("WGBS_analysis_functions.R", chdir = T)
# general paramenters
train_prop <- 0.6
random_train_test_split <- T
epsilon <- 1e-3
lasso_lambda <- 0.1
response_variable <- "log_total_pme_TPM"
# predictors selection
basic_predictors <- c("log_nucleotides", "CpG_density", "meth_rate")
advanced_predictors <- c("meth_autocorrelation", "drift", "meth_sd")
msr_related_predictors <- c("msr", "inverted_msr", "ecdf", "inverted_ecdf", "residual", "inverted_residual")
basic_and_advanced_predictors <- c(basic_predictors, advanced_predictors)
all_predictors <- c(basic_predictors, advanced_predictors, msr_related_predictors)
dir <- "../../Rexperiments/final"
cell_names <- c("H1", "K562", "GM12878", "GM23248", "Hela", "endodermal", "lung", "stomach")
msr_fragments_patterns <- c("msr", "1000")
expression_fragments_patterns <- c("expression", "1000")
l <- length(cell_names)
msrL <- lapply(cell_names, function(x) {get_file_names(dir, c(msr_fragments_patterns, x), T)[1] })
msr_fragments_tables = lapply(msrL, readRDS)
rnaL <- lapply(cell_names, function(x) {get_file_names(dir, c(expression_fragments_patterns, x), T)[1] })
rna_fragments_tables = lapply(rnaL, readRDS)
data_tables <- lapply(1:l, function(i)
{
data_table <- join_rna_and_msr_table(rna_fragments_tables[[i]], msr_fragments_tables[[i]])
data_table <- add_log_features(data_table, c("nucleotides", "total_TPM", "total_FPKM", "total_pme_TPM", "total_pme_FPKM"), epsilon)
colnames(data_table)[1] <- "chr"
data_table$cell_name <- as.factor(cell_names[i])
data_table <- exclude_outliers(data_table, lim = 2.5e5)
data_table
})
remove(msr_fragments_tables); remove(rna_fragments_tables); gc()
names(data_tables) <- cell_names
# DATASET SPLIT
model_datas <- lapply(1:l, function(i)
{
dt <- data_tables[[i]]
name <- cell_names[i]
dt_msr <- dt[complete.cases(dt[,all_predictors]),]
dt_basic <- dt[complete.cases(dt[,basic_and_advanced_predictors]),]
cat("\n", name, " missing data: ", (1-(length(dt_msr[,1])/length(dt[,1])))*100, "%")
cat(" ", name, "basic features: ", (1-(length(dt_basic[,1])/length(dt[,1])))*100, "%")
split_msr <- train_and_test_split(dt_msr, train_prop, random_train_test_split)
split_basic <- train_and_test_split(dt_basic, train_prop, random_train_test_split)
dl <- List(train=split_msr$train, test=split_msr$test, train_basic=split_basic$train, test_basic=split_basic$test, name=name)
})
names(model_datas) <- cell_names
single_correlations_matrix <- function(data, response_variable, predictors)
{
m <- sapply(data_tables, function(dt) {single_correlations(dt, response_variable, predictors)})
rownames(m) <- predictors
m
}
self_test <- function(models_and_test, eval_method = tmse)
{
sapply(models_and_test, function(mt){eval_method(mt$model, mt$test)})
}
cross_matrix_test <- function(models_and_test, eval_method = tmse)
{
sapply(models_and_test, function(mt1){
sapply(models_and_test, function(mt2) {eval_method(mt1$model, mt2$test)})})
}
# cross_matrix_test_r2
(models, test_datas)
# LINEAR MODEL BASIC_PREDICTORS
predictors <- basic_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL BASIC AND ADVANCED PREDICTORS
predictors <- basic_and_advanced_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train_basic),
test_data=md$test_basic)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
cat("\n")
print(round(cross_matrix_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL ALL PREDICTORS
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train),
test_data=md$test)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
cat("\n")
print(round(cross_matrix_test(lms, prediction_correlation_score)^2,2))
# LINEAR MODEL ALL PREDICTORS
predictors <- all_predictors
formula <- model_this(response_variable, predictors)
lms <- lapply(model_datas, function(md){
List(model=lm(formula, data = md$train),
test_data=md$test)
})
print(round(self_test(lms, prediction_correlation_score)^2,2))
cat("\n")
print(round(cross_matrix_test(lms, prediction_correlation_score)^2,2))
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
predictors <- all_predictors
models <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train[,c(response_variable, predictors)], lasso_lambda),
test_data=md$test)
})
print(round(self_test(models, prediction_correlation_score.glmnet)^2,2))
prediction_correlation_score.glmnet(models$H1$model,  models$H1$test_data, y_name = response_variable, x_names = predictors)
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
predictors <- all_predictors
models <- lapply(model_datas, function(md){
List(model=lasso(response_variable, md$train[,c(response_variable, predictors)], lasso_lambda),
test_data=md$test)
})
eval_f <- function(m,d) {prediction_correlation_score.glmnet(m$model, m$test, response_variable, predictors)}
print(round(self_test(models, eval_f)^2,2))
eval_f <- function(m,d) {prediction_correlation_score.glmnet(m, d, response_variable, predictors)}
print(round(self_test(models, eval_f)^2,2))
cat("\n")
print(round(cross_matrix_test(models, eval_f)^2,2))
eval_f <- function(m,d) {prediction_correlation_score.glmnet(m, d, response_variable, predictors)}
print(round(self_test(models, eval_f)^2,2))
cat("\n")
print(round(cross_matrix_test(models, eval_f)^2,2))
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
coeff_matrix <- sapply(1:length(models), function(i)
{
ss <- scale(as.matrix.data.frame(model_datas[[i]]$train[, c(predictors)]))
s <- attr(ss, 'scaled:scale')
s*models[[i]]$model$beta[,1]
})
coeff_matrix
# model selection
# show lasso_normalized_coefficients_matrix(train_datas, response, predictors, lambda)
# for basic_and_advanced_predictors, all_predictors
coeff_matrix <- sapply(1:length(models), function(i)
{
ss <- scale(as.matrix.data.frame(model_datas[[i]]$train[, c(predictors)]))
s <- attr(ss, 'scaled:scale')
s*models[[i]]$model$beta[,1]
})
colnames(coeff_matrix) <- cell_names
round(coeff_matrix,3)
