check_model(train_model_data, test_model_data, response_variable, basic_predictors_with_autoc)
cat("\n\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors_with_autoc, summary = F)
check_model(train_model_data, test_model_data, response_variable, all_predictors)
check_model(train_model_data, test_model_data, response_variable, c("meth_autocorrelation", "drift","nucleotides"))
model <- lasso(response_variable, df = train_model_data[,c(response_variable, all_predictors)], lambda = lasso_lambda)
cat("lambda:", model$lambda, "\n")
print(model$beta)
cat("\nTest data R squared: ", tmse.glmnet(model, test_model_data, response_variable, all_predictors ))
#library(randomForest)
# model <- randomForest(model_this(response_variable), train_model_data[,c(response_variable, all_predictors)], importance = T)
knitr::opts_chunk$set(echo = TRUE)
meth_data_file <- "../../../Rexperiments/lung_30_female_genes_msr_table.Rda"
rna_file <- "../../../MethylationCode/MethylationData/rna-seq/ENCFF947WLV_lung_30_gene_quantifications.tsv"
filter_gene_type <- c("protein_coding")
#filter_gene_type <- NA
response_variable <- "log_pme_tpm"
#response_variable <- "log_tpm"
epsilon <- 1e-3
train_prop <- 0.6
lasso_lambda <- 0.1
library("PerformanceAnalytics")
library("MASS")
library(ggplot2)
library(ggExtra)
source("../../../Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
basic_predictors <- c("log_nucleotides", "CG_density", "log_CG_count", "meth_rate")
basic_predictors_with_autoc <- c(basic_predictors, "meth_autocorrelation", "drift")
expression_measures <- c("TPM", "pme_TPM")
msr_features <- c("CGsites_msr", "meth_msr", "unmeth_msr", "CG_list_msr", "CG_list_inverted_msr")
all_predictors <- c(basic_predictors_with_autoc, msr_features)
genes_meth_table = readRDS(meth_data_file)
genes_meth_table$gene_id <- remove_version_from_gene(genes_meth_table$gene_id)
rna <- read_rna_file(rna_file, reduced = F, correct_gene_id = T);
data_table <- as.data.frame(merge(genes_meth_table, rna))
cat("TPM fraction: ", sum(data_table$TPM)/1e6, "\n")
##### filter genes type
if(!is.na(filter_gene_type))
{
data_table <- data_table[data_table$gene_type %in% filter_gene_type, ]
cat(paste(filter_gene_type, "TPM fraction: "), sum(data_table$TPM)/1e6)
}
##### add log(tpm)
data_table$log_tpm <- log(data_table$TPM + epsilon)
data_table$log_pme_tpm <- log(data_table$pme_TPM + epsilon)
#data_table$noisy_log_tpm <-
#data_table$noisy_log_pme_tpm <-
#### log transformation
data_table$log_nucleotides <- log(data_table$nucleotides, 10)
data_table$log_CG_count<- log(data_table$CG_count, 10)
#data_table$CG_density<- log(data_table$CG_density, 10)
rows <- sample(1:length(data_table$chr), size = 3e3)
chart.Correlation(data_table[rows,c(basic_predictors_with_autoc, response_variable)], method = "pearson")
chart.Correlation(data_table[rows,c(msr_features, response_variable)])
ggscatter <- function(data_table, xn, response_variable, alpha = 0.1)
{
df <- data_table[, c(xn, response_variable)]
colnames(df) <- c("x","y")
((ggplot(df,aes(x=x,y=y)) + geom_point(alpha = alpha))) + ylab(response_variable) + xlab(xn)
}
ggscatter(data_table[rows, ], "meth_autocorrelation", response_variable)
ggscatter(data_table[rows, ], "CG_list_inverted_msr", response_variable)
ggscatter(data_table[rows, ], "meth_rate", response_variable)
ggscatter(data_table[rows, ], "drift", response_variable)
# #### save NA
#     fragile_features <- c(msr_features)
#     data_table$valid_msr_measures <- (complete.cases(data_table[,fragile_features]))
#     data_table[!data_table$valid_msr_measures, fragile_features] <- -1e3
#     msr_features <- c(msr_features, "valid_msr_measures")
#     all_predictors <- c(basic_predictors_with_autoc, msr_features)
#     data_table$valid_msr_measures <- as.factor(data_table$valid_msr_measures)
# DATASET
model_data = data_table[complete.cases(data_table[,c(all_predictors,expression_measures)]),]
cat("missing data: ", (1-(length(model_data[,1])/length(data_table[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = model_data[train_rows,]
test_model_data = model_data[test_rows,]
# DATASET
model_data_basic = data_table[complete.cases(data_table[,c(basic_predictors_with_autoc,expression_measures)]),]
cat("\n\nbasic missing data: ", (1-(length(model_data_basic[,1])/length(model_data_basic[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
basic_train_model_data = model_data_basic[train_rows,]
basic_test_model_data = model_data_basic[test_rows,]
check_model <- function(train_model_data, test_model_data, response_variable, predictors, summary = T)
{
formula <- as.formula(paste(response_variable, "~ ."))
model = lm(formula, data = train_model_data[, c(response_variable, predictors)])
if(summary)
print(summary(model))
cat("Test data R squared: ", tmse(model, test_model_data, response_variable))
#1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
}
check_model(train_model_data, test_model_data, response_variable, basic_predictors)
cat("\n\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors, summary = F)
check_model(train_model_data, test_model_data, response_variable, basic_predictors_with_autoc)
cat("\n\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors_with_autoc, summary = F)
check_model(train_model_data, test_model_data, response_variable, all_predictors)
check_model(train_model_data, test_model_data, response_variable, c("meth_autocorrelation", "drift","nucleotides"))
model <- lasso(response_variable, df = train_model_data[,c(response_variable, all_predictors)], lambda = lasso_lambda)
cat("lambda:", model$lambda, "\n")
print(model$beta)
cat("\nTest data R squared: ", tmse.glmnet(model, test_model_data, response_variable, all_predictors ))
#library(randomForest)
# model <- randomForest(model_this(response_variable), train_model_data[,c(response_variable, all_predictors)], importance = T)
hist(data_table$log_pme_tpm)
hist(data_table$drift)
hist(log(data_table$drift))
data_table$drift <- log(data_table$drift)
rows <- sample(1:length(data_table$chr), size = 3e3)
chart.Correlation(data_table[rows,c(basic_predictors_with_autoc, response_variable)], method = "pearson")
rows <- sample(1:length(data_table$chr), size = 3e3)
chart.Correlation(data_table[rows,c(basic_predictors_with_autoc, response_variable)], method = "pearson")
data_table$drift
rows <- sample(1:length(data_table$chr), size = 3e3)
chart.Correlation(data_table[rows,c(basic_predictors_with_autoc, response_variable)], method = "pearson")
hist(drift)
knitr::opts_chunk$set(echo = TRUE)
meth_data_file <- "../../../Rexperiments/lung_30_female_genes_msr_table.Rda"
rna_file <- "../../../MethylationCode/MethylationData/rna-seq/ENCFF947WLV_lung_30_gene_quantifications.tsv"
filter_gene_type <- c("protein_coding")
#filter_gene_type <- NA
response_variable <- "log_pme_tpm"
#response_variable <- "log_tpm"
epsilon <- 1e-3
train_prop <- 0.6
lasso_lambda <- 0.1
library("PerformanceAnalytics")
library("MASS")
library(ggplot2)
library(ggExtra)
source("../../../Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
basic_predictors <- c("log_nucleotides", "CG_density", "log_CG_count", "meth_rate")
basic_predictors_with_autoc <- c(basic_predictors, "meth_autocorrelation", "drift")
expression_measures <- c("TPM", "pme_TPM")
msr_features <- c("CGsites_msr", "meth_msr", "unmeth_msr", "CG_list_msr", "CG_list_inverted_msr")
all_predictors <- c(basic_predictors_with_autoc, msr_features)
genes_meth_table = readRDS(meth_data_file)
genes_meth_table$gene_id <- remove_version_from_gene(genes_meth_table$gene_id)
rna <- read_rna_file(rna_file, reduced = F, correct_gene_id = T);
data_table <- as.data.frame(merge(genes_meth_table, rna))
cat("TPM fraction: ", sum(data_table$TPM)/1e6, "\n")
##### filter genes type
if(!is.na(filter_gene_type))
{
data_table <- data_table[data_table$gene_type %in% filter_gene_type, ]
cat(paste(filter_gene_type, "TPM fraction: "), sum(data_table$TPM)/1e6)
}
##### add log(tpm)
data_table$log_tpm <- log(data_table$TPM + epsilon)
data_table$log_pme_tpm <- log(data_table$pme_TPM + epsilon)
#data_table$noisy_log_tpm <-
#data_table$noisy_log_pme_tpm <-
#### log transformation
data_table$log_nucleotides <- log(data_table$nucleotides, 10)
data_table$log_CG_count<- log(data_table$CG_count, 10)
data_table$drift <- log(data_table$drift, 10)
#data_table$CG_density<- log(data_table$CG_density, 10)
rows <- sample(1:length(data_table$chr), size = 3e3)
chart.Correlation(data_table[rows,c(basic_predictors_with_autoc, response_variable)], method = "pearson")
chart.Correlation(data_table[rows,c(msr_features, response_variable)])
ggscatter <- function(data_table, xn, response_variable, alpha = 0.1)
{
df <- data_table[, c(xn, response_variable)]
colnames(df) <- c("x","y")
((ggplot(df,aes(x=x,y=y)) + geom_point(alpha = alpha))) + ylab(response_variable) + xlab(xn)
}
ggscatter(data_table[rows, ], "meth_autocorrelation", response_variable)
ggscatter(data_table[rows, ], "CG_list_inverted_msr", response_variable)
ggscatter(data_table[rows, ], "meth_rate", response_variable)
ggscatter(data_table[rows, ], "drift", response_variable)
# #### save NA
#     fragile_features <- c(msr_features)
#     data_table$valid_msr_measures <- (complete.cases(data_table[,fragile_features]))
#     data_table[!data_table$valid_msr_measures, fragile_features] <- -1e3
#     msr_features <- c(msr_features, "valid_msr_measures")
#     all_predictors <- c(basic_predictors_with_autoc, msr_features)
#     data_table$valid_msr_measures <- as.factor(data_table$valid_msr_measures)
# DATASET
model_data = data_table[complete.cases(data_table[,c(all_predictors,expression_measures)]),]
cat("missing data: ", (1-(length(model_data[,1])/length(data_table[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = model_data[train_rows,]
test_model_data = model_data[test_rows,]
# DATASET
model_data_basic = data_table[complete.cases(data_table[,c(basic_predictors_with_autoc,expression_measures)]),]
cat("\n\nbasic missing data: ", (1-(length(model_data_basic[,1])/length(model_data_basic[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
basic_train_model_data = model_data_basic[train_rows,]
basic_test_model_data = model_data_basic[test_rows,]
check_model <- function(train_model_data, test_model_data, response_variable, predictors, summary = T)
{
formula <- as.formula(paste(response_variable, "~ ."))
model = lm(formula, data = train_model_data[, c(response_variable, predictors)])
if(summary)
print(summary(model))
cat("Test data R squared: ", tmse(model, test_model_data, response_variable))
#1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
}
check_model(train_model_data, test_model_data, response_variable, basic_predictors)
cat("\n\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors, summary = F)
check_model(train_model_data, test_model_data, response_variable, basic_predictors_with_autoc)
cat("\n\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors_with_autoc, summary = F)
knitr::opts_chunk$set(echo = TRUE)
meth_data_file <- "../../../Rexperiments/lung_30_female_genes_msr_table.Rda"
rna_file <- "../../../MethylationCode/MethylationData/rna-seq/ENCFF947WLV_lung_30_gene_quantifications.tsv"
filter_gene_type <- c("protein_coding")
#filter_gene_type <- NA
response_variable <- "log_pme_tpm"
#response_variable <- "log_tpm"
epsilon <- 1e-3
train_prop <- 0.6
lasso_lambda <- 0.1
library("PerformanceAnalytics")
library("MASS")
library(ggplot2)
library(ggExtra)
source("../../../Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
basic_predictors <- c("log_nucleotides", "CG_density", "log_CG_count", "meth_rate")
basic_predictors_with_autoc <- c(basic_predictors, "meth_autocorrelation", "drift")
expression_measures <- c("TPM", "pme_TPM")
msr_features <- c("CGsites_msr", "meth_msr", "unmeth_msr", "CG_list_msr", "CG_list_inverted_msr")
all_predictors <- c(basic_predictors_with_autoc, msr_features)
genes_meth_table = readRDS(meth_data_file)
genes_meth_table$gene_id <- remove_version_from_gene(genes_meth_table$gene_id)
rna <- read_rna_file(rna_file, reduced = F, correct_gene_id = T);
data_table <- as.data.frame(merge(genes_meth_table, rna))
cat("TPM fraction: ", sum(data_table$TPM)/1e6, "\n")
##### filter genes type
if(!is.na(filter_gene_type))
{
data_table <- data_table[data_table$gene_type %in% filter_gene_type, ]
cat(paste(filter_gene_type, "TPM fraction: "), sum(data_table$TPM)/1e6)
}
##### add log(tpm)
data_table$log_tpm <- log(data_table$TPM + epsilon)
data_table$log_pme_tpm <- log(data_table$pme_TPM + epsilon)
#data_table$noisy_log_tpm <-
#data_table$noisy_log_pme_tpm <-
#### log transformation
data_table$log_nucleotides <- log(data_table$nucleotides, 10)
data_table$log_CG_count<- log(data_table$CG_count, 10)
data_table$drift <- log(data_table$drift+1e-8, 10)
#data_table$CG_density<- log(data_table$CG_density, 10)
rows <- sample(1:length(data_table$chr), size = 3e3)
chart.Correlation(data_table[rows,c(basic_predictors_with_autoc, response_variable)], method = "pearson")
chart.Correlation(data_table[rows,c(msr_features, response_variable)])
ggscatter <- function(data_table, xn, response_variable, alpha = 0.1)
{
df <- data_table[, c(xn, response_variable)]
colnames(df) <- c("x","y")
((ggplot(df,aes(x=x,y=y)) + geom_point(alpha = alpha))) + ylab(response_variable) + xlab(xn)
}
ggscatter(data_table[rows, ], "meth_autocorrelation", response_variable)
ggscatter(data_table[rows, ], "CG_list_inverted_msr", response_variable)
ggscatter(data_table[rows, ], "meth_rate", response_variable)
ggscatter(data_table[rows, ], "drift", response_variable)
# #### save NA
#     fragile_features <- c(msr_features)
#     data_table$valid_msr_measures <- (complete.cases(data_table[,fragile_features]))
#     data_table[!data_table$valid_msr_measures, fragile_features] <- -1e3
#     msr_features <- c(msr_features, "valid_msr_measures")
#     all_predictors <- c(basic_predictors_with_autoc, msr_features)
#     data_table$valid_msr_measures <- as.factor(data_table$valid_msr_measures)
# DATASET
model_data = data_table[complete.cases(data_table[,c(all_predictors,expression_measures)]),]
cat("missing data: ", (1-(length(model_data[,1])/length(data_table[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = model_data[train_rows,]
test_model_data = model_data[test_rows,]
# DATASET
model_data_basic = data_table[complete.cases(data_table[,c(basic_predictors_with_autoc,expression_measures)]),]
cat("\n\nbasic missing data: ", (1-(length(model_data_basic[,1])/length(model_data_basic[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
basic_train_model_data = model_data_basic[train_rows,]
basic_test_model_data = model_data_basic[test_rows,]
check_model <- function(train_model_data, test_model_data, response_variable, predictors, summary = T)
{
formula <- as.formula(paste(response_variable, "~ ."))
model = lm(formula, data = train_model_data[, c(response_variable, predictors)])
if(summary)
print(summary(model))
cat("Test data R squared: ", tmse(model, test_model_data, response_variable))
#1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
}
check_model(train_model_data, test_model_data, response_variable, basic_predictors)
cat("\n\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors, summary = F)
check_model(train_model_data, test_model_data, response_variable, basic_predictors_with_autoc)
cat("\n\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors_with_autoc, summary = F)
check_model(train_model_data, test_model_data, response_variable, all_predictors)
check_model(train_model_data, test_model_data, response_variable, c("meth_autocorrelation", "drift","nucleotides"))
model <- lasso(response_variable, df = train_model_data[,c(response_variable, all_predictors)], lambda = lasso_lambda)
cat("lambda:", model$lambda, "\n")
print(model$beta)
cat("\nTest data R squared: ", tmse.glmnet(model, test_model_data, response_variable, all_predictors ))
#library(randomForest)
# model <- randomForest(model_this(response_variable), train_model_data[,c(response_variable, all_predictors)], importance = T)
knitr::opts_chunk$set(echo = TRUE)
meth_data_file <- "../../../Rexperiments/lung_30_female_genes_msr_table.Rda"
rna_file <- "../../../MethylationCode/MethylationData/rna-seq/ENCFF947WLV_lung_30_gene_quantifications.tsv"
filter_gene_type <- c("protein_coding")
#filter_gene_type <- NA
response_variable <- "log_pme_tpm"
#response_variable <- "log_tpm"
epsilon <- 1e-3
train_prop <- 0.6
lasso_lambda <- 0.1
library("PerformanceAnalytics")
library("MASS")
library(ggplot2)
library(ggExtra)
source("../../../Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
basic_predictors <- c("log_nucleotides", "CG_density", "log_CG_count", "meth_rate")
basic_predictors_with_autoc <- c(basic_predictors, "meth_autocorrelation", "drift")
expression_measures <- c("TPM", "pme_TPM")
msr_features <- c("CGsites_msr", "meth_msr", "unmeth_msr", "CG_list_msr", "CG_list_inverted_msr")
all_predictors <- c(basic_predictors_with_autoc, msr_features)
genes_meth_table = readRDS(meth_data_file)
genes_meth_table$gene_id <- remove_version_from_gene(genes_meth_table$gene_id)
rna <- read_rna_file(rna_file, reduced = F, correct_gene_id = T);
data_table <- as.data.frame(merge(genes_meth_table, rna))
cat("TPM fraction: ", sum(data_table$TPM)/1e6, "\n")
##### filter genes type
if(!is.na(filter_gene_type))
{
data_table <- data_table[data_table$gene_type %in% filter_gene_type, ]
cat(paste(filter_gene_type, "TPM fraction: "), sum(data_table$TPM)/1e6)
}
##### add log(tpm)
data_table$log_tpm <- log(data_table$TPM + epsilon)
data_table$log_pme_tpm <- log(data_table$pme_TPM + epsilon)
#data_table$noisy_log_tpm <-
#data_table$noisy_log_pme_tpm <-
#### log transformation
data_table$log_nucleotides <- log(data_table$nucleotides, 10)
data_table$log_CG_count<- log(data_table$CG_count, 10)
#data_table$CG_density<- log(data_table$CG_density, 10)
rows <- sample(1:length(data_table$chr), size = 3e3)
chart.Correlation(data_table[rows,c(basic_predictors_with_autoc, response_variable)], method = "pearson")
chart.Correlation(data_table[rows,c(msr_features, response_variable)])
ggscatter <- function(data_table, xn, response_variable, alpha = 0.1)
{
df <- data_table[, c(xn, response_variable)]
colnames(df) <- c("x","y")
((ggplot(df,aes(x=x,y=y)) + geom_point(alpha = alpha))) + ylab(response_variable) + xlab(xn)
}
ggscatter(data_table[rows, ], "meth_autocorrelation", response_variable)
ggscatter(data_table[rows, ], "CG_list_inverted_msr", response_variable)
ggscatter(data_table[rows, ], "meth_rate", response_variable)
ggscatter(data_table[rows, ], "drift", response_variable)
# #### save NA
#     fragile_features <- c(msr_features)
#     data_table$valid_msr_measures <- (complete.cases(data_table[,fragile_features]))
#     data_table[!data_table$valid_msr_measures, fragile_features] <- -1e3
#     msr_features <- c(msr_features, "valid_msr_measures")
#     all_predictors <- c(basic_predictors_with_autoc, msr_features)
#     data_table$valid_msr_measures <- as.factor(data_table$valid_msr_measures)
# DATASET
model_data = data_table[complete.cases(data_table[,c(all_predictors,expression_measures)]),]
cat("missing data: ", (1-(length(model_data[,1])/length(data_table[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = model_data[train_rows,]
test_model_data = model_data[test_rows,]
# DATASET
model_data_basic = data_table[complete.cases(data_table[,c(basic_predictors_with_autoc,expression_measures)]),]
cat("\n\nbasic missing data: ", (1-(length(model_data_basic[,1])/length(model_data_basic[,1])))*100, "%")
# UNDERSAMPLING
cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
basic_train_model_data = model_data_basic[train_rows,]
basic_test_model_data = model_data_basic[test_rows,]
check_model <- function(train_model_data, test_model_data, response_variable, predictors, summary = T)
{
formula <- as.formula(paste(response_variable, "~ ."))
model = lm(formula, data = train_model_data[, c(response_variable, predictors)])
if(summary)
print(summary(model))
cat("Test data R squared: ", tmse(model, test_model_data, response_variable))
#1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
}
check_model(train_model_data, test_model_data, response_variable, basic_predictors)
cat("\n\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors, summary = F)
check_model(train_model_data, test_model_data, response_variable, basic_predictors_with_autoc)
cat("\n\nkeeping also data with NA msr features:\n")
check_model(basic_train_model_data, basic_test_model_data, response_variable, basic_predictors_with_autoc, summary = F)
check_model(train_model_data, test_model_data, response_variable, all_predictors)
check_model(train_model_data, test_model_data, response_variable, c("meth_autocorrelation", "drift","nucleotides"))
model <- lasso(response_variable, df = train_model_data[,c(response_variable, all_predictors)], lambda = lasso_lambda)
cat("lambda:", model$lambda, "\n")
print(model$beta)
cat("\nTest data R squared: ", tmse.glmnet(model, test_model_data, response_variable, all_predictors ))
#library(randomForest)
# model <- randomForest(model_this(response_variable), train_model_data[,c(response_variable, all_predictors)], importance = T)
short_name <- "lung_30_female"
wgbs_file  <- "../../MethylationCode/MethylationData/wgbs/ENCFF039JFT_lung_30_female.rda"
genebody_annotation_file <- "../../Rexperiments/detailed_genebody_improved.Rda"
produce_and_save_genes_msr_table(wgbs_file, short_name, genebody_annotation_file, gene_type_filter = NA, na_tolerance = 0.3, no_msr = F, dir = "../../Rexperiments/")
produce_and_save_fragments_msr_table <- function(wgbs_file, short_name, size, msr_ecdf_file, na_tolerance = 0.4, minimum_reads=1, methylation_assigner = standard_binaryzer, bed = NA, dir = "../../Rexperiments/")
{
msr_ecdf_ref <- readRDS(msr_ecdf_file)
# convert bed file into RDA
if(!is.na(bed))
rda_convert(wgbs_file, bed)
# read rda file
wgbs <- sum_strands(readRDS(new_name)); gc()
# produce msr table
rr_table <- total_spatial_experiment(c(new_name), c(size), c(F,T), c(short_name), methylation_assigner, na_tolerance, F, minimum_reads)
start = rr_table[[1]][[1]]$data$fragments_infos_array[,1]
msr_density = rr_table[[1]][[1]]$data$fragments_infos_array[,2]
true_density = sapply(start, function(x){mean(wgbs$prop[x:(x+size)], na.rm = T)})/100
msr = rr_table[[1]][[1]]$data$fragments_infos_array[,3]
inverted_msr = rr_table[[2]][[1]]$data$fragments_infos_array[,3]
inverted_msr[is.na(inverted_msr)] <- msr[is.na(inverted_msr)]
msr[is.na(msr)] <- inverted_msr[is.na(msr)]
sig <- significance_measure(msr, msr_density, msr_ecdf_ref, inverted = F)
inverted_sig <- significance_measure(inverted_msr, msr_density, msr_ecdf_ref, inverted = T)
median_function <- extract_ecdf_function(msr_ecdf_ref, 0.5)
residual <- msr-median_function(msr_density)
inverted_residual <- inverted_msr-median_function(1-msr_density)
meth_autocorrelation <- sapply(start, function(x){autocorrelation(wgbs$prop[x:(x+size)])})
mean_drift <- sapply(start, function(x){drift(wgbs$prop[x:(x+size)])})
# save msr tables
msr_table = data.frame(start,msr_density,true_density,msr,inverted_msr, sig, inverted_sig, residual, inverted_residual, meth_autocorrelation, drift = mean_drift)
saveRDS(msr_table, file = paste("../../Rexperiments/",short_name, "_msr_table_", size, ".Rda", sep = ""))
}
wgbs_file <- "../../MethylationCode/MethylationData/wgbs/"
new_name  <- "../../MethylationCode/MethylationData/wgbs/ENCFF752NXS_GM23248.rda" # could automate
short_name <- "GM23248"
msr_ecdf_file <- "../../MethylationCode/MethylationData/msr_ecdf_1e3.Rda"
size <- 1e3
produce_and_save_fragments_msr_table(wgbs_file, short_name, size, msr_ecdf_file, na_tolerance = 0.4, minimum_reads=1, methylation_assigner = standard_binaryzer, bed = NA, dir = "../../Rexperiments/")
gc()
is.character(wgbs_file)
gbs
wgbs
is.character(wgbs)
