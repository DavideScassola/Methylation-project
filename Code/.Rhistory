if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
valids <- (fragments_infos_array[,2]>0)
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list[valids]))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
a$rr_list
compare_resolution_relevance_plot(a$rr_list)
compare_resolution_relevance_plot(a$rr_list[1:3])
compare_resolution_relevance_plot(a$rr_list[1:1])
compare_resolution_relevance_plot(a$rr_list[1:4])
compare_resolution_relevance_plot(a$rr_list[1])
compare_resolution_relevance_plot(a$rr_list[[1]])
compare_resolution_relevance_plot(List(a$rr_list[[1]], a$rr_list[[2]]))
a$rr_list[[1]]
a$rr_list[[2]]
compare_resolution_relevance_plot(List(a$rr_list[[2]]))
a$rr_list
a$rr_list[1:12]
compare_resolution_relevance_plot(a$rr_list[[2:4]])
compare_resolution_relevance_plot(a$rr_list[2:4])
compare_resolution_relevance_plot(a$rr_list[2:])
compare_resolution_relevance_plot(a$rr_list[2:55])
a$fragments_infos_array
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
valids <- (!is.na(fragments_infos_array[,3]))
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list[valids]))
}
a$fragments_infos_array
compare_resolution_relevance_plot(a$rr_list)
a$rr_list[[ยน]]
a$rr_list[[1]]
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
valids <- (!is.na(fragments_infos_array[,3]))
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list[valids]))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
a$rr_list[[1]]
compare_resolution_relevance_plot(a$rr_list)
a = spatial_MSR_experiment_by_chromosome(subpos, 1e5, F, 30)
compare_resolution_relevance_plot(a$rr_list)
a$fragments_infos_array
a = spatial_MSR_experiment_by_chromosome(pos, 1e7, F, 100)
a$fragments_infos_array
compare_resolution_relevance_plot(a$rr_list)
a = spatial_MSR_experiment_by_chromosome(pos, 1e7, F, 30)
compare_resolution_relevance_plot(a$rr_list)
a$fragments_infos_array
gc()
a = spatial_MSR_experiment_by_chromosome(pos, 1e6, F, 100)
a$fragments_infos_array
compare_resolution_relevance_plot(a$rr_list)
compare_resolution_relevance_plot(a$rr_list[1:10])
compare_resolution_relevance_plot(a$rr_list[10:20])
compare_resolution_relevance_plot(a$rr_list[20:50])
compare_resolution_relevance_plot(a$rr_list[50:90])
compare_resolution_relevance_plot(a$rr_list[90:150])
compare_resolution_relevance_plot(a$rr_list[90:120])
compare_resolution_relevance_plot(a$rr_list[120:150])
compare_resolution_relevance_plot(a$rr_list[120:140])
compare_resolution_relevance_plot(a$rr_list[125:140])
compare_resolution_relevance_plot(a$rr_list[120:130])
compare_resolution_relevance_plot(a$rr_list[120:135])
compare_resolution_relevance_plot(a$rr_list[120:130])
a$fragments_infos_array
compare_resolution_relevance_plot(a$rr_list[120:130])
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
valids <- (!is.na(fragments_infos_array[,3]))
get_valid_rrs <- function() {return(rr_fragments_list[valids])}
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list, get_valid_rrs=get_valid_rrs))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e6, F, 100)
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 100)
a$get_valid_rrs()
compare_resolution_relevance_plot(a$get_valid_rrs())
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 10)
compare_resolution_relevance_plot(a$get_valid_rrs())
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 1)
compare_resolution_relevance_plot(a$get_valid_rrs())
compare_resolution_relevance_plot(a$get_valid_rrs()[1:10])
#################################################################################################
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
#################################################################
files = c(file_h1, file_stomach)
files = c(file_h1)
names = c("H1","stomach")
names = c("H1")
sizes = c(1e4, 1e5, 1e6, 1e7)
sizes = c(1e4, 1e5)
chromosome = "chr22"
gc()
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 100)
)
total_exp_chr1$H1
total_exp_chr1$H1[1]
total_exp_chr1$H1[[1]]$name
total_exp_chr1$H1[[1]]$window_size
total_exp_chr1$H1[[1]]$data
total_exp_chr1$H1[[1]]$data$fragments_infos_array
total_exp_chr1$H1[[2]]$data$fragments_infos_array
gc()
remove(data_h1)
gc()
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=T, minimum_bin_size = 100)
)
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(l, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
valids <- (!is.na(fragments_infos_array[,3]))
get_valid_rrs <- function() {return(rr_fragments_list[valids])}
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list, get_valid_rrs=get_valid_rrs))
}
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=T, minimum_bin_size = 100)
)
sort(c(2,9,3))
bernoulli_positions <- function(max, prop)
{
sort(round(runif(min = 1, max=max, n = prop*(max-1))))
}
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=T, minimum_bin_size = 100)
)
bernoulli_positions <- function(max, prop)
{
unique(sort(round(runif(min = 1, max=max, n = prop*(max-1)))))
}
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=T, minimum_bin_size = 100)
)
a$fragments_infos_array
total_exp_chr1
total_exp_chr1$H1[[1]]$data$fragments_infos_array
compare_resolution_relevance_plot(total_exp_chr1$H1[[1]]$data$get_valid_rrs())
compare_resolution_relevance_plot(total_exp_chr1$H1[[2]]$data$get_valid_rrs())
compare_resolution_relevance_plot(total_exp_chr1$H1[[3]]$data$get_valid_rrs())
total_exp_chr1$H1[[1]]
total_exp_chr1$H1[[1]]$data
total_exp_chr1$H1[[1]]$data$fragments_infos_array
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 100)
)
system.time(
total_exp_chr1_fake <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=T, minimum_bin_size = 100)
)
total_exp_chr1$H1[[1]]$data$fragments_infos_array[,2]
total_exp_chr1_fake$H1[[1]]$data$fragments_infos_array[,2]
hist(total_exp_chr1_fake$H1[[1]]$data$fragments_infos_array[,2])
hist(total_exp_chr1$H1[[1]]$data$fragments_infos_array[,2])
mean(total_exp_chr1$H1[[1]]$data$fragments_infos_array[,2])
mean(total_exp_chr1_fake$H1[[1]]$data$fragments_infos_array[,2])
plot(total_exp_chr1$H1[[1]]$data$fragments_infos_array[,2])
lines(total_exp_chr1_fake$H1[[1]]$data$fragments_infos_array[,2], col=2)
plot(total_exp_chr1$H1[[1]]$data$fragments_infos_array[,2], pch = "+")
lines(total_exp_chr1_fake$H1[[1]]$data$fragments_infos_array[,2], col=2)
plot(total_exp_chr1$H1[[2]]$data$fragments_infos_array[,2], pch = "+")
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2], col=2)
plot(total_exp_chr1$H1[[3]]$data$fragments_infos_array[,2], pch = "+")
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
print("estimated prop:", prop)
pos  <- bernoulli_positions(l, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
valids <- (!is.na(fragments_infos_array[,3]))
get_valid_rrs <- function() {return(rr_fragments_list[valids])}
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list, get_valid_rrs=get_valid_rrs))
}
mean(total_exp_chr1_fake$H1[[1]]$data$fragments_infos_array[,2])
mean(total_exp_chr1$H1[[1]]$data$fragments_infos_array[100:,2])
mean(total_exp_chr1$H1[[1]]$data$fragments_infos_array[100:400,2])
mean(total_exp_chr1$H1[[1]]$data$fragments_infos_array[,2])
mean(total_exp_chr1$H1[[1]]$data$fragments_infos_array[200:220,2])
mean(total_exp_chr1$H1[[1]]$data$fragments_infos_array[(200:220),2])
total_exp_chr1$H1[[1]]$data$fragments_infos_array[(200:220),2]
mean(total_exp_chr1$H1[[2]]$data$fragments_infos_array[(100:400),2])
mean(total_exp_chr1$H1[[2]]$data$fragments_infos_array[(150:400),2])
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(l, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
valids <- (!is.na(fragments_infos_array[,3]))
get_valid_rrs <- function() {return(rr_fragments_list[valids])}
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list, get_valid_rrs=get_valid_rrs))
}
#################################################################
files = c(file_h1, file_stomach)
files = c(file_h1)
names = c("H1","stomach")
names = c("H1")
sizes = c(1e4, 1e5, 1e6, 1e7)
sizes = c(1e4, 1e5)
chromosome = "chr22"
system.time(
total_exp_chr1_fake <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=T, minimum_bin_size = 100)
)
plot(total_exp_chr1$H1[[2]]$data$fragments_infos_array[,2], pch = "+")
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2], col=2)
plot(total_exp_chr1$H1[[2]]$data$fragments_infos_array[,3], pch = "+")
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,3], col=2)
plot(total_exp_chr1$H1[[2]]$data$fragments_infos_array[,3], pch = "+", xlim = c(0.22, 0.3))
plot(total_exp_chr1$H1[[2]]$data$fragments_infos_array[,3], pch = "+", ylim = c(0.22, 0.3))
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,3], col=2)
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2], col=3)
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2]*100, col=3)
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2]*10, col=3)
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2]*1000, col=3)
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2]*10000, col=3)
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2]*50, col=3)
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2]*30, col=3)
lines(total_exp_chr1_fake$H1[[2]]$data$fragments_infos_array[,2]*20, col=3)
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size, cores = 1)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(l, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = mclapply(1:fragments, mc.cores = cores, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
valids <- (!is.na(fragments_infos_array[,3]))
get_valid_rrs <- function() {return(rr_fragments_list[valids])}
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list, get_valid_rrs=get_valid_rrs))
}
total_spatial_experiment <- function(files, sizes, inversion, names, methylation_assigner, na_tolerance, fake_data)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
binary <- get_methylation_CpG_binary_vector(data,strands_handler = sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = keep_nas)
remove(data)
gc()
for(inv in inversion)
{
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_CpG_list(binary, inv, s, fake_data, na_tolerance)
return(List(name=names[i], inverted=inv, window_size=s, data=rrs))
})
result[[paste(names[i], "inverted:", inv, sep = "_")]] <- result_si
}
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20, cores = 1)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size, cores = cores)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20, cores = 1)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size, cores = cores)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 500)
)
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 500, cores = 3)
)
