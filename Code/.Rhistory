setwd(dir = "../../../")
rna_data <- lapply(rna_files, read_rna_file)
rna_data <- lapply(rna_data, function(x) {x[x$gene_id %in% genebody$id]})
rna_data <- lapply(rna_data, function(x) {x[!duplicated(x$gene_id), ]})
g = rna_data[[1]]$gene_id
for(x in rna_data)
{
g = intersect(g, x$gene_id)
}
rna_data <- lapply(rna_data, function(x) {x[x$gene_id %in% g,TPM]})
#rna_data <- lapply(rna_data, function(x) {x$TPM})
rna_data <- data.frame(rna_data)
colnames(rna_data) <- names
rna_data <- log(rna_data+1e-3)
gc()
#########################
corrplot(cor(na.omit(rna_data)),  method = "number")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
genebody = readRDS("Rexperiments/genebody_improved.Rda")
##########################
y <- c("gene_count", "log_tpm")
basic_predictors <- c("nucleotides", "CpG_density", "meth rate", "msr_density")
essentials <- c(y, basic_predictors)
essential_msr_predictors <- c("msr", "inverted_msr")
fancy_msr_predictors <- c("ecdf", "inverted ecdf", "residual", "inverted_residual")
msr_predictors <- c(essential_msr_predictors, fancy_msr_predictors)
setwd(dir = "../../../")
rna <- read_rna_file("MethylationCode/MethylationData/rna-seq/ENCFF860DPP_left_ventricle_male_34.tsv")
msr_fragments_table = readRDS("Rexperiments/ENCFF536RSX_left_ventricle_msr_table_1000.Rda")
#rna_fragment_table = readRDS("Rexperiments/ENCFF536RSX_left_ventricle_rna_table_1000.Rda")
rna_fragment_table = readRDS("Rexperiments/ENCFF536RSX_left_ventricle_rna_table_1000_extended.Rda")
#########################
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
data_table
sum(data_table$gene_count==0)
sum(data_table$gene_count==0, na.rm=T)
data_table$gene_count
data_table
sum(is.na(data_table$gene_count), na.rm=T)
data_table[(is.na(data_table$gene_count), na.rm=T)]
data_table[(is.na(data_table$gene_count)]
data_table[is.na(data_table$gene_count)]
data_table[is.na(data_table$gene_count),]
chart.Correlation(data_table[,essentials])
#mi.plot(data_table[,c(essentials, essential_msr_predictors)])
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$inverted_msr, breaks = 40, col = cols[1], probability = F, xlab = "inverted msr", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$inverted_msr, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
threshold = 1
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$inverted_msr, breaks = 40, col = cols[1], probability = F, xlab = "inverted msr", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$inverted_msr, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$inverted_msr, breaks = 40, col = cols[1], probability = F, xlab = "inverted msr", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$inverted_msr, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$inverted_msr, breaks = 40, col = cols[1], probability = T, xlab = "inverted msr", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$inverted_msr, breaks = 40, col = cols[2], add = T, probability = T)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$msr_density, breaks = 40, col = cols[1], probability = T, xlab = "discretized meth rate", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$msr_density, breaks = 40, col = cols[2], add = T, probability = T)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$msr_density, breaks = 40, col = cols[1], probability = F, xlab = "discretized meth rate", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$msr_density, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$inverted_msr, breaks = 40, col = cols[1], probability = F, xlab = "inverted msr", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$inverted_msr, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
# DATASET
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
cat("missing data: ", (1-(length(model_data[,1])/length(data_table[,1])))*100, "%")
# UNDERSAMPLING
train_prop = 0.2; cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = model_data[train_rows,]
test_model_data = model_data[test_rows,]
mean(train_model_data$total_TPM>threshold, na.rm=T)
# Logistics Regression
glm.fit <- glm(train_model_data$total_TPM>threshold ~ nucleotides+CpG_density+`meth rate`+ msr_density , data = train_model_data, family = binomial)
#summary(glm.fit)
cat("TRAIN DATA ")
nd <- train_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2], "\n\n")
cat("TEST DATA ")
nd <- test_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
glm.fit <- glm(train_model_data$total_TPM>threshold ~ inverted_msr , data = train_model_data, family = binomial)
#summary(glm.fit)
cat("TRAIN DATA")
nd <- train_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2], "\n\n")
cat("TEST DATA")
nd <- test_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
glm.fit <- glm(train_model_data$total_TPM>threshold ~ . , data = train_model_data[, c(basic_predictors, msr_predictors)], family = binomial)
#summary(glm.fit)
cat("TRAIN DATA")
nd <- train_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2], "\n\n")
cat("TEST DATA")
nd <- test_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
hist(log(model_data[model_data$gene_count>0, ]$total_TPM+1e-3, base = 10), xlab = "log(TPM + 1e-3)", main = "", breaks = 50)
standard_predictors = c(essentials, "genes_nucleotides_count")
model = lm(log_tpm ~ . , data = train_model_data[, standard_predictors])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ . , data = train_model_data[, c(standard_predictors, msr_predictors)])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c(standard_predictors, "inverted_msr")])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c("log_tpm", basic_predictors)])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c("log_tpm", basic_predictors, msr_predictors)])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c("log_tpm", basic_predictors, "inverted_msr")])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
noise = rnorm(length(log_tpm), sd = 0.5)
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
noise = rnorm(length(data_table$log_tpm), sd = 0.5)
noise[data_table$total_TPM==0]<-0
((ggplot(data_table,aes(x=inverted_msr,y=log_tpm+noise)) + geom_point(alpha = 0.03))) + ylab("log (TPM)")
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
noise = rnorm(length(data_table$log_tpm), sd = 0.5)
noise[data_table$total_TPM!=0]<-0
((ggplot(data_table,aes(x=inverted_msr,y=log_tpm+noise)) + geom_point(alpha = 0.03))) + ylab("log (TPM)")
rchisq(length(data_table$log_tpm)))
rchisq(length(data_table$log_tpm))
rchisq(length(data_table$log_tpm), df = 1)
rchisq(length(data_table$log_tpm), df = 1)/10
hist(rchisq(length(data_table$log_tpm), df = 1)/10)
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
data_table$log_tpm <- log(data_table$total_TPM + runif(length(data_table$log_tpm), min = 1e-4, max = 1e-2))
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
chart.Correlation(data_table[,essentials])
chart.Correlation(data_table[,c(essentials, essential_msr_predictors)])
chart.Correlation(data_table[,c(y, fancy_msr_predictors)])
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
#noise = rnorm(length(data_table$log_tpm), sd = 0.5)
noise[data_table$total_TPM!=0]<-0
noise = 0
((ggplot(data_table,aes(x=inverted_msr,y=log_tpm+noise)) + geom_point(alpha = 0.03))) + ylab("log (TPM)")
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
data_table$log_tpm <- log(data_table$total_TPM + runif(length(data_table$log_tpm), min = 0, max = 1e-2))
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
#noise = rnorm(length(data_table$log_tpm), sd = 0.5)
noise[data_table$total_TPM!=0]<-0
noise = 0
((ggplot(data_table,aes(x=inverted_msr,y=log_tpm+noise)) + geom_point(alpha = 0.03))) + ylab("log (TPM)")
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
data_table$log_tpm <- log(data_table$total_TPM + runif(length(data_table$log_tpm), min = 0, max = 1e-3))
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
#noise = rnorm(length(data_table$log_tpm), sd = 0.5)
noise[data_table$total_TPM!=0]<-0
noise = 0
((ggplot(data_table,aes(x=inverted_msr,y=log_tpm+noise)) + geom_point(alpha = 0.03))) + ylab("log (TPM)")
hist(rexp(length(data_table$log_tpm), rate = 10))
hist(rexp(length(data_table$log_tpm), rate = 100))
hist(rexp(length(data_table$log_tpm), rate = 500))
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
data_table$log_tpm <- log(data_table$total_TPM + rexp(length(data_table$log_tpm), rate = 1e-3))
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
#noise = rnorm(length(data_table$log_tpm), sd = 0.5)
noise[data_table$total_TPM!=0]<-0
noise = 0
((ggplot(data_table,aes(x=inverted_msr,y=log_tpm+noise)) + geom_point(alpha = 0.03))) + ylab("log (TPM)")
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
data_table$log_tpm <- log(data_table$total_TPM + rexp(length(data_table$log_tpm), rate = 1e3))
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
#noise = rnorm(length(data_table$log_tpm), sd = 0.5)
#noise[data_table$total_TPM!=0]<-0
noise = 0
((ggplot(data_table,aes(x=inverted_msr,y=log_tpm+noise)) + geom_point(alpha = 0.03))) + ylab("log (TPM)")
chart.Correlation(data_table[,c(y, fancy_msr_predictors)])
((ggplot(data_table,aes(x=residual,y=log_tpm+rnorm(length(log_tpm), sd = 0.5))) + geom_point(alpha = 0.03)))+ ylab("log (TPM)")
chart.Correlation(data_table[,c(essentials, essential_msr_predictors)])
chart.Correlation(data_table[,essentials])
((ggplot(data_table,aes(x=residual,y=log_tpm+rnorm(length(log_tpm), sd = 0.5))) + geom_point(alpha = 0.03)))+ ylab("log (TPM)")
((ggplot(data_table,aes(x=msr_density,y=log_tpm+rnorm(length(log_tpm), sd = 0.5))) + geom_point(alpha = 0.03)))+ ylab("log (TPM)")
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$inverted_msr, breaks = 40, col = cols[1], probability = F, xlab = "inverted msr", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$inverted_msr, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$msr_density, breaks = 40, col = cols[1], probability = F, xlab = "discretized meth rate", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$msr_density, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
# DATASET
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
cat("missing data: ", (1-(length(model_data[,1])/length(data_table[,1])))*100, "%")
# UNDERSAMPLING
train_prop = 0.2; cat("\ntrain_data_proportion: ", train_prop)
random = T
l = length(model_data[,1])
train_length = train_prop*l
if(random)
{
train_rows = sample(1:l, size = train_length, replace = F)
} else train_rows = 1:train_length
test_rows = (1:l)[-train_rows]
train_model_data = model_data[train_rows,]
test_model_data = model_data[test_rows,]
mean(train_model_data$total_TPM>threshold, na.rm=T)
# Logistics Regression
glm.fit <- glm(train_model_data$total_TPM>threshold ~ nucleotides+CpG_density+`meth rate`+ msr_density , data = train_model_data, family = binomial)
#summary(glm.fit)
cat("TRAIN DATA ")
nd <- train_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2], "\n\n")
cat("TEST DATA ")
nd <- test_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
glm.fit <- glm(train_model_data$total_TPM>threshold ~ inverted_msr , data = train_model_data, family = binomial)
#summary(glm.fit)
cat("TRAIN DATA")
nd <- train_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2], "\n\n")
cat("TEST DATA")
nd <- test_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
glm.fit <- glm(train_model_data$total_TPM>threshold ~ . , data = train_model_data[, c(basic_predictors, msr_predictors)], family = binomial)
#summary(glm.fit)
cat("TRAIN DATA")
nd <- train_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2], "\n\n")
cat("TEST DATA")
nd <- test_model_data
probabilities = predict(glm.fit, newdata = nd, type="response")
prediction = probabilities>0.5
actual = nd$total_TPM>threshold
t = table(actual, prediction)
#prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
hist(log(model_data[model_data$gene_count>0, ]$total_TPM+1e-3, base = 10), xlab = "log(TPM + 1e-3)", main = "", breaks = 50)
standard_predictors = c(essentials, "genes_nucleotides_count")
model = lm(log_tpm ~ . , data = train_model_data[, standard_predictors])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ . , data = train_model_data[, c(standard_predictors, msr_predictors)])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c(standard_predictors, "inverted_msr")])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c("log_tpm", basic_predictors)])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c("log_tpm", basic_predictors, msr_predictors)])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
model = lm(log_tpm ~ ., data = train_model_data[, c("log_tpm", basic_predictors, "inverted_msr")])
summary(model)
cat("Test data R squared: ", 1-(var(predict(model, test_model_data, type="response")-test_model_data$log_tpm))/var(test_model_data$log_tpm) )
hist(rexp(length(data_table$log_tpm), rate = 1e3))
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
tpm_noise <- rexp(length(data_table$log_tpm), rate = 1e3)
data_table$log_tpm <- log(data_table$total_TPM + tpm_noise)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
genebody = readRDS("Rexperiments/genebody_improved.Rda")
##########################
y <- c("gene_count", "log_tpm")
basic_predictors <- c("nucleotides", "CpG_density", "meth rate", "msr_density")
essentials <- c(y, basic_predictors)
essential_msr_predictors <- c("msr", "inverted_msr")
fancy_msr_predictors <- c("ecdf", "inverted ecdf", "residual", "inverted_residual")
msr_predictors <- c(essential_msr_predictors, fancy_msr_predictors)
setwd(dir = "../../../")
rna <- read_rna_file("MethylationCode/MethylationData/rna-seq/ENCFF860DPP_left_ventricle_male_34.tsv")
msr_fragments_table = readRDS("Rexperiments/ENCFF536RSX_left_ventricle_msr_table_1000.Rda")
#rna_fragment_table = readRDS("Rexperiments/ENCFF536RSX_left_ventricle_rna_table_1000.Rda")
rna_fragment_table = readRDS("Rexperiments/ENCFF536RSX_left_ventricle_rna_table_1000_extended.Rda")
#########################
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
tpm_noise <- rexp(length(data_table$log_tpm), rate = 1e3)
data_table$log_tpm <- log(data_table$total_TPM + tpm_noise)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
chart.Correlation(data_table[,essentials])
chart.Correlation(data_table[,c(essentials, essential_msr_predictors)])
chart.Correlation(data_table[,c(y, fancy_msr_predictors)])
#mi.plot(data_table[,c(essentials, essential_msr_predictors)])
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
((ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + geom_point(alpha = 0.03))) + ylab("log (TPM)")
((ggplot(data_table,aes(x=residual,y=log_tpm)) + geom_point(alpha = 0.03)))+ ylab("log (TPM)")
((ggplot(data_table,aes(x=msr_density,y=log_tpm) + geom_point(alpha = 0.03)))+ ylab("log (TPM)")
((ggplot(data_table,aes(x=msr_density,y=log_tpm) + geom_point(alpha = 0.03)))+ ylab("log (TPM)"))
((ggplot(data_table,aes(x=residual,y=log_tpm)) + geom_point(alpha = 0.03)))+ ylab("log (TPM)")
((ggplot(data_table,aes(x=msr_density,y=log_tpm)) + geom_point(alpha = 0.03)))+ ylab("log (TPM)")
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$inverted_msr, breaks = 40, col = cols[1], probability = F, xlab = "inverted msr", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$inverted_msr, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
threshold = 0
cols = c(alpha(2,0.5), alpha(3,0.5))
hist(data_table[data_table$total_TPM<=threshold,]$msr_density, breaks = 40, col = cols[1], probability = F, xlab = "discretized meth rate", main = "Distribution comparison")
hist(data_table[data_table$total_TPM>threshold,]$msr_density, breaks = 40, col = cols[2], add = T, probability = F)
legend("top", legend=c(paste("TPM <=",threshold), c(paste("TPM >",threshold))), col=cols, fill = cols)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
genebody = readRDS("Rexperiments/genebody_improved.Rda")
##########################
y <- c("gene_count", "log_tpm")
basic_predictors <- c("nucleotides", "CpG_density", "meth rate", "msr_density")
essentials <- c(y, basic_predictors)
essential_msr_predictors <- c("msr", "inverted_msr")
fancy_msr_predictors <- c("ecdf", "inverted ecdf", "residual", "inverted_residual")
msr_predictors <- c(essential_msr_predictors, fancy_msr_predictors)
msr_fragments_table = readRDS("../../../Rexperiments/K562_msr_table_1000.Rda")
rna_fragment_table = readRDS("../../../Rexperiments/K562_rna_table_1000_extended.Rda")
#########################
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
tpm_noise <- rexp(length(data_table$log_tpm), rate = 1e3)
data_table$log_tpm <- log(data_table$total_TPM + tpm_noise)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
#data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
chart.Correlation(data_table[,essentials])
chart.Correlation(data_table[,c(essentials, essential_msr_predictors)])
chart.Correlation(data_table[,c(y, fancy_msr_predictors)])
```---
gc()
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
msr_ecdf_1e3 = readRDS("../../MethylationCode/MethylationData/msr_ecdf_1e3.Rda")
new_name  <- "../../MethylationCode/MethylationData/wgbs/H1.Rda" # could automate
short_name <- "H1"
size <- 1e3
# read rda file
wgbs <- sum_strands(readRDS(new_name)); gc()
# produce msr table
msr_ecdf_ref <- msr_ecdf_1e3
methylation_assigner <- standard_binaryzer
na_tolerance <- 0.1
minimum_reads <- 1
rr_table <- total_spatial_experiment(c(new_name), c(size), c(F,T), c(short_name), methylation_assigner, na_tolerance, F, minimum_reads)
start = rr_table[[1]][[1]]$data$fragments_infos_array[,1]
msr_density = rr_table[[1]][[1]]$data$fragments_infos_array[,2]
true_density = sapply(start, function(x){mean(wgbs$prop[x:(x+size)], na.rm = T)})/100
msr = rr_table[[1]][[1]]$data$fragments_infos_array[,3]
inverted_msr = rr_table[[2]][[1]]$data$fragments_infos_array[,3]
sig <- significance_measure(msr, msr_density, msr_ecdf_ref, inverted = F)
inverted_sig <- significance_measure(inverted_msr, msr_density, msr_ecdf_ref, inverted = T)
median_function <- extract_ecdf_function(msr_ecdf_ref, 0.5)
residual <- msr-median_function(msr_density)
inverted_residual <- inverted_msr-median_function(1-msr_density)
# save msr tables
msr_table = data.frame(start,msr_density,true_density,msr,inverted_msr, sig, inverted_sig, residual, inverted_residual)
saveRDS(msr_table, file = paste("../../Rexperiments/",short_name, "_msr_table_", size, ".Rda", sep = ""))
