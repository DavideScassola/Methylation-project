cnorm(2)
qnorm(0.95)
qstud(0.95)
student
fstudent
help(qnorm)
pnorm(.96)
pnorm(1.96)
pnorm(-1.96)
pt(-1.96)
dt(-1.96)
rcauchy(100)
sum(rcauchy(100))
sum(rcauchy(100))
sum(rcauchy(100))
sum(rcauchy(100))
sum(rcauchy(100))
sum(rcauchy(10000))
sum(rcauchy(10000))
sum(rcauchy(10000))
B <- 10000
N <- 100
vector(B)
vector(length = B)
for(i in seq(B))
{
vector[i]=sum(rcauchy(N))
}
v = vector(length = B)
for(i in seq(B))
{
v[i]=sum(rcauchy(N))
}
hist(v)
B <- 10000
N <- 100
v = vector(length = B)
for(i in seq(B))
{
v[i]=sum(rcauchy(N))/N
}
hist(v)
floor(3)
floor(2.9)
floor(2.99999999999999999999999)
floor(2.99999999999)
floor(2.999999999999)
floor(2.9999999999999)
floor(2.99999999999999)
floor(2.999999999999999)
floor(2.9999999999999999)
rep_len(12, 12)
rep_len(12, 5)
rep_len(c(1,2,3), 5)
rep_len(c(1,2,3), 20)
rep_len(c(1,2,3), 20)+2
rep_len(c(1,2,3), 20)*1.5
rep_len(c(1,2,3), 20)+c(1,2,3)
rep_len(c(1,2,3), 20)+5
rep_len(c(1,2,3), 20)[4]+4
a = rep_len(c(1,2,3), 20)[4]
a
a = rep_len(c(1,2,3), 20)
a
a[1]=4
a
rep_len
rep_len.code
rep_len
typeof(a)
class(a)
type(rep_len(c(1,2,3), 20))
typeof(rep_len(c(1,2,3), 20))
class(rep_len(c(1,2,3), 20))
rep_len(c(1,2,3), 20)[1] +1
library(Rcpp)
evalCpp("rep_len(1, 20)")
c <- c(1,2,3)
c[1]
c[[1]]
c <- lisy(1,2,3)
c <- list(1,2,3)
c[1]
c[[1]]
r = 1
n = 1000
hist(rgamma(10000, n, r))
hist(rgamma(10000, n, r), density = T)
hist(rgamma(10000, n, r), breaks = 100)
hist(rgamma(100000, n, r), breaks = 100)
r = 1
n = 10000
hist(rgamma(100000, n, r), breaks = 100)
sample = rnorm(1000, 2)
sum(sample*sample)
sample = rnorm(1000, 2)
sum(sample*sample)
expected = (n*2)^(0.5)
n = 1000
expected = (n*2)^(0.5)
expected
sqrt(sum(sample*sample))
expected = (n*2*2)^(0.5)
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
expected
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
n = 10000
expected = (n*2*2)^(0.5)
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
expected
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sample = rnorm(n, 2)
(sum(sample*sample))
sqrt
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
n = 10000
expected = (n*2*2)^(0.5)
expected
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
expected = (n*2*2)^(0.5)
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
function (x, na.rm = FALSE)
sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x),
na.rm = na.rm))
expected = (n*2*2)^(0.5)
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
expected
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
install.packages("doParallel")
install.packages("argparse")
library(SingleCellExperiment)
install.packages("SingleCellExperiment")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
ap <- available.packages()
View(ap)
View(ap)
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E8)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
}
for(i in 1:1E6)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
}
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E6)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
if((i%%1000) == 0) print(i)
}
print(Sys.time()-start_time)
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E5)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
if((i%%1000) == 0) print(i)
}
print(Sys.time()-start_time)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg38")
library(BSgenome.Hsapiens.UCSC.hg38)
a <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Hsapiens.UCSC.hg38)
nucleotides_pattern_positions <- function(chromosome, pattern, Genome = BSgenome.Mmusculus.UCSC.mm10)
{
ranges <- matchPattern(pattern,(Genome[[chromosome]]))
return(IRanges(ranges)@start)
}
binary_nucleotides_pattern_positions <- function(chromosome, pattern, Genome = BSgenome.Mmusculus.UCSC.mm10)
{
positions <- IRanges(matchPattern(pattern,(Genome[[chromosome]])))@start
chromosome_size <- length(Genome[[chromosome]])
return(sparseVector(i = positions, length = chromosome_size, x = T))
}
a <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Hsapiens.UCSC.hg38)
b <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Mmusculus.UCSC.mm10)
library(BSgenome.Mmusculus.UCSC.mm10)
b <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Mmusculus.UCSC.mm10)
ranges <- matchPattern(pattern,(BSgenome.Hsapiens.UCSC.hg38))
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Mmusculus.UCSC.mm10, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:21])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:21) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
library(BSgenome.Mmusculus.UCSC.mm10)
require(Biostrings)
require(parallel)
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:23])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:21) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
s = get_sites("CG")
s
s$chr_name
unique(s$chr_name)
BSgenome.Hsapiens.UCSC.hg38@seqinfo
BSgenome.Hsapiens.UCSC.hg38@seqinfo@seqnames
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:23])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:24) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
Human_CpG_sites = get_sites("CG")
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:24])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:24) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
rm(s)
Human_CpG_sites = get_sites("CG")
unique(Human_CpG_sites$chr_name)
save(Human_CpG_sites, file = "Human_CpG_sites.Rdata")
qnorm(10000)
qnorm(1)
norm(2)
pnorm(100000)
pnorm(mean = 10, sd = 10, q=10000)
pnorm(mean = 10, sd = 10, q=12)
pnorm(mean = 10, sd = 10, q=0)
N = pnorm(mean = 10, sd = 10, q=0)
N = 1-(pnorm(mean = 10, sd = 10, q=0))
N
(pnorm(mean = 10, sd = 10, q=12))/N
(1-pnorm(mean = 10, sd = 10, q=15))/N
(1-pnorm(mean = 10, sd = 10, q=0))/N
pnorm(mean = 0, sd = 1, q=0)
pnorm(mean = 0, sd = 1, q=1)
pnorm(mean = 0, sd = 1, q=2)
pnorm(mean = 0, sd = 1, q=0.5)
pnorm(mean = 0, sd = 1, q=0.5)-pnorm(mean = 0, sd = 1, q=-0.5)
pnorm(mean = 0, sd = 1, q=1)-pnorm(mean = 0, sd = 1, q=-1)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 0, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 4, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=6)-pnorm(mean = 4, sd = 2, q=2)
################################################# CpG sites analysis
source("MSR_analysis_functions.R", chdir = T)
################################################# CpG sites analysis
source("MSR_analysis_functions.R", chdir = T)
################################################# CpG sites analysis
source("MSR_analysis_functions.R", chdir = F)
setwd("Scrivania/Tesi/Methylation-project/Code/")
################################################# CpG sites analysis
source("MSR_analysis_functions.R", chdir = T)
a <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Hsapiens.UCSC.hg38)
genome_MSR <- function(methylation_positions, minimum_bin_size = 10, verbose = T, invert = F)
{
v = sparseVector(i = methylation_positions, x = T, length = max(methylation_positions))
rr <- calculate_relevance_resolution_vector_ignoring_nas(v, minimum_bin_size = minimum_bin_size, invert = invert)
return(rr)
}
genome_MSR(a,verbose = T)
MSR_fixed_M_exp <- function(positions, M, offset=0, names)
{
rr_list <- lapply(positions, function(p)
{
genome_MSR(p[(1+offset):(M+offset)], verbose = T)
})
plotter <- function()
{
rr_plots(rr_list, legend = names, title = paste("dinucleotides comparison, fixed M:",M))
}
return(List(rr_list=rr_list, plotter=plotter))
}
rr_fixed_M <- MSR_fixed_M_exp(positions, M, offset = 0, names = patterns)
patterns = c("CG", "TA", "CA", "CC")
chromosome <- "chr1"
positions = lapply(patterns, function(p) nucleotides_pattern_positions(chromosome, p, Genome = BSgenome.Hsapiens.UCSC.hg38))
M<- 1E4
rr_fixed_M <- MSR_fixed_M_exp(positions, M, offset = 0, names = patterns)
rr_fixed_M$plotter()
rr_fixed_M$plotter()
genome_MSR(p[(1+offset):(M+offset)], verbose = T, minimum_bin_size = 2)
})
plotter <- function()
{
rr_plots(rr_list, legend = names, title = paste("dinucleotides comparison, fixed M:",M))
}
return(List(rr_list=rr_list, plotter=plotter))
}
MSR_fixed_M_exp <- function(positions, M, offset=0, names)
{
rr_list <- lapply(positions, function(p)
{
genome_MSR(p[(1+offset):(M+offset)], verbose = T, minimum_bin_size = 2)
})
plotter <- function()
{
rr_plots(rr_list, legend = names, title = paste("dinucleotides comparison, fixed M:",M))
}
return(List(rr_list=rr_list, plotter=plotter))
}
M<- 1E4
rr_fixed_M <- MSR_fixed_M_exp(positions, M, offset = 0, names = patterns)
rr_fixed_M$plotter()
M<- 1E6
rr_fixed_M <- MSR_fixed_M_exp(positions, M, offset = 0, names = patterns)
rr_fixed_M$plotter()
v = sparseVector(i = a, x = T, length = max(a))
length(a)
max(a)
v[248945688]
v[248945688+1]
v[0]
v[min(a)]
v = sparseVector(i = a, x = T, length = max(a)-min(a))
v = sparseVector(i = a, x = T)
v = sparseVector(i = a, x = T, length = 12)
v = sparseVector(i = a, x = T, length = max(a))
v = sparseVector(i = a, x = T, length = max(a)-1)
genome_MSR <- function(methylation_positions, minimum_bin_size = 10, verbose = T, invert = F, starts_from_min = T)
{
correction <- 0
if(starts_from_min) correction <- min(methylation_positions)
v = sparseVector(i = methylation_positions-correction, x = T, length = max(methylation_positions)-correction)
rr <- calculate_relevance_resolution_vector_ignoring_nas(v, minimum_bin_size = minimum_bin_size, invert = invert)
return(rr)
}
genome_MSR(a)
genome_MSR <- function(methylation_positions, minimum_bin_size = 10, verbose = T, invert = F, starts_from_min = T)
{
correction <- 0
if(starts_from_min) correction <- min(methylation_positions)-1
v = sparseVector(i = methylation_positions-correction, x = T, length = max(methylation_positions)-correction)
rr <- calculate_relevance_resolution_vector_ignoring_nas(v, minimum_bin_size = minimum_bin_size, invert = invert)
return(rr)
}
genome_MSR(a)
M<- 1E6
MSR_fixed_M_exp <- function(positions, M, offset=0, names)
{
rr_list <- lapply(positions, function(p)
{
genome_MSR(p[(1+offset):(M+offset)], verbose = T, minimum_bin_size = 2)
})
plotter <- function()
{
rr_plots(rr_list, legend = names, title = paste("dinucleotides comparison, fixed M:",M))
}
M_densities <- lapply(positions, function(p)
{
M/(max(p)-min(p))
})
return(List(rr_list=rr_list, plotter=plotter, M_densities = M_densities))
}
rr_fixed_e4 <- MSR_fixed_M_exp(positions, 1E4, offset = 0, names = patterns)
rr_fixed_e4$plotter()
rr_fixed_e4$M_densities
MSR_fixed_M_exp <- function(positions, M, offset=0, names)
{
rr_list <- lapply(positions, function(p)
{
genome_MSR(p[(1+offset):(M+offset)], verbose = T, minimum_bin_size = 2)
})
plotter <- function()
{
rr_plots(rr_list, legend = names, title = paste("dinucleotides comparison, fixed M:",M))
}
M_densities <- lapply(positions, function(p)
{
M/(max(p[(1+offset):(M+offset)])-min(p[(1+offset):(M+offset)]))
})
return(List(rr_list=rr_list, plotter=plotter, M_densities = M_densities))
}
rr_fixed_e4 <- MSR_fixed_M_exp(positions, 1E4, offset = 0, names = patterns)
rr_fixed_e4$plotter()
rr_fixed_e4$M_densities
rr_fixed_e4 <- MSR_fixed_M_exp(positions, 1E4, offset = 1000, names = patterns)
rr_fixed_e4$plotter()
rr_fixed_e4 <- MSR_fixed_M_exp(positions, 1E4,  names = patterns)
rr_fixed_e4$plotter()
rr_fixed_e4$M_densities
gc()
rr_fixed_e6 <- MSR_fixed_M_exp(positions, 1E6, offset = 0, names = patterns)
rr_fixed_e6$plotter()
rr_fixed_e6$M_densities
MSR_area(rr_fixed_e4$rr_list[[1]])
MSR_area(rr_fixed_e4$rr_list[[2]])
MSR_area(rr_fixed_e4$rr_list[[3]])
MSR_area(rr_fixed_e4$rr_list[[4]])
MSR_area(rr_fixed_e6$rr_list)
MSR_area(rr_fixed_e6$rr_list[[1]])
MSR_area(rr_fixed_e6$rr_list[[2]])
MSR_area(rr_fixed_e6$rr_list[[3]])
MSR_area(rr_fixed_e6$rr_list[[4]])
