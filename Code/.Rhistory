install.packages("SingleCellExperiment")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
ap <- available.packages()
View(ap)
View(ap)
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E8)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
}
for(i in 1:1E6)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
}
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E6)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
if((i%%1000) == 0) print(i)
}
print(Sys.time()-start_time)
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E5)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
if((i%%1000) == 0) print(i)
}
print(Sys.time()-start_time)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg38")
library(BSgenome.Hsapiens.UCSC.hg38)
a <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Hsapiens.UCSC.hg38)
nucleotides_pattern_positions <- function(chromosome, pattern, Genome = BSgenome.Mmusculus.UCSC.mm10)
{
ranges <- matchPattern(pattern,(Genome[[chromosome]]))
return(IRanges(ranges)@start)
}
binary_nucleotides_pattern_positions <- function(chromosome, pattern, Genome = BSgenome.Mmusculus.UCSC.mm10)
{
positions <- IRanges(matchPattern(pattern,(Genome[[chromosome]])))@start
chromosome_size <- length(Genome[[chromosome]])
return(sparseVector(i = positions, length = chromosome_size, x = T))
}
a <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Hsapiens.UCSC.hg38)
b <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Mmusculus.UCSC.mm10)
library(BSgenome.Mmusculus.UCSC.mm10)
b <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Mmusculus.UCSC.mm10)
ranges <- matchPattern(pattern,(BSgenome.Hsapiens.UCSC.hg38))
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Mmusculus.UCSC.mm10, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:21])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:21) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
library(BSgenome.Mmusculus.UCSC.mm10)
require(Biostrings)
require(parallel)
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:23])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:21) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
s = get_sites("CG")
s
s$chr_name
unique(s$chr_name)
BSgenome.Hsapiens.UCSC.hg38@seqinfo
BSgenome.Hsapiens.UCSC.hg38@seqinfo@seqnames
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:23])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:24) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
Human_CpG_sites = get_sites("CG")
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:24])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:24) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
rm(s)
Human_CpG_sites = get_sites("CG")
unique(Human_CpG_sites$chr_name)
save(Human_CpG_sites, file = "Human_CpG_sites.Rdata")
qnorm(10000)
qnorm(1)
norm(2)
pnorm(100000)
pnorm(mean = 10, sd = 10, q=10000)
pnorm(mean = 10, sd = 10, q=12)
pnorm(mean = 10, sd = 10, q=0)
N = pnorm(mean = 10, sd = 10, q=0)
N = 1-(pnorm(mean = 10, sd = 10, q=0))
N
(pnorm(mean = 10, sd = 10, q=12))/N
(1-pnorm(mean = 10, sd = 10, q=15))/N
(1-pnorm(mean = 10, sd = 10, q=0))/N
pnorm(mean = 0, sd = 1, q=0)
pnorm(mean = 0, sd = 1, q=1)
pnorm(mean = 0, sd = 1, q=2)
pnorm(mean = 0, sd = 1, q=0.5)
pnorm(mean = 0, sd = 1, q=0.5)-pnorm(mean = 0, sd = 1, q=-0.5)
pnorm(mean = 0, sd = 1, q=1)-pnorm(mean = 0, sd = 1, q=-1)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 0, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 4, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=6)-pnorm(mean = 4, sd = 2, q=2)
hist(rnorm(100000, 10, 10))
qnorm(10,10)
qnorm(1)
pnorm(1)
pnorm(1, mean = 10, sd = 10)
pnorm(0, mean = 10, sd = 10)
Z = pnorm(0, mean = 10, sd = 10)
Z
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))
Z = 1-pnorm(0, mean = 10, sd = 10)
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(129999, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
1-(pnorm(15, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(12, mean = 10, sd = 10)/Z
jiHIFG
(pnorm(12, mean = 10, sd = 10)/Z)
(pnorm(129879, mean = 10, sd = 10)/Z)
(pnorm(12987990, mean = 10, sd = 10)/Z)
(pnorm(12, mean = 10, sd = 10)/Z)
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(456412, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(15, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
1-(pnorm(15, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
1-(pnorm(15, mean = 10, sd = 10)-pnorm(12, mean = 10, sd = 10))/Z
(pnorm(15, mean = 10, sd = 10)-pnorm(12, mean = 10, sd = 10))/Z
0.1333612+0.3667195+0.6332805
0.1333612+0.3667195+0.5
0.3667195*3
(pnorm(15, mean = 10, sd = 10)-pnorm(12, mean = 10, sd = 10))/Z
pnorm(1)
pnorm(-11)
pnorm(1)-pnorm(-1)
1-0.9^(10)-0.9^9
(1 + 2 + 3 + 4 + 5 + 6)^2
441/36Ã¹
441/36
1+4+9+16+25+36
91/6
pnorm(6,4,2)-pnorm(4,4,2)
pnorm(6,4,sd=2)-pnorm(4,4,sd=2)
pnorm(6,mean=4,sd=2)-pnorm(4,mean=4,sd=2)
pnorm(6,mean=4,sd=1)-pnorm(4,mean=4,sd=1)
pnorm(6,mean=4,sd=2)-pnorm(4,mean=4,sd=2)
pnorm(6,mean=4,sd=2)-pnorm(2,mean=4,sd=2)
#################################################################################################
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
load(file = "../../Rexperiments/total_exp_chr1.Rdata")
total_exp_chr1$stomach
total_exp_chr1$stomach[[1]]$window_size
total_exp_chr1$stomach[[1]]$data$fragments_infos_array
total_exp_chr1$stomach[[1]]$data$fragments_infos_array[90,]
total_exp_chr1$stomach[[1]]$data$rr_list[90]
total_exp_chr1$stomach[[1]]$data$rr_list[91]
total_exp_chr1$stomach[[1]]$data$rr_list[92]
total_exp_chr1$stomach[[1]]$data$rr_list[1]
total_exp_chr1$stomach[[1]]$data$rr_list[3]
total_exp_chr1$stomach[[1]]$data$rr_list[300]
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()[0]
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()[[0]]
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()[1]
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()[2]
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()[3]
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()[4]
total_exp_chr1$stomach[[1]]$data$fragments_infos_array
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()[4]
total_exp_chr1$stomach[[1]]$data$get_valid_rrs()[1]
length(total_exp_chr1$stomach[[1]]$data$get_valid_rrs()[1])
sapply(length(total_exp_chr1$stomach[[1]]$data$rr_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
)
sapply(total_exp_chr1$stomach[[1]]$data$rr_list, function(rr)
{
if(length(rr)==1) return(NA)
else MSR_area(rr)})
total_exp_chr1$stomach[[1]]$data$rr_list
total_exp_chr1$stomach[[1]]$data$rr_list[0]
total_exp_chr1$stomach[[1]]$data$rr_list[[0]]
total_exp_chr1$stomach[[1]]$data$rr_list[1]
length(total_exp_chr1$stomach[[1]]$data$rr_list[1])
length(total_exp_chr1$stomach[[1]]$data$rr_list[[1]])
length(total_exp_chr1$stomach[[1]]$data$rr_list[[10]])
length(total_exp_chr1$stomach[[1]]$data$rr_list[[100]])
total_exp_chr1$stomach[[1]]$data$rr_list[[1]]
NULL
NA
MSR_area(NULL)
MSR_area(NA)
total_exp_chr1$stomach[[1]]$name
total_exp_chr1$stomach[[1]]$name
total_exp_chr1$stomach[[1]]$window_size
total_exp_chr1$stomach[[1]]$data$fragments_infos_array
file_stomach = "../../MethylationCode/MethylationData/wgbs/ENCFF844EFX_stomach_man_51.bed.gz"
data_stomach <- read_ENCODE_bed(file_stomach, verbose = T)
data_stomach = filter_chromosome(data_stomach, chromosome = "chr1")
pos <- clean_bed_file(data_stomach, sum_strands, stochastic_binaryzer, replace_no_reads_entries)$Cpos
pos <- get_methylation_positions(data_stomach, "chr1", sum_strands, stochastic_binaryzer, replace_no_reads_entries)
data_stomach = read_ENCODE_bed(file_stomach)
pos <- get_methylation_positions(data_stomach, "chr1", sum_strands, stochastic_binaryzer, replace_no_reads_entries)
subpos = subset_positions(pos, 0, 1e6)
subpos = subset_positions(pos, 0, 1e5)
a = spatial_MSR_experiment_by_chromosome(pos, 1e4, F, 10)
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 10)
a$fragments_infos_array
total_exp_chr1$stomach[[1]]$data$fragments_infos_array[1:8,]
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size, cores = 1)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(l, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)<=1) return(NA)
else MSR_area(rr)})
valids <- (!is.na(fragments_infos_array[,3]))
get_valid_rrs <- function() {return(rr_fragments_list[valids])}
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list, get_valid_rrs=get_valid_rrs))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 10)
a$fragments_infos_array
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(l, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(length(rr)<=1) return(NA)
else MSR_area(rr)})
valids <- (!is.na(fragments_infos_array[,3]))
get_valid_rrs <- function() {return(rr_fragments_list[valids])}
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list, get_valid_rrs=get_valid_rrs))
}
total_spatial_experiment <- function(files, sizes, inversion, names, methylation_assigner, na_tolerance, fake_data)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
binary <- get_methylation_CpG_binary_vector(data,strands_handler = sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = keep_nas)
remove(data)
gc()
for(inv in inversion)
{
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_CpG_list(binary, inv, s, fake_data, na_tolerance)
return(List(name=names[i], inverted=inv, window_size=s, data=rrs))
})
result[[paste(names[i], "inverted:", inv, sep = "_")]] <- result_si
}
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20, mc = F)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
cores = 1
if(mc) cores = length(sizes)
result_si = mclapply(sizes, mc.cores = cores, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20, mc = F)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
cores = 1
if(mc) cores = length(sizes)
result_si = mclapply(sizes, mc.cores = cores, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
#################################################################
files = c(file_h1, file_stomach)
files = c(file_h1)
names = c("H1","stomach")
names = c("H1")
sizes = c(1e4, 1e5, 1e6, 1e7)
sizes = c(1e4, 1e5)
chromosome = "chr22"
chromosome = "chrY"
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 500)
)
#source_directory = "./Scrivania/Tesi/MethylationCode/"
#setwd(source_directory)
file_h1 = "../../MethylationCode/MethylationData/wgbs/ENCFF601NBW_H1_cell_line.bed.gz"
file_stomach = "../../MethylationCode/MethylationData/wgbs/ENCFF844EFX_stomach_man_51.bed.gz"
#################################################################
files = c(file_h1, file_stomach)
files = c(file_h1)
names = c("H1","stomach")
names = c("H1")
sizes = c(1e4, 1e5, 1e6, 1e7)
sizes = c(1e4, 1e5)
chromosome = "chrY"
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 200)
)
total_exp_chr1$H1[[1]]$window_size
total_exp_chr1$H1[[1]]$data
total_exp_chr1$H1[[1]]$data$fragments_infos_array
total_exp_chr1$H1[[1]]$data$fragments_infos_array[,3]
total_exp_chr1$H1[[1]]$data$fragments_infos_array[,3]==0
gc()
remove(data_stomach)
gc()
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 200, mc = T)
)
total_exp_chr1$H1[[1]]$data$fragments_infos_array
total_exp_chr1$H1[[2]]$data$fragments_infos_array
load(file = "../../Rexperiments/total_exp.Rdata")
total_exp$`H1_inverted:_FALSE`[[1]]$window_size
total_exp$`H1_inverted:_FALSE`[[1]]$inverted
total_exp$`H1_inverted:_FALSE`[[1]]$data
total_exp$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array
plot(total_exp$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array)
plot(total_exp$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array[,2])
(total_exp$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array[,2])
(total_exp$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array[,2])
(total_exp$`H1_inverted:_FALSE`[[2]]$data$fragments_infos_array[,2])
(total_exp$`H1_inverted:_FALSE`[[2]]$data$fragments_infos_array[,2])
plot(total_exp$`H1_inverted:_FALSE`[[2]]$data$fragments_infos_array[,2])
plot(total_exp$`H1_inverted:_FALSE`[[2]]$data$fragments_infos_array[,2], pch = "+")
plot(total_exp$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array[,2], pch = "+")
load(file = "../../Rexperiments/total_exp_fake.Rdata")
plot(total_exp_fake$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array[,2], pch = "+")
load(file = "../../Rexperiments/total_exp_fake.Rdata")
plot(total_exp_fake$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array[,2], pch = "+")
plot(total_exp$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array[,2], pch = "+")
rm(total_exp)
rm(total_exp_chr1)
rm(a)
load(file = "../../Rexperiments/total_exp_fake.Rdata")
plot(total_exp$`H1_inverted:_FALSE`[[1]]$data$fragments_infos_array[,2], pch = "+")
