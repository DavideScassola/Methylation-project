(pnorm(15, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
1-(pnorm(15, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
1-(pnorm(15, mean = 10, sd = 10)-pnorm(12, mean = 10, sd = 10))/Z
(pnorm(15, mean = 10, sd = 10)-pnorm(12, mean = 10, sd = 10))/Z
0.1333612+0.3667195+0.6332805
0.1333612+0.3667195+0.5
0.3667195*3
(pnorm(15, mean = 10, sd = 10)-pnorm(12, mean = 10, sd = 10))/Z
pnorm(1)
pnorm(-11)
pnorm(1)-pnorm(-1)
1-0.9^(10)-0.9^9
(1 + 2 + 3 + 4 + 5 + 6)^2
441/36Ã¹
441/36
1+4+9+16+25+36
91/6
pnorm(6,4,2)-pnorm(4,4,2)
pnorm(6,4,sd=2)-pnorm(4,4,sd=2)
pnorm(6,mean=4,sd=2)-pnorm(4,mean=4,sd=2)
pnorm(6,mean=4,sd=1)-pnorm(4,mean=4,sd=1)
pnorm(6,mean=4,sd=2)-pnorm(4,mean=4,sd=2)
pnorm(6,mean=4,sd=2)-pnorm(2,mean=4,sd=2)
#################################################################################################
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
#source_directory = "./Scrivania/Tesi/MethylationCode/"
#setwd(source_directory)
file_h1 = "../../MethylationCode/MethylationData/wgbs/ENCFF601NBW_H1_cell_line.bed.gz"
file_stomach = "../../MethylationCode/MethylationData/wgbs/ENCFF844EFX_stomach_man_51.bed.gz"
a = runif(1000)
sort(a)
a = sort(a)
a[1:length(a)]-a[0:(length(a)-1)]
a[2:length(a)]-a[1:(length(a)-1)]
hist(a[2:length(a)]-a[1:(length(a)-1)])
rexp(100)
hist(rexp(1000))
hist(log(rexp(1000)))
hist(log(rexp(10000)))
bernoulli_positions <- function(max, prop)
{
round(runif(min = 1, max=max, n = prop*(max-1)))
}
bernoulli_positions(100000,0.01)
hist(bernoulli_positions(100000,0.01))
hist(bernoulli_positions(100000,0.01))
hist(bernoulli_positions(1000000,0.01))
hist(bernoulli_positions(1000000,0.007))
spatial_MSR_experiment_by_chromosome <- function(pos, s, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
fragments_infos_array[i,2] <- length(pos)/window_size
if(length(pos)<2)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(pos)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr) MSR_area(rr))
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list))
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
#######################################################################################################
spatial_MSR_experiment_CpG_list <- function(binary, invert, window_size, fake_data, na_tolerance)
{
l <- length(binary)
if(fake_data)
{
prop <- mean(binary, na.rm=T)
binary <- rbinom(l, 1, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- binary[start_list[i]:(start_list[i]+window_size)]
fragments_infos_array[i,1] <- start_list[i]
fragments_infos_array[i,2] <- mean(sub,na.rm=T)
rr <- calculate_relevance_resolution_vector(sub, verbose=F, na_tolerance = na_tolerance, na_values_handler = replace_nas_hybrid_stochastic, invert = invert)
fragments_infos_array[i,3] <- MSR_area(rr)
return(rr)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
mean(binary[start_list[i]:(start_list[i]+window_size)],na.rm=T)
})
if(invert) fragments_infos_array[,2]= 1 - fragments_infos_array[,2]
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr) MSR_area(rr))
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list))
}
bernoulli_positions <- function(max, prop)
{
round(runif(min = 1, max=max, n = prop*(max-1)))
}
spatial_MSR_experiment_by_chromosome <- function(pos, s, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
fragments_infos_array[i,2] <- length(pos)/window_size
if(length(pos)<2)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(pos)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr) MSR_area(rr))
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list))
}
total_spatial_experiment <- function(files, sizes, inversion, names, methylation_assigner, na_tolerance, fake_data)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
binary <- get_methylation_CpG_binary_vector(data,strands_handler = sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = keep_nas)
remove(data)
gc()
for(inv in inversion)
{
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_CpG_list(binary, inv, s, fake_data, na_tolerance)
return(List(name=names[i], inverted=inv, window_size=s, data=rrs))
})
result[[paste(names[i], "inverted:", inv, sep = "_")]] <- result_si
}
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
#################################################################
files = c(file_h1, file_stomach)
names = c("H1","stomach")
names = c("H1")
sizes = c(1e4, 1e5, 1e6, 1e7)
sizes = c(1e4)
chromosome = "chr1"
chromosome = "chrY"
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 30)
)
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
fragments_infos_array[i,2] <- length(pos)/window_size
if(length(pos)<2)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(pos)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr) MSR_area(rr))
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list))
}
total_spatial_experiment <- function(files, sizes, inversion, names, methylation_assigner, na_tolerance, fake_data)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
binary <- get_methylation_CpG_binary_vector(data,strands_handler = sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = keep_nas)
remove(data)
gc()
for(inv in inversion)
{
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_CpG_list(binary, inv, s, fake_data, na_tolerance)
return(List(name=names[i], inverted=inv, window_size=s, data=rrs))
})
result[[paste(names[i], "inverted:", inv, sep = "_")]] <- result_si
}
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
#################################################################
files = c(file_h1, file_stomach)
names = c("H1","stomach")
names = c("H1")
sizes = c(1e4, 1e5, 1e6, 1e7)
sizes = c(1e4)
chromosome = "chr1"
chromosome = "chrY"
files = c(file_h1)
names = c("H1","stomach")
names = c("H1")
sizes = c(1e4, 1e5, 1e6, 1e7)
sizes = c(1e4)
chromosome = "chr1"
chromosome = "chrY"
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 30)
)
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
fragments_infos_array[i,2] <- length(pos)/window_size
if(length(pos)<50)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(pos)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr) MSR_area(rr))
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list))
}
total_spatial_experiment <- function(files, sizes, inversion, names, methylation_assigner, na_tolerance, fake_data)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
binary <- get_methylation_CpG_binary_vector(data,strands_handler = sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = keep_nas)
remove(data)
gc()
for(inv in inversion)
{
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_CpG_list(binary, inv, s, fake_data, na_tolerance)
return(List(name=names[i], inverted=inv, window_size=s, data=rrs))
})
result[[paste(names[i], "inverted:", inv, sep = "_")]] <- result_si
}
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
#################################################################
files = c(file_h1, file_stomach)
files = c(file_h1)
names = c("H1","stomach")
names = c("H1")
sizes = c(1e4, 1e5, 1e6, 1e7)
sizes = c(1e4)
chromosome = "chr1"
chromosome = "chrY"
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 30)
)
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<10)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(pos)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr) MSR_area(rr))
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list))
}
total_spatial_experiment <- function(files, sizes, inversion, names, methylation_assigner, na_tolerance, fake_data)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
binary <- get_methylation_CpG_binary_vector(data,strands_handler = sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = keep_nas)
remove(data)
gc()
for(inv in inversion)
{
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_CpG_list(binary, inv, s, fake_data, na_tolerance)
return(List(name=names[i], inverted=inv, window_size=s, data=rrs))
})
result[[paste(names[i], "inverted:", inv, sep = "_")]] <- result_si
}
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
#################################################################
files = c(file_h1, file_stomach)
files = c(file_h1)
names = c("H1","stomach")
names = c("H1")
sizes = c(1e4, 1e5, 1e6, 1e7)
sizes = c(1e4)
chromosome = "chr1"
chromosome = "chrY"
system.time(
total_exp_chr1 <- total_spatial_experiment_by_chromosome(files, sizes, chromosome, names, stochastic_binaryzer, fake_data=F, minimum_bin_size = 30)
)
#source_directory = "./Scrivania/Tesi/MethylationCode/"
#setwd(source_directory)
file_h1 = "../../MethylationCode/MethylationData/wgbs/ENCFF601NBW_H1_cell_line.bed.gz"
data_h1 <- read_ENCODE_bed(file_h1, verbose = T)
a = sum_strands(data_h1)
a
a$reads
a$reads<1
sum(a$reads<1)
sum(a$reads<1)/length(a$reads)
a = filter_chromosome(a,"chr1")
sum(a$reads<1)/length(a$reads)
replace_few_reads_entries(a)
clean_bed_file(data_h1, strands_handler = sum_strands,methylation_assigner = stochastic_binaryzer,missing_read_handler = replace_few_reads_entries)
out <- filter_chromosome(data_h1, "chr1")
clean_bed_file(out, sum_strands, stochastic_binaryzer, replace_no_reads_entries)
out <- filter_chromosome(data_h1, "chrY")
clean_bed_file(out, sum_strands, stochastic_binaryzer, replace_no_reads_entries)
