if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
ap <- available.packages()
View(ap)
View(ap)
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E8)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
}
for(i in 1:1E6)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
}
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E6)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
if((i%%1000) == 0) print(i)
}
print(Sys.time()-start_time)
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E5)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
if((i%%1000) == 0) print(i)
}
print(Sys.time()-start_time)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg38")
library(BSgenome.Hsapiens.UCSC.hg38)
a <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Hsapiens.UCSC.hg38)
nucleotides_pattern_positions <- function(chromosome, pattern, Genome = BSgenome.Mmusculus.UCSC.mm10)
{
ranges <- matchPattern(pattern,(Genome[[chromosome]]))
return(IRanges(ranges)@start)
}
binary_nucleotides_pattern_positions <- function(chromosome, pattern, Genome = BSgenome.Mmusculus.UCSC.mm10)
{
positions <- IRanges(matchPattern(pattern,(Genome[[chromosome]])))@start
chromosome_size <- length(Genome[[chromosome]])
return(sparseVector(i = positions, length = chromosome_size, x = T))
}
a <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Hsapiens.UCSC.hg38)
b <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Mmusculus.UCSC.mm10)
library(BSgenome.Mmusculus.UCSC.mm10)
b <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Mmusculus.UCSC.mm10)
ranges <- matchPattern(pattern,(BSgenome.Hsapiens.UCSC.hg38))
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Mmusculus.UCSC.mm10, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:21])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:21) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
library(BSgenome.Mmusculus.UCSC.mm10)
require(Biostrings)
require(parallel)
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:23])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:21) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
s = get_sites("CG")
s
s$chr_name
unique(s$chr_name)
BSgenome.Hsapiens.UCSC.hg38@seqinfo
BSgenome.Hsapiens.UCSC.hg38@seqinfo@seqnames
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:23])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:24) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
Human_CpG_sites = get_sites("CG")
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:24])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:24) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
rm(s)
Human_CpG_sites = get_sites("CG")
unique(Human_CpG_sites$chr_name)
save(Human_CpG_sites, file = "Human_CpG_sites.Rdata")
qnorm(10000)
qnorm(1)
norm(2)
pnorm(100000)
pnorm(mean = 10, sd = 10, q=10000)
pnorm(mean = 10, sd = 10, q=12)
pnorm(mean = 10, sd = 10, q=0)
N = pnorm(mean = 10, sd = 10, q=0)
N = 1-(pnorm(mean = 10, sd = 10, q=0))
N
(pnorm(mean = 10, sd = 10, q=12))/N
(1-pnorm(mean = 10, sd = 10, q=15))/N
(1-pnorm(mean = 10, sd = 10, q=0))/N
pnorm(mean = 0, sd = 1, q=0)
pnorm(mean = 0, sd = 1, q=1)
pnorm(mean = 0, sd = 1, q=2)
pnorm(mean = 0, sd = 1, q=0.5)
pnorm(mean = 0, sd = 1, q=0.5)-pnorm(mean = 0, sd = 1, q=-0.5)
pnorm(mean = 0, sd = 1, q=1)-pnorm(mean = 0, sd = 1, q=-1)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 0, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 4, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=6)-pnorm(mean = 4, sd = 2, q=2)
hist(rnorm(100000, 10, 10))
qnorm(10,10)
qnorm(1)
pnorm(1)
pnorm(1, mean = 10, sd = 10)
pnorm(0, mean = 10, sd = 10)
Z = pnorm(0, mean = 10, sd = 10)
Z
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))
Z = 1-pnorm(0, mean = 10, sd = 10)
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(129999, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
1-(pnorm(15, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(12, mean = 10, sd = 10)/Z
jiHIFG
(pnorm(12, mean = 10, sd = 10)/Z)
(pnorm(129879, mean = 10, sd = 10)/Z)
(pnorm(12987990, mean = 10, sd = 10)/Z)
(pnorm(12, mean = 10, sd = 10)/Z)
(pnorm(12, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(456412, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
(pnorm(15, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
1-(pnorm(15, mean = 10, sd = 10)-pnorm(0, mean = 10, sd = 10))/Z
1-(pnorm(15, mean = 10, sd = 10)-pnorm(12, mean = 10, sd = 10))/Z
(pnorm(15, mean = 10, sd = 10)-pnorm(12, mean = 10, sd = 10))/Z
0.1333612+0.3667195+0.6332805
0.1333612+0.3667195+0.5
0.3667195*3
(pnorm(15, mean = 10, sd = 10)-pnorm(12, mean = 10, sd = 10))/Z
pnorm(1)
pnorm(-11)
pnorm(1)-pnorm(-1)
1-0.9^(10)-0.9^9
(1 + 2 + 3 + 4 + 5 + 6)^2
441/36Ã¹
441/36
1+4+9+16+25+36
91/6
pnorm(6,4,2)-pnorm(4,4,2)
pnorm(6,4,sd=2)-pnorm(4,4,sd=2)
pnorm(6,mean=4,sd=2)-pnorm(4,mean=4,sd=2)
pnorm(6,mean=4,sd=1)-pnorm(4,mean=4,sd=1)
pnorm(6,mean=4,sd=2)-pnorm(4,mean=4,sd=2)
pnorm(6,mean=4,sd=2)-pnorm(2,mean=4,sd=2)
#################################################################################################
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
load(file = "../../Rexperiments/total_exp.Rdata")
load(file = "../../Rexperiments/total_exp_fake.Rdata")
load(file = "../../Rexperiments/total_exp_chr1.Rdata")
load(file = "../../Rexperiments/total_exp_chr1_fake.Rdata")
load(file = "../../Rexperiments/CG_exp.Rdata")
box_comparison <- function(exp, explanation, density = F, names = c("1e3", "1e4", "1e5", "1e6"))
{
i = 3
ylab = "msr"
if(density)
{
i = 2
ylab = "density"
}
msr_1e3 = exp[[1]]$data$fragments_infos_array[,i]
msr_1e4 = exp[[2]]$data$fragments_infos_array[,i]
msr_1e5 = exp[[3]]$data$fragments_infos_array[,i]
msr_1e6 = exp[[4]]$data$fragments_infos_array[,i]
boxplot(msr_1e3, msr_1e4, msr_1e5, msr_1e6, names = names , xlab = "window size", ylab = ylab)
title(explanation)
}
density_MSR_correlation <- function(exp, explanation, fix = T, windows = c("1e3", "1e4", "1e5", "1e6"))
{
for(i in 1:length(windows))
{
density= exp[[i]]$data$fragments_infos_array[,2]
msr = exp[[i]]$data$fragments_infos_array[,3]
if(fix)
plot(density,msr, xlim = c(0,1), ylim = c(0,0.32), col = alpha(1,0.5))
else
plot(density,msr, col = alpha(1,0.5))
#scatterhist(density,msr, xlab = "density", ylab = "msr")
title(paste(explanation, windows[i]))
par(ask=TRUE)
print(cor.test(density,msr))
}
par(ask=FALSE)
}
show_zone <- function(exp, n)
{
#autocor(exp$data$fragments_infos_array[,3],1)
plot(exp$data$fragments_infos_array[1:n,3], col = alpha(1,0.2), ylab = "msr", xlab = "slice number", main = sprintf("%s cell, window size: %d, inverted: %s", exp$name, exp$window_size, exp$inverted))
lines(exp$data$fragments_infos_array[1:n,3], col = alpha(1,0.7))
par(ask=TRUE)
plot(1-exp$data$fragments_infos_array[1:n,2],  col = alpha(1,0.2), ylab = "density", xlab = "slice number", main = sprintf("%s cell, window size: %d", exp$name, exp$window_size))
lines(1-exp$data$fragments_infos_array[1:n,2], col= alpha(1,0.7))
par(ask=FALSE)
cat("\nmean msr: ", mean(exp$data$fragments_infos_array[,3], na.rm=T))
cat("\nmean density:", mean(1-exp$data$fragments_infos_array[,2], na.rm=T))
}
par(mfrow=c(2,2))
density_MSR_correlation(total_exp$`H1_inverted:_FALSE`, "H1")
par(mfrow=c(2,1))
box_comparison(total_exp$`H1_inverted:_FALSE`, explanation = "H1", density = T)
box_comparison(total_exp$`H1_inverted:_FALSE`, explanation = "H1", density = F)
par(mfrow=c(1,2))
box_comparison(total_exp$`H1_inverted:_FALSE`, explanation = "H1", density = T)
box_comparison(total_exp$`H1_inverted:_FALSE`, explanation = "H1", density = F)
box_comparison(total_exp$`H1_inverted:_TRUE`, explanation = "H1, inverted", density = T)
box_comparison(total_exp$`H1_inverted:_TRUE`, explanation = "H1, inverted", density = F)
box_comparison(total_exp$`stomach_inverted:_FALSE`, explanation = "stomach", density = T)
box_comparison(total_exp$`stomach_inverted:_FALSE`, explanation = "stomach", density = F)
box_comparison(total_exp$`stomach_inverted:_TRUE`, explanation = "stomach, inverted", density = T)
box_comparison(total_exp$`stomach_inverted:_TRUE`, explanation = "stomach, inverted", density = F)
par(mfrow=c(2,2))
density_MSR_correlation(total_exp$`H1_inverted:_TRUE`, "H1, inverted")
density_MSR_correlation(total_exp$`stomach_inverted:_FALSE`, "stomach")
density_MSR_correlation(total_exp$`stomach_inverted:_TRUE`, "stomach, inverted")
density_MSR_correlation(CG_exp$CG, "CG", windows = c("1e4", "1e5", "1e6", "1e7"), fix = T)
show_zone(total_exp$`stomach_inverted:_TRUE`[[1]],1000)
par(mfrow=c(2,1))
show_zone(total_exp$`stomach_inverted:_TRUE`[[1]],1000)
show_zone(total_exp$`H1_inverted:_TRUE`[[1]],1000)
show_zone(total_exp$`stomach_inverted:_TRUE`[[1]],1000)
show_zone(total_exp$`H1_inverted:_TRUE`[[1]],1000)
show_zone(total_exp$`stomach_inverted:_TRUE`[[1]],1000)
show_zone(total_exp$`H1_inverted:_TRUE`[[1]],1000)
density_MSR_correlation(CG_exp$CG, "CG", windows = c("1e4", "1e5", "1e6", "1e7"), fix = T)
density_MSR_correlation(CG_exp$CG, "CG", windows = c("1e4", "1e5", "1e6", "1e7"), fix = F)
par(mfrow=c(2,2))
density_MSR_correlation(CG_exp$CG, "CG", windows = c("1e4", "1e5", "1e6", "1e7"), fix = F)
box_comparison(CG_exp$CG, explanation = "CG", names = c("1e4", "1e5", "1e6", "1e7"), density = T)
box_comparison(CG_exp$CG, explanation = "CG", names = c("1e4", "1e5", "1e6", "1e7"), density = F)
##### fake data
density_MSR_correlation(total_exp_fake$`stomach_inverted:_TRUE`, "stomach, inverted")
box_comparison(total_exp_fake$`stomach_inverted:_TRUE`, explanation = "stomach, inverted fake", density = F)
box_comparison(CG_exp$CG, explanation = "CG", names = c("1e4", "1e5", "1e6", "1e7"), density = T)
box_comparison(CG_exp$CG, explanation = "CG", names = c("1e4", "1e5", "1e6", "1e7"), density = F)
par(mfrow=c(2,1))
box_comparison(total_exp_fake$`stomach_inverted:_TRUE`, explanation = "stomach, inverted fake", density = T)
box_comparison(total_exp_fake$`stomach_inverted:_TRUE`, explanation = "stomach, inverted fake", density = F)
par(mfrow=c(1,2))
box_comparison(total_exp_fake$`stomach_inverted:_TRUE`, explanation = "stomach, inverted fake", density = T)
box_comparison(total_exp_fake$`stomach_inverted:_TRUE`, explanation = "stomach, inverted fake", density = F)
##### fake data
density_MSR_correlation(total_exp_fake$`stomach_inverted:_TRUE`, "stomach, inverted")
par(mfrow=c(2,2))
##### fake data
density_MSR_correlation(total_exp_fake$`stomach_inverted:_TRUE`, "stomach, inverted")
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
load("../../MethylationCode/MethylationData/CpGislands.Rdata")
source("CpG_islands_functions.R", chdir = T)
###################################################################
H1_islands = readRDS("../../Rexperiments/H1_island_data.Rda")
stomach_islands = readRDS("../../Rexperiments/stomach_island_data.Rda")
#####################################################################
# correlation study
cor.test(stomach_islands$prop, H1_islands$prop)
cor.test(round(stomach_islands$prop/100), round(H1_islands$prop/100))
island_table = table(round(stomach_islands$prop/100), round(H1_islands$prop/100))
linear_model = lm(stomach_islands$prop ~ H1_islands$prop)
#glm_model = glm(stomach_islands$prop/10 ~ H1_islands$prop/100, family = "binomial")
summary(linear_model)
island_table
prop.table(island_table)
prop.table(island_table,1)
prop.table(island_table,2)
coherent_sites_prop = prop.table(island_table)[1] + prop.table(island_table)[4]
cat("coherent_sites_prop: ", coherent_sites_prop)
different_sites_num = (island_table)[2] + (island_table)[3]
cat("different_sites_num: ", different_sites_num)
######################################################################
# Methylation heterogeneity
names = c("Stomach", "H1")
colors = c(alpha(10,0.5), alpha(5,0.5))
breaks = 40
min_valid_sites = 20
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, main = ("Methylation level on CpG islands"))
par(mfrow=c(1,2))
######################################################################
# Methylation heterogeneity
names = c("Stomach", "H1")
colors = c(alpha(10,0.5), alpha(5,0.5))
breaks = 40
min_valid_sites = 20
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, xlab = "methylation level", breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, xlab = "methylation level", breaks = breaks, add = T)
min_valid_sites = 2
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, xlab = "methylation level", breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, xlab = "methylation level", breaks = breaks, add = T)
breaks = 40
min_valid_sites = 2
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, xlab = "methylation level", breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, xlab = "methylation level", breaks = breaks, add = T)
breaks = 40
min_valid_sites = 2
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
min_valid_sites = 10
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
breaks = 40
min_valid_sites = 10
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
min_valid_sites = 20
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
breaks = 40
min_valid_sites = 20
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
colors = c(alpha(5,0.5), alpha(10,0.5))
breaks = 40
min_valid_sites = 20
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
breaks = 40
min_valid_sites = 20
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
breaks = 40
min_valid_sites = 10
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
breaks = 40
min_valid_sites = 10
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
colors = c(alpha(10,0.5), alpha(5,0.5))
breaks = 40
min_valid_sites = 10
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
breaks = 40
min_valid_sites = 100
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
breaks = 40
min_valid_sites = 10
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, add = T, breaks = breaks)
legend("top", legend=names, col=colors, fill = colors)
breaks = 4
hist(H1_islands$prop[H1_islands$`valid sites`>min_valid_sites], col = colors[2], probability = T, breaks = breaks, xlab = "methylation level", main = ("Methylation level on CpG islands"))
hist(stomach_islands$prop[stomach_islands$`valid sites`>min_valid_sites], col = colors[1], probability = T, breaks = breaks, add = T)
legend("top", legend=names, col=colors, fill = colors)
