t = table(actual, prediction)
prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ model_data$msr, data = model_data, family = binomial)
summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ model_data$inverted_msr, data = model_data, family = binomial)
summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("accuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ model_data$inverted_msr, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
model_data = data_table[complete.cases(data_table),]
glm.fit <- glm(model_data$gene_count>0 ~ nucleotides+CpG_density+`meth rate`, data = model_data[, c(essentials)], family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ CpG_density+`meth rate`+msr+inverted_msr+`ecdf(msr, density)`+`inverted ecdf(msr, density)`+residual+inverted_residual, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
model = lm(total_TPM ~ . , data = data_table[, essentials])
summary(model)
model$tol
model = lm(total_TPM ~ . , data = data_table[, essentials])
summary(model)
model = lm(total_TPM ~ . , data = data_table[, c(essentials, msr_predictors)])
summary(model)
data_table <- join_rna_and_msr_tables(stomach_rna_fragment_tables, stomach_fragments_table_discrete, 1)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
data_table
chart.Correlation(data_table[,essentials])
boxplot(table$inverted_msr[gene_0], table$inverted_msr[gene_1], table$inverted_msr[gene_2], names = c("No genes", "one gene", "two genes", "more than 2 genes"), ylab = "inverted MSR")
boxplot(data_table$inverted_msr[gene_0], data_table$inverted_msr[gene_1], data_table$inverted_msr[gene_2], data_table$inverted_msr[gene_many], names = c("No genes", "one gene", "two genes", "more than 2 genes"), ylab = "inverted MSR")
gene_0 = data_table$gene_count==0
gene_1 = data_table$gene_count==1
gene_2 = data_table$gene_count==2
gene_many = data_table$gene_count>2
boxplot(data_table$inverted_msr[gene_0], data_table$inverted_msr[gene_1], data_table$inverted_msr[gene_2], data_table$inverted_msr[gene_many], names = c("No genes", "one gene", "two genes", "more than 2 genes"), ylab = "inverted MSR")
gene_0 = data_table$gene_count==0
gene_1 = data_table$gene_count==1
gene_2 = data_table$gene_count==2
gene_many = data_table$gene_count>2
boxplot(data_table$inverted_msr[gene_0], data_table$inverted_msr[gene_1], data_table$inverted_msr[gene_2], data_table$inverted_msr[gene_many], names = c("No genes", "one gene", "two genes", "more than 2 genes"), ylab = "inverted MSR")
title("Inverted MSR and number of genes")
gene_0 = data_table$gene_count==0
gene_1 = data_table$gene_count==1
gene_2 = data_table$gene_count==2
gene_many = data_table$gene_count>2
boxplot(data_table$inverted_msr[gene_0], data_table$inverted_msr[gene_1], data_table$inverted_msr[gene_2], data_table$inverted_msr[gene_many], names = c("No genes", "one gene", "two genes", "more than 2 genes"), ylab = "inverted MSR")
title("Inverted MSR and number of genes")
gene_0 = data_table$gene_count==0
gene_1 = data_table$gene_count==1
gene_2 = data_table$gene_count==2
gene_many = data_table$gene_count>2
boxplot(data_table$inverted_msr[gene_0], data_table$inverted_msr[gene_1], data_table$inverted_msr[gene_2], data_table$inverted_msr[gene_many], names = c("No genes", "one gene", "two genes", "more than 2 genes"), ylab = "inverted MSR")
title("Inverted MSR and number of genes")
# Logistics Regression
glm.fit <- glm(model_data$total_TPM>0 ~ CpG_density+`meth rate`+msr+inverted_msr+`ecdf(msr, density)`+`inverted ecdf(msr, density)`+residual+inverted_residual, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$total_TPM>0 ~ CpG_density+`meth rate`+msr+inverted_msr+`ecdf(msr, density)`+`inverted ecdf(msr, density)`+residual+inverted_residual, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$total_TPM>0 ~ gene_count+CpG_density+`meth rate`+msr+inverted_msr+`ecdf(msr, density)`+`inverted ecdf(msr, density)`+residual+inverted_residual, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$total_TPM>0 ~ gene_count, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
table(data_table$gene_count>0, data_table$total_TPM>0)
# Logistics Regression
glm.fit <- glm(model_data$total_TPM>0 ~ gene_count>0+CpG_density+`meth rate`+msr+inverted_msr+`ecdf(msr, density)`+`inverted ecdf(msr, density)`+residual+inverted_residual, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
model = lm(total_TPM ~ . + data_table$gene_count>0, data = data_table[, essentials])
model = lm(total_TPM ~ . + data_table, data = data_table[, essentials])
model = lm(total_TPM ~ . , data = data_table[, essentials])
summary(model)
gene_presence = data_table$gene_count>0
model = lm(total_TPM ~ . , data = data_table[gene_presence, c(essentials)])
summary(model)
model = lm(total_TPM ~ . , data = data_table[gene_presence, c(essentials, msr_predictors)])
summary(model)
# Logistics Regression
model_data = data_table[complete.cases(data_table),]
glm.fit <- glm(model_data$gene_count>0 ~ nucleotides+CpG_density+`meth rate`, data = model_data[, c(essentials)], family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ CpG_density+`meth rate`+msr+inverted_msr+`ecdf(msr, density)`+`inverted ecdf(msr, density)`+residual+inverted_residual, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ model_data$inverted_msr, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ ., data = model_data[, c(essentials, "inverted msr")], family = binomial)
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ ., data = model_data[, c(essentials, "inverted_msr")], family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
essentials
# Logistics Regression
glm.fit <- glm(model_data$gene_count>0 ~ nucleotides+CpG_density+`meth rate`+inverted_msr, data = model_data, family = binomial)
#summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = probabilities>0.5
actual = model_data$gene_count>0
t = table(actual, prediction)
prop.table(t)
cat("\naccuracy: ", prop.table(t)[1,1]+prop.table(t)[2,2])
mean(data_table$gene_count>0, na.rm=T)
mean(data_table$gene_count>0, na.rm=T)
mean(data_table$gene_count>0, na.rm=T)
data_table
data_table <- join_rna_and_msr_tables(stomach_rna_fragment_tables, stomach_fragments_table_discrete, 1)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
data_table[complete.cases(data_table), c(4,5,6,7,8,11, 12, 13)]
data_table[complete.cases(data_table), c(4,5,6,7,8,11, 12, 13)]
head(data_table[complete.cases(data_table), c(4,5,6,7,8, 12, 13)])
head(data_table[complete.cases(data_table), c(4,5,6,7,8, 11, 13)])
head(data_table[complete.cases(data_table), c(4,5,6,7,11, 12, 13)])
head(data_table[complete.cases(data_table), c(4,5,7,11, 12, 13)])
head(data_table[complete.cases(data_table), c(4,5,7,11)])
head(data_table[complete.cases(data_table), c(1,2,3,4,5,7,11)])
data_table <- join_rna_and_msr_tables(stomach_rna_fragment_tables, stomach_fragments_table_discrete, 1)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
head(data_table[complete.cases(data_table), c(4,5,6,7,8, 12, 13)])
data_table <- join_rna_and_msr_tables(stomach_rna_fragment_tables, stomach_fragments_table_discrete, 1)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
head(data_table[complete.cases(data_table), c(1,2,3,4,5,7,11)])
colnames(data.table())
colnames(data.table
daoihfaif
colnames(data.table)
colnames(data_table)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=24, fig.height=16)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=30, fig.height=20)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
chart.Correlation(data_table[,essentials], cex = 2)
chart.Correlation(data_table[,essentials], cex = 8)
chart.Correlation(data_table[,essentials], cchgch=90)
chart.Correlation(data_table[,essentials])
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width=20, fig.height=10)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
chart.Correlation(data_table[,c(y, msr_predictors)])
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
chart.Correlation(data_table[,c(y, fancy_msr_predictors)])
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
file_rna_stomach = "MethylationCode/MethylationData/rna-seq/ENCFF918KPC_stomach.tsv"
stomach_rna <- read_rna_file(file_rna_stomach)
load("Rexperiments/stomach_fragments_table.Rdata")
load("Rexperiments/stomach_fragments_table_discrete.Rdata")
load("Rexperiments/stomach_fragments_table_adaptive.Rdata")
load("Rexperiments/stomach_rna_fragment_tables.Rdata")
data_stomach <- readRDS("MethylationCode/MethylationData/wgbs/stomach.Rda")
data_stomach <- sum_strands(data_stomach)
#################################################################################################
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
data_H1 <- sum_strands(readRDS("../../MethylationCode/MethylationData/wgbs/H1.Rda"))
data_K562 <- sum_strands(readRDS("../../MethylationCode/MethylationData/wgbs/K562.Rda"))
cgi_anno <- readRDS("../../Rexperiments/cgi_improved.Rda")
cgi_anno
110/(29737-28735)
sum(is.infinite(cgi_anno$i_start))
cgi_anno <- cgi_anno(is.infinite(cgi_anno$i_start))
cgi_anno <- cgi_anno[!is.infinite(cgi_anno$i_start), ]
cgi_anno <- cgi_anno[!is.infinite(cgi_anno$i_end), ]
cgi_anno
isl_vec = rep_len(F, length(data_H1$prop))
isl_vec
isl_vec = rep_len(F, length(data_H1$prop))
l = length(cgi_anno$i_start)
st = cgi_anno$i_start
en = cgi_anno$i_end
for(i in 1:l)
{
isl_vec[st[i]:en[i]] = T
}
l
isl_vec
hist(data_H1$prop[isl_vec]-data_K562$prop[isl_vec])
min_reads = 10
hist(data_H1[reads>min_reads, ]$prop[isl_vec]-data_K562[reads>min_reads, ]$prop[isl_vec])
min_reads = 10
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
min_reads = 3
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
min_reads = 1
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
min_reads = 0
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
data_H1[reads==0]
min_reads = 1
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
min_reads = 100
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
min_reads = 10
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
min_reads = 20
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
min_reads = 30
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
sum(reads_mask)
min_reads = 1
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
sum(reads_mask)
min_reads = 50
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
min_reads = 50
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
hist(data_H1[reads_mask, ]$prop[isl_vec]-data_K562[reads_mask, ]$prop[isl_vec])
length(isl_vec)
min_reads = 10
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
island_mask = isl_vec
hist(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)
min_reads = 20
reads_mask = (data_H1$reads >= min_reads) & (data_K562$reads >= min_reads)
island_mask = isl_vec
hist(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)
min_reads = 10
mean(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)
island_mask = !isl_vec
hist(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)
mean(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)
hist(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop, breaks = 100)
hist(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop, breaks = 50)
island_mask = isl_vec
hist(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop, breaks = 50)
hist(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop, breaks = 100)
plot(data_H1[reads_mask & island_mask, ]$prop)
sum(island_mask)
sum(island_mask)/length(island_mask)
plot(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask)[1:1000], ]$prop)
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:10])
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:100])
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:1000])
island_mask = !isl_vec
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:1000])
island_mask = isl_vec
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:1000])
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:10000])
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:10000], pch = ".")
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:5000], pch = ".")
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:1000], pch = ".")
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:1000], pch = "+")
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:1000], pch = "+", ))
plot((data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:1000], pch = "+", )
plot(approxfun(data_H1[reads_mask & island_mask, ]$prop-data_K562[reads_mask & island_mask, ]$prop)[1:1000], pch = "+", )
approxfun(y = c(1,2,3,4,4,4,5,6,7,8,5,0,0,0))
approxfun(x = 1:15, y = c(1,2,3,4,4,4,5,6,7,8,5,0,0,0))
approxfun(x = 1:14, y = c(1,2,3,4,4,4,5,6,7,8,5,0,0,0))
f = approxfun(x = 1:14, y = c(1,2,3,4,4,4,5,6,7,8,5,0,0,0))
curve(f)
curve(x)
curve(expr = f(x))
curve(expr = X+4X
curve(expr = x^2)
f(2)
f(4)
f(9)
f(12)
curve(expr = f(x))
curve(expr = f(x), from = 0, to = 10)
splinefun(x = 1:14, y = c(1,2,3,4,4,4,5,6,7,8,5,0,0,0))
f = splinefun(x = 1:14, y = c(1,2,3,4,4,4,5,6,7,8,5,0,0,0))
curve(expr = f(x), from = 0, to = 10)
d1 = data_H1
d2 = data_K562
name1 = "H1"
name2 = "K562"
min_reads = 10
island_mask = isl_vec
reads_mask = (d1$reads >= min_reads) & (d2$reads >= min_reads)
d1p = d1[reads_mask & island_mask, ]$prop
d2p = d2[reads_mask & island_mask, ]$prop
hist(d1p-d2p, breaks = 100)
hist(d1p-d2p, breaks = 70)
hist(d1p-d2p, breaks = 50)
hist(diff, breaks = 50, xlab = sprintf("methylation difference: $s - $s", name1,name2), main = "")
hist(diff, breaks = 50, xlab = sprintf("methylation difference: %s - %s", name1, name2), main = "")
hist(diff, breaks = 50, main = "")
diff = d1p-d2p
hist(diff, breaks = 50, main = "")
hist(diff, breaks = 50, main = "",, xlab = sprintf("methylation difference: %s - %s", name1, name2))
hist(diff, breaks = 50, main = "", xlab = sprintf("CpG site level methylation difference: %s - %s", name1, name2))
hist(diff, breaks = 50, main = "methylation difference in CG sites belonging to CpG island", xlab = sprintf("%s - %s", name1, name2))
hist(diff, breaks = 50, main = "Methylation difference in CG sites belonging to CpG island", xlab = sprintf("%s - %s", name1, name2))
hist(diff, breaks = 50, main = "Methylation difference in CG sites belonging to CpG island", xlab = sprintf("%s - %s", name1, name2), col = 5)
diff_spline = splinefun(1:length(diff), diff)
curve(from = 0, to = 10, diff_spline(x))
curve(from = 0, to = 100, diff_spline(x))
curve(from = 0, to = 1000, diff_spline(x))
curve(from = 0, to = 10000, diff_spline(x))
plot(diff[400:500])
plot(diff[400:1500])
plot(diff[1000:1500])
plot(diff[2000:2500])
diff_spline = splinefun(1:length(diff), diff)
curve(from = 0, to = 10000, diff_spline(x))
diff_spline = splinefun(1:length(diff), diff, )
curve(from = 0, to = 10000, diff_spline(x))
plot(diff[2000:2500])
plot(diff[0:1e3])
diff_spline = splinefun(1:length(diff), diff, )
curve(from = 0, to = 10000, diff_spline(x))
plot(diff[0:1e3])
curve(from = 0, to = 10000, diff_spline(x))
plot(diff[0:1e3])
curve(from = 0, to = 10000, diff_spline(x))
plot(diff[0:1e3], type = "l")
min_reads = 10
island_mask = !isl_vec
reads_mask = (d1$reads >= min_reads) & (d2$reads >= min_reads)
d1p = d1[reads_mask & island_mask, ]$prop
d2p = d2[reads_mask & island_mask, ]$prop
diff = d1p-d2p
hist(diff, breaks = 50, main = "Methylation difference in CG sites belonging to CpG island", xlab = sprintf("%s - %s", name1, name2), col = 5)
plot(diff[0:1e3], type = "l")
diff_spline = splinefun(1:length(diff), diff, )
curve(from = 0, to = 10000, diff_spline(x))
curve(from = 0, to = 10000, diff_spline(x), n = 1000)
diff_spline = splinefun(1:length(diff), diff, n = 1000)
plot(diff[0:1e3], type = "l")
min_reads = 10
island_mask = !isl_vec
reads_mask = (d1$reads >= min_reads) & (d2$reads >= min_reads)
d1p = d1[reads_mask & island_mask, ]$prop
d2p = d2[reads_mask & island_mask, ]$prop
diff = d1p-d2p
hist(diff, breaks = 50, main = "Methylation difference in CG sites belonging to CpG island", xlab = sprintf("%s - %s", name1, name2), col = 5)
hist(diff, breaks = 50, main = "Methylation difference in CG sites outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 5)
par(mfrow=c(2,1))
hist(diff, breaks = 50, main = "Methylation difference in CG sites outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 5)
plot(diff[0:1e3], type = "l")
par(mfrow=c(1,2))
hist(diff, breaks = 50, main = "Methylation difference in CG sites outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 5)
island_mask = isl_vec
reads_mask = (d1$reads >= min_reads) & (d2$reads >= min_reads)
d1p = d1[reads_mask & island_mask, ]$prop
d2p = d2[reads_mask & island_mask, ]$prop
diff = d1p-d2p
hist(diff, breaks = 50, main = "Methylation difference in CG sites belonging to CpG island", xlab = sprintf("%s - %s", name1, name2), col = "yellow")
par(mfrow=c(2,1))
island_mask = !isl_vec
reads_mask = (d1$reads >= min_reads) & (d2$reads >= min_reads)
d1p = d1[reads_mask & island_mask, ]$prop
d2p = d2[reads_mask & island_mask, ]$prop
diff = d1p-d2p
hist(diff, breaks = 50, main = "Methylation difference in CG sites belonging to CpG island", xlab = sprintf("%s - %s", name1, name2), col = "yellow")
plot(diff[0:1e3], type = "l")
plot(diff[0:1e3], type = "l")
plot(diff[0:1e3], type = "l", main = "outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 5)
plot(diff[0:1e3], type = "l", main = "outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 1)
lines(x = c(-1, 1e7), y = c(0,0), lty = 2, col = "red")
lines(x = c(-1, 1e7), y = c(50,50), lty = 2, col = "orange")
lines(x = c(-1, 1e7), y = c(-50,-50), lty = 2, col = "orange")
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = "orange", alpha = 0.5)
lines(x = c(-100, 1e7), y = c(0,0), lty = 2, col = "red")
lines(x = c(-100, 1e7), y = c(50,50), lty = 2, col = "orange")
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = "orange")
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = alpha("orange", 0.4))
plot(diff[0:1e3], type = "l", main = "outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 1)
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = alpha("orange", 0.4))
plot(diff[0:1e3], type = "l", main = "outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 1)
plot(diff[0:1e3], type = "l", main = "outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 1)
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = alpha("orange", 0.4))
lines(x = c(-100, 1e7), y = c(0,0), lty = 2, col = alpha("red", 0.5))
lines(x = c(-100, 1e7), y = c(50,50), lty = 2, col = alpha("orange", 0.4))
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = alpha("orange", 0.4))
plot(diff[0:1e3], type = "l", main = "outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 1)
lines(x = c(-100, 1e7), y = c(0,0), lty = 2, col = alpha("red", 0.5))
lines(x = c(-100, 1e7), y = c(50,50), lty = 2, col = alpha("orange", 0.4))
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = alpha("orange", 0.4))
plot(diff[0:1e3], type = "l", main = "outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 1)
lines(x = c(-100, 1e7), y = c(0,0), lty = 2, col = alpha("red", 0.7))
lines(x = c(-100, 1e7), y = c(50,50), lty = 2, col = alpha("orange", 0.7))
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = alpha("orange", 0.7))
plot(diff[0:1e3], type = "l", main = "outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 1)
lines(x = c(-100, 1e7), y = c(0,0), lty = 2, col = alpha("red", 0.7))
lines(x = c(-100, 1e7), y = c(50,50), lty = 2, col = alpha("orange", 0.7))
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = alpha("orange", 0.7))
par(mfrow=c(2,1))
min_reads = 10
island_mask = !isl_vec
reads_mask = (d1$reads >= min_reads) & (d2$reads >= min_reads)
d1p = d1[reads_mask & island_mask, ]$prop
d2p = d2[reads_mask & island_mask, ]$prop
diff = d1p-d2p
plot(diff[0:1e3], type = "l", main = "outside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 1)
lines(x = c(-100, 1e7), y = c(0,0), lty = 2, col = alpha("red", 0.7))
lines(x = c(-100, 1e7), y = c(50,50), lty = 2, col = alpha("orange", 0.7))
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = alpha("orange", 0.7))
island_mask = isl_vec
reads_mask = (d1$reads >= min_reads) & (d2$reads >= min_reads)
d1p = d1[reads_mask & island_mask, ]$prop
d2p = d2[reads_mask & island_mask, ]$prop
diff = d1p-d2p
plot(diff[0:1e3], type = "l", main = "inside CpG island", xlab = sprintf("%s - %s", name1, name2), col = 1)
lines(x = c(-100, 1e7), y = c(0,0), lty = 2, col = alpha("red", 0.7))
lines(x = c(-100, 1e7), y = c(50,50), lty = 2, col = alpha("orange", 0.7))
lines(x = c(-100, 1e7), y = c(-50,-50), lty = 2, col = alpha("orange", 0.7))
