gene_presence = data_table$gene_count>0
standard_predictors <- c(to_predict, basic_predictors, "gene_count", "genes_nucleotides_count", "msr_density")
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[gene_presence,standard_predictors])
#model_data = model_data[complete.cases(model_data),]
model = lm(log_tpm ~ . , data = model_data)
summary(model)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[gene_presence, c(standard_predictors, msr_predictors)])
model = lm(log_tpm ~ . , model_data)
summary(model)
hist((model$fitted.values-model$model$log_tpm), main = "Error distribution compared with centered data", breaks = 50, xlab= "prediction-actual", probability = F, col = alpha(5, 1))
hist(model$model$log_tpm-mean(model$model$log_tpm), breaks = 50, xlab= "log(tpm)", col = alpha(2, 0.4), probability = F, add=T)
colors = c(alpha(5, 0.5), alpha(2, 0.5))
legend("right", col = colors, legend = c("prediction error","centered log(tpm)"), fill = colors)
model = lm(log_tpm ~ . , model_data[, c(to_predict, basic_predictors, msr_predictors, "msr_density")])
summary(model)
meth_rate = model_data$`meth rate`
model = lm(log_tpm ~ (model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count) + (model_data$msr), data = model_data)
summary(model)
meth_rate = model_data$`meth rate`
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model = lm(log_tpm ~ (model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count) + (model_data$msr), data = model_data)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
meth_rate = model_data$`meth rate`
model = lm(log_tpm ~ (model_data$inverted_msr) + (model_data$CpG_density) + (meth_rate) + (model_data$gene_count) + (model_data$msr), data = model_data)
summary(model)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
meth_rate = model_data$`meth rate`
model = lm(log_tpm ~ ., data = model_data[,c(standard_predictors, "msr", "inverted_msr")])
summary(model)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
meth_rate = model_data$`meth rate`
model = lm(log_tpm ~ ., data = model_data[,c(standard_predictors, "inverted_msr")])
summary(model)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model = lm(log_tpm ~ ., data = model_data[,c(standard_predictors, "inverted_msr")])
summary(model)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
#load("Rexperiments/H1_fragments_table_stoc_V2.Rdata")
#load("Rexperiments/H1_fragments_table_discrete_V2.Rdata")
#load("Rexperiments/H1_fragments_table_adaptive_V2.Rdata")
#load("Rexperiments/K562_fragments_table_stoc_V2.Rdata")
#load("Rexperiments/K562_fragments_table_discrete_V2.Rdata")
#load("Rexperiments/K562_fragments_table_adaptive_V2.Rdata")
#load("Rexperiments/stomach_fragments_table_stoc_V2.Rdata")
load("Rexperiments/stomach_fragments_table_discrete_V2.Rdata")
#load("Rexperiments/stomach_fragments_table_adaptive_V2.Rdata")
genebody = readRDS("Rexperiments/genebody_improved.Rda")
#########################
y <- c("gene_count", "log_tpm")
basic_predictors <- c("nucleotides", "CpG_density", "meth rate")
essentials <- c(y, basic_predictors)
essential_msr_predictors <- c("msr", "inverted_msr")
fancy_msr_predictors <- c("ecdf", "inverted ecdf", "residual", "inverted_residual")
msr_predictors <- c(essential_msr_predictors, fancy_msr_predictors)
setwd(dir = "../../../")
rna <- read_rna_file("MethylationCode/MethylationData/rna-seq/ENCFF918KPC_stomach.tsv")
#data <- sum_strands(readRDS("MethylationCode/MethylationData/wgbs/stomach.Rda"))
msr_fragments_table = stomach_fragments_table_discrete
rna_fragment_tables = readRDS("Rexperiments/stomach_rna_fragment_tables.Rda")
wsize = 2
#########################
#stomach_rna
rna[nchar(gene_id)>6]
genebody[,c(1,2,3,4,5,6)]
data_table <- join_rna_and_msr_tables(rna_fragment_tables, msr_fragments_table, wsize)
#data_table <- exclude_outliers(data_table, lim = 2.5e5)
data_table$log_tpm[data_table$gene_count==0] = NA
data_table$log_std_tpm[is.infinite(data_table$log_std_tpm)] = NA
#data_table$log_std_tpm = data_table$log_std_tpm + log(data_table$gene_count-1) - log(data_table$gene_count)
data_table[data_table$gene_count>0, ]$std_TPM = data_table[data_table$gene_count>0, ]$std_TPM * sqrt((data_table[data_table$gene_count>0, ]$gene_count-1)/ (data_table[data_table$gene_count>0, ]$gene_count))
data_table <- exclude_outliers(data_table, lim = 2.5e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
chart.Correlation(data_table[,essentials])
#mi.plot(data_table[,essentials])
chart.Correlation(data_table[,c(essentials, essential_msr_predictors, "msr_density")])
#mi.plot(data_table[,c(essentials, essential_msr_predictors)])
chart.Correlation(data_table[,c(y, fancy_msr_predictors)])
#mi.plot(data_table[,c(y, fancy_msr_predictors)])
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
(ggplot(data_table,aes(x=inverted_msr,y=log_tpm))) + geom_point(alpha = 0.1) + ggtitle("inverted msr vs log(tpm)")
cor.test(data_table$total_TPM, data_table$std_TPM)$estimate
((ggplot(data_table,aes(x=log_tpm,y=log_std_tpm), xlim=c(-5, 5), ylim = c(-5, 5)) + geom_point(alpha = 0.1))) + geom_abline(col = 2 ) + ggtitle("log(tpm) msr vs log(std(tpm))")
(ggplot(data_table,aes(x=inverted_msr,y=gene_count)) + geom_point(alpha = 0.08, col = "dark blue")) +ggtitle("inverted msr vs gene number")
hist(data_table$gene_count, main = sprintf("number of genes in a fragment, mean: %s", round(mean(data_table$gene_count,na.rm = T),2)), xlab = "genes count")
library("MASS")
# Logistics Regression
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[, c("nucleotides", "CpG_density", "meth rate", "gene_count", "msr_density")])
glm.fit <- glm.nb(model_data$gene_count ~ nucleotides+CpG_density+`meth rate`+msr_density, data = model_data)
summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = (probabilities)
actual = model_data$gene_count
#plot(prediction-actual, col = alpha(1, 0.2))
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[, c("inverted_msr", "gene_count")])
glm.fit <- glm.nb(model_data$gene_count ~ model_data$inverted_msr , data = model_data)
summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = (probabilities)
actual = model_data$gene_count
#plot(prediction-actual, col = alpha(1, 0.2))
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[, c("gene_count", basic_predictors, msr_predictors)])
model_data = model_data[complete.cases(model_data),]
glm.fit <- glm.nb(gene_count ~ . , data = model_data)
summary(glm.fit)
probabilities = predict(glm.fit, type="response")
probabilities = (probabilities)
actual = model_data$gene_count
hist(abs(prediction-actual), main = "Error distribution compared with data", breaks = 50, xlab= "prediction-actual", probability = T, col = alpha(5, 0.7))
hist(actual, main = "error distribution", breaks = 50, xlab= "gene_count", col = alpha(2, 0.5), probability = T, add=T)
#hist(prediction-actual, col = alpha(1, 0.4), main = "error distribution", breaks = 50, xlab= "prediction-actual")
colors = c(alpha(5, 0.5), alpha(2, 0.5))
legend("right", col = colors, legend = c("prediction error","gene count"), fill = colors)
hist(data_table[data_table$gene_count>0,]$log_tpm, xlab = "log(TPM)", main = "", breaks = 50)
to_predict = "log_tpm"
gene_presence = data_table$gene_count>0
standard_predictors <- c(to_predict, basic_predictors, "gene_count", "genes_nucleotides_count", "msr_density")
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[gene_presence,standard_predictors])
#model_data = model_data[complete.cases(model_data),]
model = lm(log_tpm ~ . , data = model_data)
summary(model)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[gene_presence, c(standard_predictors, msr_predictors)])
model = lm(log_tpm ~ . , model_data)
summary(model)
hist((model$fitted.values-model$model$log_tpm), main = "Error distribution compared with centered data", breaks = 50, xlab= "prediction-actual", probability = F, col = alpha(5, 1))
hist(model$model$log_tpm-mean(model$model$log_tpm), breaks = 50, xlab= "log(tpm)", col = alpha(2, 0.4), probability = F, add=T)
colors = c(alpha(5, 0.5), alpha(2, 0.5))
legend("right", col = colors, legend = c("prediction error","centered log(tpm)"), fill = colors)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[gene_presence, c(standard_predictors, msr_predictors)])
model = lm(log_tpm ~ . , model_data)
summary(model)
hist((model$fitted.values-model$model$log_tpm), main = "Error distribution compared with centered data", breaks = 100, xlab= "prediction-actual", probability = F, col = alpha(5, 1))
hist(model$model$log_tpm-mean(model$model$log_tpm), breaks = 50, xlab= "log(tpm)", col = alpha(2, 0.4), probability = F, add=T)
colors = c(alpha(5, 0.5), alpha(2, 0.5))
legend("right", col = colors, legend = c("prediction error","centered log(tpm)"), fill = colors)
model = lm(log_tpm ~ . , model_data[, c(to_predict, basic_predictors, msr_predictors, "msr_density")])
summary(model)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model = lm(log_tpm ~ ., data = model_data[,c(standard_predictors, "inverted_msr")])
summary(model)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
#load("Rexperiments/H1_fragments_table_stoc_V2.Rdata")
#load("Rexperiments/H1_fragments_table_discrete_V2.Rdata")
#load("Rexperiments/H1_fragments_table_adaptive_V2.Rdata")
#load("Rexperiments/K562_fragments_table_stoc_V2.Rdata")
#load("Rexperiments/K562_fragments_table_discrete_V2.Rdata")
#load("Rexperiments/K562_fragments_table_adaptive_V2.Rdata")
#load("Rexperiments/stomach_fragments_table_stoc_V2.Rdata")
load("Rexperiments/stomach_fragments_table_discrete_V2.Rdata")
#load("Rexperiments/stomach_fragments_table_adaptive_V2.Rdata")
genebody = readRDS("Rexperiments/genebody_improved.Rda")
#########################
y <- c("gene_count", "log_tpm")
basic_predictors <- c("nucleotides", "CpG_density", "meth rate")
essentials <- c(y, basic_predictors)
essential_msr_predictors <- c("msr", "inverted_msr")
fancy_msr_predictors <- c("ecdf", "inverted ecdf", "residual", "inverted_residual")
msr_predictors <- c(essential_msr_predictors, fancy_msr_predictors)
setwd(dir = "../../../")
rna <- read_rna_file("MethylationCode/MethylationData/rna-seq/ENCFF918KPC_stomach.tsv")
#data <- sum_strands(readRDS("MethylationCode/MethylationData/wgbs/stomach.Rda"))
msr_fragments_table = stomach_fragments_table_discrete
rna_fragment_tables = readRDS("Rexperiments/stomach_rna_fragment_tables.Rda")
wsize = 3
#########################
#stomach_rna
rna[nchar(gene_id)>6]
genebody[,c(1,2,3,4,5,6)]
data_table <- join_rna_and_msr_tables(rna_fragment_tables, msr_fragments_table, wsize)
#data_table <- exclude_outliers(data_table, lim = 2.5e5)
data_table$log_tpm[data_table$gene_count==0] = NA
data_table$log_std_tpm[is.infinite(data_table$log_std_tpm)] = NA
#data_table$log_std_tpm = data_table$log_std_tpm + log(data_table$gene_count-1) - log(data_table$gene_count)
data_table[data_table$gene_count>0, ]$std_TPM = data_table[data_table$gene_count>0, ]$std_TPM * sqrt((data_table[data_table$gene_count>0, ]$gene_count-1)/ (data_table[data_table$gene_count>0, ]$gene_count))
data_table <- exclude_outliers(data_table, lim = 2.5e7)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
chart.Correlation(data_table[,essentials])
chart.Correlation(data_table[,c(essentials, essential_msr_predictors)])
cor.test(data_table$total_TPM, data_table$std_TPM)$estimate
(ggplot(data_table,aes(x=inverted_msr,y=gene_count)) + geom_point(alpha = 0.5, col = "dark blue")) +ggtitle("inverted msr vs gene number")
hist(data_table$gene_count, main = sprintf("number of genes in a fragment, mean: %s", round(mean(data_table$gene_count,na.rm = T),2)), xlab = "genes count")
library("MASS")
# Logistics Regression
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[, c("nucleotides", "CpG_density", "meth rate", "gene_count", "msr_density")])
model_data = model_data[complete.cases(model_data),]
glm.fit <- glm.nb(model_data$gene_count ~ nucleotides+CpG_density+`meth rate`+msr_density, data = model_data)
summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = (probabilities)
actual = model_data$gene_count
#plot(prediction-actual, col = alpha(1, 0.2))
library("MASS")
# Logistics Regression
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[, c("nucleotides", "CpG_density", "meth rate", "gene_count", "msr_density")])
model_data = model_data[complete.cases(model_data),]
glm.fit <- glm.nb(model_data$gene_count ~ nucleotides+CpG_density+`meth rate`+msr_density, data = model_data)
summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = (probabilities)
actual = model_data$gene_count
#plot(prediction-actual, col = alpha(1, 0.2))
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[, c("inverted_msr", "gene_count")])
glm.fit <- glm.nb(model_data$gene_count ~ model_data$inverted_msr , data = model_data)
summary(glm.fit)
probabilities = predict(glm.fit, type="response")
prediction = (probabilities)
actual = model_data$gene_count
#plot(prediction-actual, col = alpha(1, 0.2))
hist(abs(prediction-actual), main = "Error distribution compared with data", breaks = 50, xlab= "prediction-actual", probability = T, col = alpha(5, 0.7))
hist(actual, main = "error distribution", breaks = 50, xlab= "gene_count", col = alpha(2, 0.5), probability = T, add=T)
#hist(prediction-actual, col = alpha(1, 0.4), main = "error distribution", breaks = 50, xlab= "prediction-actual")
colors = c(alpha(5, 0.7), alpha(2, 0.5))
legend("right", col = colors, legend = c("prediction error","gene count"), fill = colors)
hist(data_table[data_table$gene_count>0,]$log_tpm, xlab = "log(TPM)", main = "", breaks = 25)
to_predict = "log_tpm"
gene_presence = data_table$gene_count>0
standard_predictors <- c(to_predict, basic_predictors, "gene_count", "genes_nucleotides_count", "msr_density")
model_data = (data_table[gene_presence,standard_predictors])
#model_data = model_data[complete.cases(model_data),]
model = lm(log_tpm ~ . , data = model_data)
summary(model)
to_predict = "log_tpm"
gene_presence = data_table$gene_count>0
standard_predictors <- c(to_predict, basic_predictors, "gene_count", "genes_nucleotides_count", "msr_density")
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model_data = (model_data[gene_presence,standard_predictors])
#model_data = model_data[complete.cases(model_data),]
model = lm(log_tpm ~ . , data = model_data)
summary(model)
model_data = (data_table[gene_presence, c(standard_predictors, msr_predictors)])
model = lm(log_tpm ~ . , model_data)
summary(model)
hist((model$fitted.values-model$model$log_tpm), main = "Error distribution compared with centered data", breaks = 20, xlab= "prediction-actual", probability = F, col = alpha(5, 1), xlim = c(-2,3), ylim = c(0,48))
hist(model$model$log_tpm-mean(model$model$log_tpm), breaks = 25, xlab= "log(tpm)", col = alpha(2, 0.4), probability = F, add=T)
colors = c(alpha(5, 0.5), alpha(2, 0.5))
legend("right", col = colors, legend = c("prediction error","centered log(tpm)"), fill = colors)
model = lm(log_tpm ~ . , model_data[, c(to_predict, basic_predictors, msr_predictors, "msr_density")])
summary(model)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model = lm(log_tpm ~ . , model_data[, c(to_predict, basic_predictors, msr_predictors, "msr_density")])
summary(model)
model_data = data_table[complete.cases(data_table[,msr_predictors]),]
model = lm(log_tpm ~ ., data = model_data[,c(standard_predictors, "inverted_msr")])
summary(model)
model_data = (model_data[, c("inverted_msr", "gene_count")])
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
genebody <- readRDS("Rexperiments/genebody_improved.Rda")
names <- c("left_ventricle", "ovary", "stomach", "lung", "gm23248")
rna_files <- c("MethylationCode/MethylationData/rna-seq/ENCFF860DPP_left_ventricle_male_34.tsv",
"MethylationCode/MethylationData/rna-seq/ENCFF061BJL_ovary_53_gene_quantifications.tsv",
"MethylationCode/MethylationData/rna-seq/ENCFF918KPC_stomach.tsv",
"MethylationCode/MethylationData/rna-seq/ENCFF947WLV_lung_30_gene_quantifications.tsv",
"MethylationCode/MethylationData/rna-seq/ENCFF775DYT_gm23248_polyA.tsv")
wgbs_files <- c("MethylationCode/MethylationData/wgbs/ENCFF536RSX_left_ventricle_male_34.rda",
"MethylationCode/MethylationData/wgbs/ENCFF303ZGP_ovary_53_female.rda",
"MethylationCode/MethylationData/wgbs/stomach.Rda",
"MethylationCode/MethylationData/wgbs/ENCFF039JFT_lung_30_female.rda",
"MethylationCode/MethylationData/wgbs/ENCFF752NXS_GM23248.rda")
setwd(dir = "../../../")
wgbs_data <- lapply(wgbs_files, function(x){sum_strands(readRDS(x))})
wgbs_data <- lapply(wgbs_data, function(x){(x$prop)})
wgbs_data <- data.frame(wgbs_data)
colnames(wgbs_data) <- names
gc()
#########################
f <- function(a,b) {std(a-b)}
f(wgbs_data[1:100, 1], wgbs_data[1:100, 2])
gc()
wgbs_data[1:100, 1]
f <- function(a,b) {std(a-b, na.rm=T)}
wgbs_data[1:100, 1]-wgbs_data[1:100, 2]
(wgbs_data[1:100, 1]>=50)-(wgbs_data[1:100, 2]>=50)
mean((wgbs_data[1:100, 1]>=50)-(wgbs_data[1:100, 2]>=50), na.rm=T)
mean((wgbs_data[1:1000, 1]>=50)-(wgbs_data[1:1000, 2]>=50), na.rm=T)
mean((wgbs_data[1:1e5, 1]>=50)-(wgbs_data[1:1e5, 2]>=50), na.rm=T)
(wgbs_data[1:1e5, 1]>=50)-(wgbs_data[1:1e5, 2]>=50)
samples <- sample(wgbs_data, 1e3, replace = F)
samples <- sample(1:length(wgbs_data[,1]), 1e3, replace = F)
(wgbs_data[samples, 1]>=50)-(wgbs_data[samples, 2]>=50)
f <- function(a,b) {std(a-b, na.rm=T)}
pairwise.plot(wgbs_data[1:10], f)
f <- function(a,b) {std(a-b, na.rm=T)}
pairwise.plot(wgbs_data[1:10, ], f)
std(1:10, na.rm=T)
std(1:10)
std(c(NA, 2,2))
mean(c(NA, 2,2))
f <- function(a,b) {std(na.omit(a-b))}
pairwise.plot(wgbs_data[1:10, ], f)
na.omit(c(1,Na,3))
na.omit(c(1,NA,3))
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[1:10, ], f)
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[1:10], f)
wgbs_data[1:10]
wgbs_data
wgbs_data[1:10, ]
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[1:10, ], f)
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[1:10, ]>=50, f)
bj
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[1:100, ]>=50, f)
View(wgbs_data)
complete.cases(wgbs_data)
n <- 1e3
rows <- sample(1:length(wgbs_data)[complete.cases(wgbs_data)], n, replace = F)
n <- 1e3
rows <- sample((1:length(wgbs_data))[complete.cases(wgbs_data)], n, replace = F)
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[rows, ]>=50, f)
rows
n <- 1e3
rows <- sample((1:length(wgbs_data[,1]))[complete.cases(wgbs_data)], n, replace = F)
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[rows, ]>=50, f)
n <- 1e3
rows <- sample((1:length(wgbs_data[,1]))[complete.cases(wgbs_data)], n, replace = F)
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[rows, ]>=50, f)
n <- 1e4
rows <- sample((1:length(wgbs_data[,1]))[complete.cases(wgbs_data)], n, replace = F)
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[rows, ]>=50, f)
n <- 1e4
rows <- sample((1:length(wgbs_data[,1]))[complete.cases(wgbs_data)], n, replace = F)
f <- function(a,b) {mean(abs(a-b)*100, na.rm = T)}
pairwise.plot(wgbs_data[rows, ]>=50, f)*100
n <- 1e4
rows <- sample((1:length(wgbs_data[,1]))[complete.cases(wgbs_data)], n, replace = F)
f <- function(a,b) {mean(abs(a-b), na.rm = T)}
pairwise.plot(wgbs_data[rows, ]>=50, f)*100
setwd(dir = "../../../")
rna_data <- lapply(rna_files, read_rna_file)
rna_data <- lapply(rna_data, function(x) {x[x$gene_id %in% genebody$id]})
rna_data <- lapply(rna_data, function(x) {x[!duplicated(x$gene_id), ]})
g = rna_data[[1]]$gene_id
for(x in rna_data)
{
g = intersect(g, x$gene_id)
}
rna_data <- lapply(rna_data, function(x) {x[x$gene_id %in% g,TPM]})
#rna_data <- lapply(rna_data, function(x) {x$TPM})
rna_data <- data.frame(rna_data)
colnames(rna_data) <- names
rna_data <- log(rna_data+1e-3)
gc()
#########################
corrplot(cor(na.omit(rna_data)),  method = "number")
setwd(dir = "../../../")
wgbs_data <- lapply(wgbs_files, function(x){sum_strands(readRDS(x))})
gc()
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
((ggplot(data_table,aes(x=residual,y=log_tpm)) + geom_point(alpha = 0.03)))
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(fig.width=20, fig.height=12)
#setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
#source("Methylation-project/Code/expression_and_msr_experiment.R", chdir = T)
library("PerformanceAnalytics")
setwd(dir = "../../../")
source("Methylation-project/Code/WGBS_analysis_functions.R", chdir = T)
##########################
genebody = readRDS("Rexperiments/genebody_improved.Rda")
##########################
y <- c("gene_count", "log_tpm")
basic_predictors <- c("nucleotides", "CpG_density", "meth rate", "msr_density")
essentials <- c(y, basic_predictors)
essential_msr_predictors <- c("msr", "inverted_msr")
fancy_msr_predictors <- c("ecdf", "inverted ecdf", "residual", "inverted_residual")
msr_predictors <- c(essential_msr_predictors, fancy_msr_predictors)
setwd(dir = "../../../")
rna <- read_rna_file("MethylationCode/MethylationData/rna-seq/ENCFF775DYT_gm23248_polyA.tsv")
msr_fragments_table = readRDS("Rexperiments/ENCFF752NXS_GM23248_msr_table_1000.Rda")
rna_fragment_table = readRDS("Rexperiments/ENCFF775DYT_gm23248_rna_table_1000.Rda")
#########################
#gm23248_rna
rna[nchar(gene_id)>6]
genebody[,c(1,2,3,4,5,6)]
data_table <- join_rna_and_msr_table(rna_fragment_table, msr_fragments_table)
data_table <- exclude_outliers(data_table, lim = 2.5e5)
data_table$log_tpm[data_table$gene_count==0] = NA
#data_table <- exclude_outliers(data_table, lim = 2e6)
head(data_table[complete.cases(data_table), c(1,2,3,5,7,11)])
chart.Correlation(data_table[,essentials])
chart.Correlation(data_table[,c(essentials, essential_msr_predictors)])
chart.Correlation(data_table[,c(y, fancy_msr_predictors)])
library(ggplot2)
library(ggExtra)
#plot(data_table$inverted_msr, data_table$log_tpm, pch = )
#ggplot(data_table,aes(x=inverted_msr,y=log_tpm)) + stat_binhex(bins = 20) + scale_fill_viridis_c() + geom_point(shape = '.', col = 'white')
((ggplot(data_table,aes(x=residual,y=log_tpm)) + geom_point(alpha = 0.03)))
gc()
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
msr_ecdf_1e3 = readRDS("../../MethylationCode/MethylationData/msr_ecdf_1e3.Rda")
msr_ecdf_1e4 = readRDS("../../MethylationCode/MethylationData/msr_ecdf_1e4.Rda")
msr_ecdf_1e5 = readRDS("../../MethylationCode/MethylationData/msr_ecdf_1e5.Rda")
msr_ecdf_1e6 = readRDS("../../MethylationCode/MethylationData/msr_ecdf_1e6.Rda")
gc()
# read rda file
wgbs <- sum_strands(readRDS(new_name))
# produce msr table
size <- 1e3
msr_ecdf_ref <- msr_ecdf_1e3
methylation_assigner <- standard_binaryzer
na_tolerance <- 0.1
minimum_reads <- 1
rr_table <- total_spatial_experiment(c(new_name), c(size), c(F,T), c(short_name), methylation_assigner, na_tolerance, F, minimum_reads)
start = rr_table[[1]][[1]]$data$fragments_infos_array[,1]
msr_density = rr_table[[1]][[1]]$data$fragments_infos_array[,2]
true_density = sapply(start, function(x){mean(wgbs$prop[x:(x+size)], na.rm = T)})/100
msr = rr_table[[1]][[1]]$data$fragments_infos_array[,3]
inverted_msr = rr_table[[2]][[1]]$data$fragments_infos_array[,3]
sig <- significance_measure(msr, msr_density, msr_ecdf_ref, inverted = F)
inverted_sig <- significance_measure(inverted_msr, msr_density, msr_ecdf_ref, inverted = T)
median_function <- extract_ecdf_function(msr_ecdf_ref, 0.5)
residual <- msr-median_function(msr_density)
inverted_residual <- inverted_msr-median_function(1-msr_density)
# save msr tables
msr_table = data.frame(start,msr_density,true_density,msr,inverted_msr, sig, inverted_sig, residual, inverted_residual)
saveRDS(msr_table, file = paste("../../Rexperiments/",short_name, "_msr_table_", size, ".Rda", sep = ""))
short_name <- "stomach"
# read rda file
wgbs <- sum_strands(readRDS(new_name))
# produce msr table
size <- 1e3
msr_ecdf_ref <- msr_ecdf_1e3
methylation_assigner <- standard_binaryzer
na_tolerance <- 0.1
minimum_reads <- 1
rr_table <- total_spatial_experiment(c(new_name), c(size), c(F,T), c(short_name), methylation_assigner, na_tolerance, F, minimum_reads)
start = rr_table[[1]][[1]]$data$fragments_infos_array[,1]
msr_density = rr_table[[1]][[1]]$data$fragments_infos_array[,2]
true_density = sapply(start, function(x){mean(wgbs$prop[x:(x+size)], na.rm = T)})/100
msr = rr_table[[1]][[1]]$data$fragments_infos_array[,3]
inverted_msr = rr_table[[2]][[1]]$data$fragments_infos_array[,3]
sig <- significance_measure(msr, msr_density, msr_ecdf_ref, inverted = F)
inverted_sig <- significance_measure(inverted_msr, msr_density, msr_ecdf_ref, inverted = T)
median_function <- extract_ecdf_function(msr_ecdf_ref, 0.5)
residual <- msr-median_function(msr_density)
inverted_residual <- inverted_msr-median_function(1-msr_density)
# read rda file
wgbs <- sum_strands(readRDS(new_name))
# produce msr table
size <- 1e3
new_name  <- "../../MethylationCode/MethylationData/wgbs/stomach.Rda" # could automate
short_name <- "stomach"
# read rda file
wgbs <- sum_strands(readRDS(new_name))
# produce msr table
size <- 1e3
msr_ecdf_ref <- msr_ecdf_1e3
methylation_assigner <- standard_binaryzer
na_tolerance <- 0.1
minimum_reads <- 1
rr_table <- total_spatial_experiment(c(new_name), c(size), c(F,T), c(short_name), methylation_assigner, na_tolerance, F, minimum_reads)
start = rr_table[[1]][[1]]$data$fragments_infos_array[,1]
msr_density = rr_table[[1]][[1]]$data$fragments_infos_array[,2]
true_density = sapply(start, function(x){mean(wgbs$prop[x:(x+size)], na.rm = T)})/100
msr = rr_table[[1]][[1]]$data$fragments_infos_array[,3]
inverted_msr = rr_table[[2]][[1]]$data$fragments_infos_array[,3]
sig <- significance_measure(msr, msr_density, msr_ecdf_ref, inverted = F)
inverted_sig <- significance_measure(inverted_msr, msr_density, msr_ecdf_ref, inverted = T)
median_function <- extract_ecdf_function(msr_ecdf_ref, 0.5)
residual <- msr-median_function(msr_density)
inverted_residual <- inverted_msr-median_function(1-msr_density)
# save msr tables
msr_table = data.frame(start,msr_density,true_density,msr,inverted_msr, sig, inverted_sig, residual, inverted_residual)
saveRDS(msr_table, file = paste("../../Rexperiments/",short_name, "_msr_table_", size, ".Rda", sep = ""))
