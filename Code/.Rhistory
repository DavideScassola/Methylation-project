return(sites)
}
Human_CpG_sites = get_sites("CG")
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:24])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:24) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
rm(s)
Human_CpG_sites = get_sites("CG")
unique(Human_CpG_sites$chr_name)
save(Human_CpG_sites, file = "Human_CpG_sites.Rdata")
qnorm(10000)
qnorm(1)
norm(2)
pnorm(100000)
pnorm(mean = 10, sd = 10, q=10000)
pnorm(mean = 10, sd = 10, q=12)
pnorm(mean = 10, sd = 10, q=0)
N = pnorm(mean = 10, sd = 10, q=0)
N = 1-(pnorm(mean = 10, sd = 10, q=0))
N
(pnorm(mean = 10, sd = 10, q=12))/N
(1-pnorm(mean = 10, sd = 10, q=15))/N
(1-pnorm(mean = 10, sd = 10, q=0))/N
pnorm(mean = 0, sd = 1, q=0)
pnorm(mean = 0, sd = 1, q=1)
pnorm(mean = 0, sd = 1, q=2)
pnorm(mean = 0, sd = 1, q=0.5)
pnorm(mean = 0, sd = 1, q=0.5)-pnorm(mean = 0, sd = 1, q=-0.5)
pnorm(mean = 0, sd = 1, q=1)-pnorm(mean = 0, sd = 1, q=-1)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 0, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 4, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=6)-pnorm(mean = 4, sd = 2, q=2)
#################################################################################################
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
#source_directory = "./Scrivania/Tesi/MethylationCode/"
#setwd(source_directory)
file_h1 = "../../MethylationCode/MethylationData/wgbs/ENCFF601NBW_H1_cell_line.bed.gz"
data_h1 <- read_ENCODE_bed(file_h1, verbose = T)
file_stomach = "../../MethylationCode/MethylationData/wgbs/ENCFF844EFX_stomach_man_51.bed.gz"
data_stomach <- read_ENCODE_bed(file_stomach, verbose = T)
data_list = List(data_h1, data_stomach)
remove(data_h1, data_stomach)
gc()
gc(full=T)
names = c("H1, stomach")
data_list = List(data_h1, data_stomach)
size = 1e6
names = c("H1, stomach")
rr_fragments <- function(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = F)
aojfipuerhga
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = F)
different_positions_scale_CpG_list_experiment <- function(data_list, size, names, na_tolerance, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = keep_nas, invert = F)
{
rr_list = lapply(data_list, function(d)
{
binary <- get_methylation_CpG_binary_vector(d, chromosome = "all", strands_handler = strands_handler, methylation_assigner = methylation_assigner, missing_read_handler = missing_read_handler)
l <- length(binary)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
rr_fragments_list = lapply(start_list, function(s)
{
calculate_relevance_resolution_vector(binary[(start):(size+start)], na_tolerance = na_tolerance, na_values_handler = replace_nas_hybrid_stochastic, invert = invert)
})
return(rr_dim_list)
})
return(rr_list)
}
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = F)
different_positions_scale_CpG_list_experiment <- function(data_list, size, names, na_tolerance, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = keep_nas, invert = F)
{
rr_list = lapply(data_list, function(d)
{
binary <- get_methylation_CpG_binary_vector(d, chromosome = "all", strands_handler = strands_handler, methylation_assigner = methylation_assigner, missing_read_handler = missing_read_handler)
l <- length(binary)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
rr_fragments_list = lapply(start_list, function(s)
{
calculate_relevance_resolution_vector(binary[(s):(size+s)], na_tolerance = na_tolerance, na_values_handler = replace_nas_hybrid_stochastic, invert = invert)
})
return(rr_dim_list)
})
return(rr_list)
}
data_list = List(data_h1, data_stomach)
size = 1e6
names = c("H1, stomach")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = F)
different_positions_scale_CpG_list_experiment <- function(data_list, size, names, na_tolerance, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = keep_nas, invert = F)
{
rr_list = lapply(data_list, function(d)
{
binary <- get_methylation_CpG_binary_vector(d, chromosome = "all", strands_handler = strands_handler, methylation_assigner = methylation_assigner, missing_read_handler = missing_read_handler)
l <- length(binary)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
rr_fragments_list = lapply(start_list, function(s)
{
calculate_relevance_resolution_vector(binary[(s):(size+s)], na_tolerance = na_tolerance, na_values_handler = replace_nas_hybrid_stochastic, invert = invert)
})
return(rr_fragments_list)
})
return(rr_list)
}
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = F)
compare_resolution_relevance_plot(rr_fragments[1])
compare_resolution_relevance_plot(rr_fragments[[1]])
compare_resolution_relevance_plot(rr_fragments[[2]])
compare_resolution_relevance_plot(rr_fragments[[2]])
compare_resolution_relevance_plot(rr_fragments[[1]])
MSR_area(rr_fragments[[1]])
MSR_area(rr_fragments[[1]][1])
lapply(rr_fragments[[1]], function(x) MSR_area(x))
2
lapply(rr_fragments[[2]], function(x) MSR_area(x))
areas_h1 = lapply(rr_fragments[[1]], function(x) MSR_area(x))
rr_fragments[[1]]
rr_fragments[[1]][1]
MSR_area(rr_fragments[[1]][1])
MSR_area(rr_fragments[[1]][[1]])
resolution_relevance_plot(rr_fragments[[1]][[1]])
resolution_relevance_plot(rr_fragments[[1]][[2]])
resolution_relevance_plot(rr_fragments[[1]][[1]])
resolution_relevance_plot(rr_fragments[[1]][[2]])
resolution_relevance_plot(rr_fragments[[1]][[3]])
resolution_relevance_plot(rr_fragments[[1]][[20]])
resolution_relevance_plot(rr_fragments[[1]][[1]])
MSR_area(rr_fragments[[1]][[1]])
MSR_area(rr_fragments[[1]][[2]])
MSR_area(rr_fragments[[1]][[3]])
areas_h1 = lapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = lapply(rr_fragments[[1]], function(x) MSR_area(x))
var(areas_h1)
var(areas_h1, na.rm = T)
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
var(areas_h1, na.rm = T)
std(areas_h1, na.rm = T)
areas_stomach = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach
areas_h1
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
areas_stomach
std(areas_h1)
std(areas_stomach)
boxplot(areas_stomach)
boxplot(areas_stomach, areas_h1)
boxplot(areas_stomach, areas_h1)
boxplot.default(areas_stomach)
boxplot.default(areas_stomach, areas_h1)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
title("MSR area calculated for 29 different fragments of size 1e6")
title("MSR area calculated for 29 different fragments of size 1e6 (CpG list)")
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
title("MSR area calculated for 29 different fragments of size 1e6 (CpG list)")
title("MSR area calculated for 29 different fragments of size 1e6 (CpG list, stochastic assignment)")
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
title("MSR area calculated for 29 different fragments of size 1e6 (CpG list, stochastic assignment)")
compare_resolution_relevance_plot(rr_fragments[[1]], title = "MSR plot for 29 different fragments of 1e6 sites (CpG list)")
compare_resolution_relevance_plot(rr_fragments[[1]], title = "MSR plot for 29 different fragments of 1e6 sites of h1 cells (CpG list, stochastic assignment)")
compare_resolution_relevance_plot(rr_fragments[[2]], title = "MSR plot for 29 different fragments of 1e6 sites of stomach cells (CpG list, stochastic assignment)")
data_list = List(data_h1, data_stomach)
size = 1e5
data_list = List(data_h1, data_stomach)
size = 1e5
names = c("H1, stomach")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = F)
compare_resolution_relevance_plot(rr_fragments[[2]], title = "MSR plot for 29 different fragments of 1e6 sites of stomach cells (CpG list, stochastic assignment)")
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
areas_h1
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
title = "MSR area calculated for 290 different fragments of size 1e5 (CpG list, stochastic assignment)"
title("MSR area calculated for 290 different fragments of size 1e5 (CpG list, stochastic assignment)")
areas_stomach
areas_stomach[14]
rr_fragments[[2]][14]
rr_fragments[[2]][15]
data_list = List(data_h1, data_stomach)
size = 1e6
names = c("H1, stomach")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = T)
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
compare_resolution_relevance_plot(rr_fragments[[2]], title = "MSR plot for 29 different fragments of 1e6 sites of stomach cells (CpG list, stochastic assignment)")
compare_resolution_relevance_plot(rr_fragments[[1]], title = "MSR plot for 29 different fragments of 1e6 sites of stomach cells (CpG list, stochastic assignment)")
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
std(areas_h1, na.rm = T)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
title("MSR area calculated for 29 different fragments of size 1e6 (CpG list, stochastic assignment, not methylated sites)")
c(1,2,3)[1:829]
different_positions_scale_CpG_list_experiment <- function(data_list, size, names, na_tolerance, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = keep_nas, invert = F, undersample = 0)
{
rr_list = lapply(data_list, function(d)
{
binary <- get_methylation_CpG_binary_vector(d, chromosome = "all", strands_handler = strands_handler, methylation_assigner = methylation_assigner, missing_read_handler = missing_read_handler)
l <- length(binary)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
if(undersample!=0)
start_list <- sample(start_list, undersample, replace=F)
rr_fragments_list = lapply(start_list, function(s)
{
calculate_relevance_resolution_vector(binary[(s):(size+s)], na_tolerance = na_tolerance, na_values_handler = replace_nas_hybrid_stochastic, invert = invert)
})
return(rr_fragments_list)
})
return(rr_list)
}
size = 1e4
names = c("H1, stomach")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = T, undersample = 20)
compare_resolution_relevance_plot(rr_fragments[[1]], title = "MSR plot for 20 different fragments of 1e6 sites of stomach cells (CpG list, stochastic assignment)")
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
title("MSR area calculated for 20 different fragments of size 1e4 (CpG list, stochastic assignment, not methylated sites)")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = F, undersample = 50)
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
title("MSR area calculated for 50 different fragments of size 1e4 (CpG list, stochastic assignment)")
compare_resolution_relevance_plot(rr_fragments[[1]], title = "MSR plot for 20 different fragments of 1e6 sites of stomach cells (CpG list, stochastic assignment)")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = T, undersample = 50)
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
std(areas_h1, na.rm = T)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
size = 1e5
names = c("H1, stomach")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = T, undersample = 20)
compare_resolution_relevance_plot(rr_fragments[[1]], title = "MSR plot for 20 different fragments of 1e6 sites of stomach cells (CpG list, stochastic assignment)")
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
std(areas_h1, na.rm = T)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
gc()
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = T, undersample = 20)
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
plot(areas_h1)
plot(areas_stomach)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
MSR area calculated for 20 different fragments of size 1e6 (CpG list, stochastic assignment, not methylated sites)
title("MSR area calculated for 20 different fragments of size 1e6 (CpG list, stochastic assignment, not methylated sites)")
data_list = List(data_h1, data_stomach)
size = 1e4
names = c("H1, stomach")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = T, undersample = 100)
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
title("MSR area calculated for 20 different fragments of size 1e6 (CpG list, stochastic assignment, not methylated sites)")
plot(areas_h1)
plot(areas_stomach)
size = 1e5
names = c("H1, stomach")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = F, undersample = 0)
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
plot(areas_stomach)
plot(areas_stomach)
plot(areas_stomach)
plot(areas_h1)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
plot(areas_h1)
points(areas_stomach)
plot(areas_stomach)
plot(areas_h1, col = 2)
points(areas_h1, col = 2)
plot(areas_stomach)
points(areas_h1, col = 2)
plot(areas_stomach, areas_h1)
plot(areas_stomach)
plot(areas_h1)
plot(areas_h1)
title("MSR area calculated for 290 different fragments of size 1e5 (CpG list, stochastic assignment)")
plot(areas_stomach)
plot(areas_stomach, areas_h1)
title("MSR area calculated for 290 different fragments of size 1e5 (CpG list, stochastic assignment)")
plot(areas_stomach)
plot(areas_h1)
different_positions_scale_by_chromosome_experiment <- function(data_list, size, names, chromosome, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = keep_nas, invert = F, undersample = 0)
{
rr_list = lapply(data_list, function(d)
{
pos <- get_methylation_positions(d, chromosome, strands_handler, methylation_assigner, missing_read_handler)
l <- max(pos)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
if(undersample!=0)
start_list <- sample(start_list, undersample, replace=F)
rr_fragments_list = lapply(start_list, function(s)
{
genome_MSR(pos[pos>s & pos<=(s+size)], invert = invert,minimum_bin_size = 20 )
})
return(rr_fragments_list)
})
return(rr_list)
}
function
asflnlòsdnvoenpb
different_positions_scale_by_chromosome_experiment <- function(data_list, size, names, chromosome, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = replace_no_reads_entries, invert = F, undersample = 0)
{
rr_list = lapply(data_list, function(d)
{
pos <- get_methylation_positions(d, chromosome, strands_handler, methylation_assigner, missing_read_handler)
l <- max(pos)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
if(undersample!=0)
start_list <- sample(start_list, undersample, replace=F)
rr_fragments_list = lapply(start_list, function(s)
{
genome_MSR(pos[pos>s & pos<=(s+size)], invert = invert,minimum_bin_size = 20 )
})
return(rr_fragments_list)
})
return(rr_list)
}
rr_fragments <- different_positions_scale_by_chromosome_experiment(data_list, size, names,  strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, invert = F, undersample = 0)
rr_fragments <- different_positions_scale_by_chromosome_experiment(data_list, size, names,  chromosome = "chr1", strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, invert = F, undersample = 0)
gc()
size = 1e7
names = c("H1, stomach")
gc(full=T)
data_list = List(data_h1, data_stomach)
size = 1e6
names = c("H1, stomach")
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = T, undersample = 0)
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
plot(areas_stomach, areas_h1)
plot(areas_stomach)
plot(areas_h1)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
title("MSR area calculated for 290 different fragments of size 1e6 (CpG list, stochastic assignment, not methilated)")
plot(areas_stomach, areas_h1)
plot(areas_stomach)
plot(areas_h1)
plot(areas_stomach, areas_h1)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
plot(areas_h1)
points(areas_stomach, col=2)
mean(areas_stomach)
mean(areas_h1)
mean(areas_h1, rm.na=T)
mean(areas_h1, na.rm=T)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
median(areas_h1)
median(areas_h1, na.rm=T)
median(areas_stomach, na.rm=T)
data_list = List(data_h1, data_stomach)
size = 1e7
names = c("H1, stomach")
rr_fragments <- different_positions_scale_by_chromosome_experiment(data_list, size, names,  chromosome = "chr1",strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, invert = F, undersample = 0)
data_list = List(data_h1, data_stomach)
size = 1e7
names = c("H1, stomach")
rr_fragments <- different_positions_scale_by_chromosome_experiment(data_list, size, names,  chromosome = "chr1",strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, invert = F, undersample = 5)
different_positions_scale_by_chromosome_experiment <- function(data_list, size, names, chromosome, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = replace_no_reads_entries, invert = F, undersample = 0)
{
rr_list = lapply(data_list, function(d)
{
pos <- get_methylation_positions(d, chromosome, strands_handler, methylation_assigner, missing_read_handler)
l <- max(pos)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
if(undersample!=0)
start_list <- sample(start_list, undersample, replace=F)
rr_fragments_list = lapply(start_list, function(s)
{
cat("start: ", s, "end: ", size+s, "max: ", l, "\n")
genome_MSR(pos[pos>s & pos<=(s+size)], invert = invert,minimum_bin_size = 20 )
})
return(rr_fragments_list)
})
return(rr_list)
}
rr_fragments <- different_positions_scale_CpG_list_experiment(data_list, size, names, na_tolerance=0.1, strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, missing_read_handler = keep_nas, invert = T, undersample = 0)
different_positions_scale_by_chromosome_experiment <- function(data_list, size, names, chromosome, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = replace_no_reads_entries, invert = F, undersample = 0)
{
rr_list = lapply(data_list, function(d)
{
pos <- get_methylation_positions(d, chromosome, strands_handler, methylation_assigner, missing_read_handler)
l <- max(pos)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
if(undersample!=0)
start_list <- sample(start_list, undersample, replace=F)
rr_fragments_list = lapply(start_list, function(s)
{
cat("start: ", s, "end: ", size+s, "max: ", l, "\n")
genome_MSR(pos[pos>s & pos<=(s+size)], invert = invert,minimum_bin_size = 20 )
})
return(rr_fragments_list)
})
return(rr_list)
}
data_list = List(data_h1, data_stomach)
size = 1e5
names = c("H1, stomach")
rr_fragments <- different_positions_scale_by_chromosome_experiment(data_list, size, names,  chromosome = "chr1",strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer, invert = F, undersample = 5)
areas_h1 = sapply(rr_fragments[[1]], function(x) MSR_area(x))
areas_stomach = sapply(rr_fragments[[2]], function(x) MSR_area(x))
plot(areas_stomach)
plot(areas_h1)
boxplot.default(areas_stomach, areas_h1, names = c("stomach", "H1"))
different_positions_scale_by_chromosome_experiment <- function(data_list, size, names, chromosome, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = replace_no_reads_entries, invert = F, undersample = 0)
{
rr_list = lapply(data_list, function(d)
{
pos <- get_methylation_positions(d, chromosome, strands_handler, methylation_assigner, missing_read_handler)
l <- max(pos)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
if(undersample!=0)
start_list <- sample(start_list, undersample, replace=F)
rr_fragments_list = lapply(start_list, function(s)
{
cat("start: ", s, "end: ", size+s, "max: ", l, "\n")
#genome_MSR(pos[pos>s & pos<=(s+size)], invert = invert,minimum_bin_size = 20 )
})
return(rr_fragments_list)
})
return(rr_list)
}
rr_fragments <- different_positions_scale_by_chromosome_experiment(data_list, size, names, invert = F, undersample = 0, chromosome = "chr1",strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer)
different_positions_scale_by_chromosome_experiment <- function(data_list, size, names, chromosome, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = replace_no_reads_entries, invert = F, undersample = 0)
{
rr_list = lapply(data_list, function(d)
{
pos <- get_methylation_positions(d, chromosome, strands_handler, methylation_assigner, missing_read_handler)
l <- max(pos)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
if(undersample!=0)
start_list <- sample(start_list, undersample, replace=F)
rr_fragments_list = lapply(start_list, function(s)
{
cat("start: ", s, "end: ", size+s, "max: ", l, "\n")
#genome_MSR(pos[pos>s & pos<=(s+size)], invert = invert,minimum_bin_size = 20 )
})
return(rr_fragments_list)
})
return(rr_list)
}
rr_fragments <- different_positions_scale_by_chromosome_experiment(data_list, size, names, invert = F, undersample = 0, chromosome = "chr1",strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer)
size = 1e8
names = c("H1, stomach")
rr_fragments <- different_positions_scale_by_chromosome_experiment(data_list, size, names, invert = F, undersample = 0, chromosome = "chr1",strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer)
size = 1e7
names = c("H1, stomach")
rr_fragments <- different_positions_scale_by_chromosome_experiment(data_list, size, names, invert = F, undersample = 0, chromosome = "chr1",strands_handler = sum_strands, methylation_assigner = stochastic_binaryzer)
different_positions_scale_by_chromosome_experiment <- function(data_list, size, names, chromosome, strands_handler = sum_strands, methylation_assigner = standard_binaryzer, missing_read_handler = replace_no_reads_entries, invert = F, undersample = 0)
{
rr_list = lapply(data_list, function(d)
{
pos <- get_methylation_positions(d, chromosome, strands_handler, methylation_assigner, missing_read_handler)
l <- max(pos)
fragments <- floor(l/size)
start_list <- ((0:(fragments-1))*size)+1
cat("fragments: ", fragments, "\n")
if(undersample!=0)
start_list <- sample(start_list, undersample, replace=F)
rr_fragments_list = lapply(start_list, function(s)
{
cat("start: ", s, "end: ", size+s, "max: ", l, "\n")
genome_MSR(pos[pos>s & pos<=(s+size)], invert = invert,minimum_bin_size = 20 )
})
return(rr_fragments_list)
})
return(rr_list)
}
