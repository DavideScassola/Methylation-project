{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
binary <- get_methylation_CpG_binary_vector(data,strands_handler = sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = keep_nas)
remove(data)
gc()
for(inv in inversion)
{
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_CpG_list(binary, inv, s, fake_data, na_tolerance)
return(List(name=names[i], inverted=inv, window_size=s, data=rrs))
})
result[[paste(names[i], "inverted:", inv, sep = "_")]] <- result_si
}
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
subpos = subset_positions(pos, 129837, 1e6)
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
a$fragments_infos_array
plot(a$fragments_infos_array[,2], a$fragments_infos_array[,3])
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<1)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(is.na(rr)) return(NA)
else MSR_area(rr)})
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list))
}
total_spatial_experiment <- function(files, sizes, inversion, names, methylation_assigner, na_tolerance, fake_data)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
binary <- get_methylation_CpG_binary_vector(data,strands_handler = sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = keep_nas)
remove(data)
gc()
for(inv in inversion)
{
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_CpG_list(binary, inv, s, fake_data, na_tolerance)
return(List(name=names[i], inverted=inv, window_size=s, data=rrs))
})
result[[paste(names[i], "inverted:", inv, sep = "_")]] <- result_si
}
}
return(result)
}
total_spatial_experiment_by_chromosome <- function(files, sizes, chromosome, names, methylation_assigner, fake_data, minimum_bin_size = 20)
{
result = List()
for(i in 1:length(files))
{
data <- read_ENCODE_bed(files[i], verbose = T)
pos <- get_methylation_positions(data, chromosome, sum_strands, methylation_assigner = methylation_assigner, missing_read_handler = replace_no_reads_entries)
remove(data)
gc()
result_si = lapply(sizes, function(s)
{
gc()
rrs <- spatial_MSR_experiment_by_chromosome(pos, s, fake_data, minimum_bin_size)
return(List(name=names[i], window_size=s, data=rrs))
})
result[[(names[i])]] <- result_si
}
return(result)
}
subpos = subset_positions(pos, 129837, 1e6)
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
a$fragments_infos_array
plot(a$fragments_infos_array[,2], a$fragments_infos_array[,3])
a = spatial_MSR_experiment_by_chromosome(subpos, 1e3, F, 30)
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
system.time(2+2)
a = system.time(2+2)
a
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
start_time <- Sys.time()
sub <- subset_positions(pos, start_list[i], window_size)
end_time <- Sys.time()
print(end_time-start_time)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(is.na(rr)) return(NA)
else MSR_area(rr)})
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
genome_MSR <- function(methylation_positions, minimum_bin_size = 10, verbose = T, invert = F)
{
start_time <- Sys.time()
v = methylation_positions - min(methylation_positions) + 1
v = sparseVector(i = v, x = T, length = max(v))
end_time <- Sys.time()
print(end_time-start_time)
rr <- calculate_relevance_resolution_vector_ignoring_nas(v, minimum_bin_size = minimum_bin_size, invert = invert, verbose = verbose)
return(rr)
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
genome_MSR <- function(methylation_positions, minimum_bin_size = 10, verbose = T, invert = F)
{
v = methylation_positions - min(methylation_positions) + 1
v = sparseVector(i = v, x = T, length = max(v))
start_time <- Sys.time()
rr <- calculate_relevance_resolution_vector_ignoring_nas(v, minimum_bin_size = minimum_bin_size, invert = invert, verbose = verbose)
end_time <- Sys.time()
print(end_time-start_time)
return(rr)
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
spatial_MSR_experiment_by_chromosome <- function(pos, window_size, fake_data, minimum_bin_size)
{
l = max(pos)-min(pos)+1
if(fake_data)
{
prop <- length(pos)/l
pos  <- bernoulli_positions(max, prop)
}
fragments <- floor(l/window_size)
start_list <- ((0:(fragments-1))*window_size)+1
cat("fragments: ", fragments, "\n")
fragments_infos_array = array(dim = c(fragments, 3))
rr_fragments_list = lapply(1:fragments, function(i)
{
cat(i, "...\n")
sub <- subset_positions(pos, start_list[i], window_size)
if(length(sub)<5)
rr <- NA
else
rr <- genome_MSR(sub,minimum_bin_size,verbose=F)
})
fragments_infos_array[,1] <- start_list
fragments_infos_array[,2] <-  sapply(1:fragments, function(i)
{
sub <- subset_positions(pos, start_list[i], window_size)
length(sub)/window_size
})
fragments_infos_array[,3] <-  sapply(rr_fragments_list, function(rr)
{
if(is.na(rr)) return(NA)
else MSR_area(rr)})
return(List(fragments_infos_array=fragments_infos_array, rr_list=rr_fragments_list))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
genome_MSR <- function(methylation_positions, minimum_bin_size = 10, verbose = T, invert = F)
{
v = methylation_positions - min(methylation_positions) + 1
v = sparseVector(i = v, x = T, length = max(v))
rr <- calculate_relevance_resolution_vector_ignoring_nas(v, minimum_bin_size = minimum_bin_size, invert = invert, verbose = verbose)
return(rr)
}
calculate_relevance_resolution_vector_ignoring_nas <- function(methylation_vector, max_bins = 100, verbose = T, minimum_bin_size = 1, invert = F)
{
if(invert) methylation_vector <- !methylation_vector
start_time <- Sys.time()
l <- length(methylation_vector)
bin_sizes <- good_bin_sizes(l, max_bins)
bin_sizes <- bin_sizes[(bin_sizes>minimum_bin_size) | (bin_sizes==1) ]
nas <- is.na(methylation_vector)
replaced_nas_vector <- methylation_vector
replaced_nas_vector[nas] <- 0
if(verbose) cat("Calculating cumulative sum vector \n")
start_time <- Sys.time()
cumulative_sum_vector <- corrected_cumsum(replaced_nas_vector)
print(end_time-Sys.time())
#################################
# I don't want my RAM to explode
remove(replaced_nas_vector, nas)
gc()
#################################
out <- (sapply(bin_sizes, function(x)
{
if(verbose) cat(x, "...\n")
calculate_relevance_and_resolution_ignoring_nas(methylation_vector, cumulative_sum_vector, bin_size = x)
}))
end_time <- Sys.time()
if(verbose) print(end_time-start_time)
gc()
return(out)
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
calculate_relevance_resolution_vector_ignoring_nas <- function(methylation_vector, max_bins = 100, verbose = T, minimum_bin_size = 1, invert = F)
{
if(invert) methylation_vector <- !methylation_vector
start_time <- Sys.time()
l <- length(methylation_vector)
bin_sizes <- good_bin_sizes(l, max_bins)
bin_sizes <- bin_sizes[(bin_sizes>minimum_bin_size) | (bin_sizes==1) ]
nas <- is.na(methylation_vector)
replaced_nas_vector <- methylation_vector
replaced_nas_vector[nas] <- 0
if(verbose) cat("Calculating cumulative sum vector \n")
start_time <- Sys.time()
cumulative_sum_vector <- corrected_cumsum(replaced_nas_vector)
print(Sys.time()-start_time)
#################################
# I don't want my RAM to explode
remove(replaced_nas_vector, nas)
gc()
#################################
out <- (sapply(bin_sizes, function(x)
{
if(verbose) cat(x, "...\n")
calculate_relevance_and_resolution_ignoring_nas(methylation_vector, cumulative_sum_vector, bin_size = x)
}))
end_time <- Sys.time()
if(verbose) print(end_time-start_time)
gc()
return(out)
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
calculate_relevance_resolution_vector_ignoring_nas <- function(methylation_vector, max_bins = 100, verbose = T, minimum_bin_size = 1, invert = F)
{
if(invert) methylation_vector <- !methylation_vector
start_time <- Sys.time()
l <- length(methylation_vector)
bin_sizes <- good_bin_sizes(l, max_bins)
bin_sizes <- bin_sizes[(bin_sizes>minimum_bin_size) | (bin_sizes==1) ]
nas <- is.na(methylation_vector)
replaced_nas_vector <- methylation_vector
replaced_nas_vector[nas] <- 0
if(verbose) cat("Calculating cumulative sum vector \n")
cumulative_sum_vector <- corrected_cumsum(replaced_nas_vector)
#################################
# I don't want my RAM to explode
start_time <- Sys.time()
remove(replaced_nas_vector, nas)
gc()
print(Sys.time()-start_time)
#################################
out <- (sapply(bin_sizes, function(x)
{
if(verbose) cat(x, "...\n")
calculate_relevance_and_resolution_ignoring_nas(methylation_vector, cumulative_sum_vector, bin_size = x)
}))
end_time <- Sys.time()
if(verbose) print(end_time-start_time)
gc()
return(out)
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
calculate_relevance_resolution_vector_ignoring_nas <- function(methylation_vector, max_bins = 100, verbose = T, minimum_bin_size = 1, invert = F)
{
if(invert) methylation_vector <- !methylation_vector
start_time <- Sys.time()
l <- length(methylation_vector)
bin_sizes <- good_bin_sizes(l, max_bins)
bin_sizes <- bin_sizes[(bin_sizes>minimum_bin_size) | (bin_sizes==1) ]
nas <- is.na(methylation_vector)
replaced_nas_vector <- methylation_vector
replaced_nas_vector[nas] <- 0
if(verbose) cat("Calculating cumulative sum vector \n")
cumulative_sum_vector <- corrected_cumsum(replaced_nas_vector)
#################################
# I don't want my RAM to explode
start_time <- Sys.time()
remove(replaced_nas_vector, nas)
print(Sys.time()-start_time)
gc()
#################################
out <- (sapply(bin_sizes, function(x)
{
if(verbose) cat(x, "...\n")
calculate_relevance_and_resolution_ignoring_nas(methylation_vector, cumulative_sum_vector, bin_size = x)
}))
end_time <- Sys.time()
if(verbose) print(end_time-start_time)
gc()
return(out)
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
object.size(2222222222)
f = object.size(2222222222)
f
f+2
f>3
f>1e7
calculate_relevance_resolution_vector_ignoring_nas <- function(methylation_vector, max_bins = 100, verbose = T, minimum_bin_size = 1, invert = F)
{
if(invert) methylation_vector <- !methylation_vector
start_time <- Sys.time()
l <- length(methylation_vector)
bin_sizes <- good_bin_sizes(l, max_bins)
bin_sizes <- bin_sizes[(bin_sizes>minimum_bin_size) | (bin_sizes==1) ]
nas <- is.na(methylation_vector)
replaced_nas_vector <- methylation_vector
replaced_nas_vector[nas] <- 0
if(verbose) cat("Calculating cumulative sum vector \n")
cumulative_sum_vector <- corrected_cumsum(replaced_nas_vector)
#################################
# I don't want my RAM to explode
remove(replaced_nas_vector, nas)
if(object.size(replaced_nas_vector)>1e7)
gc()
#################################
out <- (sapply(bin_sizes, function(x)
{
if(verbose) cat(x, "...\n")
calculate_relevance_and_resolution_ignoring_nas(methylation_vector, cumulative_sum_vector, bin_size = x)
}))
end_time <- Sys.time()
if(verbose) print(end_time-start_time)
gc()
return(out)
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
calculate_relevance_resolution_vector_ignoring_nas <- function(methylation_vector, max_bins = 100, verbose = T, minimum_bin_size = 1, invert = F)
{
if(invert) methylation_vector <- !methylation_vector
start_time <- Sys.time()
l <- length(methylation_vector)
bin_sizes <- good_bin_sizes(l, max_bins)
bin_sizes <- bin_sizes[(bin_sizes>minimum_bin_size) | (bin_sizes==1) ]
nas <- is.na(methylation_vector)
replaced_nas_vector <- methylation_vector
replaced_nas_vector[nas] <- 0
if(verbose) cat("Calculating cumulative sum vector \n")
cumulative_sum_vector <- corrected_cumsum(replaced_nas_vector)
#################################
# I don't want my RAM to explode
remove(replaced_nas_vector, nas)
if(l>1e7) gc()
#################################
out <- (sapply(bin_sizes, function(x)
{
if(verbose) cat(x, "...\n")
calculate_relevance_and_resolution_ignoring_nas(methylation_vector, cumulative_sum_vector, bin_size = x)
}))
end_time <- Sys.time()
if(verbose) print(end_time-start_time)
gc()
return(out)
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
# PLEASE USE A SPARSE MATRIX IF POSSIBLE
calculate_relevance_and_resolution_ignoring_nas <- function(methylation_vector, cumulative_sum_vector, bin_size)
{
l <- length(methylation_vector)
if(bin_size==1) return(c(0,1,1,1))
starting_points <- ((1:(l/bin_size))*bin_size)-bin_size+1
counts  <-  cumulative_sum_vector[starting_points+bin_size]-cumulative_sum_vector[starting_points]
start_time <- Sys.time()
if(l/bin_size > 1E8)
{
# it's useful to save memory, but for large bin size this would just slow down
remove(starting_points)
gc(verbose = F)
}
print(Sys.time()-start_time)
M <- cumulative_sum_vector[l+1]
relevance <- calculate_relevance_from_counts(counts, M)
resolution <- calculate_resolution_from_counts(counts, M)
return(c(relevance, resolution, bin_size, 1))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
# PLEASE USE A SPARSE MATRIX IF POSSIBLE
calculate_relevance_and_resolution_ignoring_nas <- function(methylation_vector, cumulative_sum_vector, bin_size)
{
l <- length(methylation_vector)
if(bin_size==1) return(c(0,1,1,1))
start_time <- Sys.time()
starting_points <- ((1:(l/bin_size))*bin_size)-bin_size+1
counts  <-  cumulative_sum_vector[starting_points+bin_size]-cumulative_sum_vector[starting_points]
print(Sys.time()-start_time)
if(l/bin_size > 1E8)
{
# it's useful to save memory, but for large bin size this would just slow down
remove(starting_points)
gc(verbose = F)
}
M <- cumulative_sum_vector[l+1]
relevance <- calculate_relevance_from_counts(counts, M)
resolution <- calculate_resolution_from_counts(counts, M)
return(c(relevance, resolution, bin_size, 1))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
# PLEASE USE A SPARSE MATRIX IF POSSIBLE
calculate_relevance_and_resolution_ignoring_nas <- function(methylation_vector, cumulative_sum_vector, bin_size)
{
l <- length(methylation_vector)
if(bin_size==1) return(c(0,1,1,1))
start_time <- Sys.time()
counts  <-  cumulative_sum_vector[starting_points+bin_size]-cumulative_sum_vector[starting_points]
if(l/bin_size > 1E8)
{
# it's useful to save memory, but for large bin size this would just slow down
remove(starting_points)
gc(verbose = F)
}
starting_points <- ((1:(l/bin_size))*bin_size)-bin_size+1
M <- cumulative_sum_vector[l+1]
relevance <- calculate_relevance_from_counts(counts, M)
resolution <- calculate_resolution_from_counts(counts, M)
print(Sys.time()-start_time)
return(c(relevance, resolution, bin_size, 1))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
# PLEASE USE A SPARSE MATRIX IF POSSIBLE
calculate_relevance_and_resolution_ignoring_nas <- function(methylation_vector, cumulative_sum_vector, bin_size)
{
l <- length(methylation_vector)
if(bin_size==1) return(c(0,1,1,1))
starting_points <- ((1:(l/bin_size))*bin_size)-bin_size+1
counts  <-  cumulative_sum_vector[starting_points+bin_size]-cumulative_sum_vector[starting_points]
if(l/bin_size > 1E8)
{
# it's useful to save memory, but for large bin size this would just slow down
remove(starting_points)
gc(verbose = F)
}
start_time <- Sys.time()
M <- cumulative_sum_vector[l+1]
relevance <- calculate_relevance_from_counts(counts, M)
resolution <- calculate_resolution_from_counts(counts, M)
print(Sys.time()-start_time)
return(c(relevance, resolution, bin_size, 1))
}
a = spatial_MSR_experiment_by_chromosome(subpos, 1e4, F, 30)
# PLEASE USE A SPARSE MATRIX IF POSSIBLE
calculate_relevance_and_resolution_ignoring_nas <- function(methylation_vector, cumulative_sum_vector, bin_size)
{
l <- length(methylation_vector)
if(bin_size==1) return(c(0,1,1,1))
starting_points <- ((1:(l/bin_size))*bin_size)-bin_size+1
counts  <-  cumulative_sum_vector[starting_points+bin_size]-cumulative_sum_vector[starting_points]
if(l/bin_size > 1E8)
{
# it's useful to save memory, but for large bin size this would just slow down
remove(starting_points)
gc(verbose = F)
}
M <- cumulative_sum_vector[l+1]
relevance <- calculate_relevance_from_counts(counts, M)
resolution <- calculate_resolution_from_counts(counts, M)
return(c(relevance, resolution, bin_size, 1))
}
