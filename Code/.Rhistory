knitr::opts_chunk$set(
comment = "##",
collapse = TRUE,
warning = FALSE,
message = FALSE,
fig.width=6,
fig.height=6
)
# Chunk 2
for (i in list.files("../scripts", pattern="*\\.R$", full.names = TRUE))
knitr::read_chunk(i)
# Chunk 3
<<load_data>>
<<component_1>>
# Chunk 4
<<component_2>>
# Chunk 5
<<component_3>>
# Chunk 6
<<component_4>>
# Chunk 7
<<component_5>>
# Chunk 8
<<component_6>>
# Chunk 9
<<component_7>>
# Chunk 10
<<pie3d_1>>
# Chunk 11
<<pie3d_2>>
# Chunk 12
<<bubble_1>>
# Chunk 13
<<bubble_2>>
# Chunk 14
<<tufte_1>>
# Chunk 15
<<tufte_2>>
# Chunk 17
<<scatter>>
# Chunk 18
<<scatter>>
# Chunk 20
<<lattice>>
# Chunk 22
<<ggplot>>
# Chunk 24
<<plotrix>>
# Chunk 1: codechunk1
pulse <- function(x) (1-cos(x))^2
# Chunk 2: figure1
plot(0)
a = Module("mod")
a = Module("mod")
library(Rcpp)
a = Module("mod")
a$norm(1,2)
require(Rcpp)
a = Module("mod")
knitr::opts_chunk$set(echo = TRUE)
library(boot)
library(DAAG)
set.seed(1968)
z.transform <- function(r) .5*log((1+r)/(1-r))
z.inverse <- function(z) (exp(2*z)-1)/(exp(2*z)+1)
possum.fun <- function(data, indices) {
chest <- data$chest[indices]
belly <- data$belly[indices]
z.transform(cor(belly, chest))}
possum.boot <- boot(possum, possum.fun, R=999)
z.inverse(boot.ci(possum.boot, type="perc")$percent[4:5])
## See help(bootci.object). The 4th and 5th elements of
## the percent list element hold the interval endpoints.**
possum.fun2 <- function(data, indices) {
chest <- data$chest[indices]
belly <- data$belly[indices]
cor(belly, chest) }
possum.boot2 <- boot(possum, possum.fun2, R=999)
boot.ci(possum.boot2, type="perc")$percent[4:5]
knitr::opts_chunk$set(echo = TRUE)
library(boot)
library(DAAG)
set.seed(1968)
z.transform <- function(r) .5*log((1+r)/(1-r))
z.inverse <- function(z) (exp(2*z)-1)/(exp(2*z)+1)
possum.fun <- function(data, indices) {
chest <- data$chest[indices]
belly <- data$belly[indices]
z.transform(cor(belly, chest))}
possum.boot <- boot(possum, possum.fun, R=999)
z.inverse(boot.ci(possum.boot, type="perc")$percent[4:5])
## See help(bootci.object). The 4th and 5th elements of
## the percent list element hold the interval endpoints.**
set.seed(1968)
possum.fun2 <- function(data, indices) {
chest <- data$chest[indices]
belly <- data$belly[indices]
cor(belly, chest) }
possum.boot2 <- boot(possum, possum.fun2, R=999)
boot.ci(possum.boot2, type="perc")$percent[4:5]
knitr::opts_chunk$set(echo = TRUE)
library(boot)
library(DAAG)
```{r}
data <- c(751, 594, 1213, 1126, 819)
s <- sum(data)
n <- length(data)
a <- n
b <- s
sample.size <- 1000
gamma.sample <- rgamma(sample.size, a, b)
hist(gamma.sample)
lambda.sample <- 1/(gamma.sample)
hist(lambda.sample)
sum(lambda.sample > 1000)/sample.size
n <- length(y); mu <- mean(log(y)); sigma <- sd(log(y))
simu.sample <- matrix(NA, nrow = B, ncol = n)
for(i in 1:B) simu.sample[i,] <- mean(exp(rnorm(n, mu, sigma)))
hist(rowMeans(simu.sample) , main="", breaks=25, prob=TRUE,
col=gray(0.7), xlim=c(0, 200), ylim=c(0, 0.04))
cnorm(2)
qnorm(0.95)
qstud(0.95)
student
fstudent
help(qnorm)
pnorm(.96)
pnorm(1.96)
pnorm(-1.96)
pt(-1.96)
dt(-1.96)
rcauchy(100)
sum(rcauchy(100))
sum(rcauchy(100))
sum(rcauchy(100))
sum(rcauchy(100))
sum(rcauchy(100))
sum(rcauchy(10000))
sum(rcauchy(10000))
sum(rcauchy(10000))
B <- 10000
N <- 100
vector(B)
vector(length = B)
for(i in seq(B))
{
vector[i]=sum(rcauchy(N))
}
v = vector(length = B)
for(i in seq(B))
{
v[i]=sum(rcauchy(N))
}
hist(v)
B <- 10000
N <- 100
v = vector(length = B)
for(i in seq(B))
{
v[i]=sum(rcauchy(N))/N
}
hist(v)
floor(3)
floor(2.9)
floor(2.99999999999999999999999)
floor(2.99999999999)
floor(2.999999999999)
floor(2.9999999999999)
floor(2.99999999999999)
floor(2.999999999999999)
floor(2.9999999999999999)
rep_len(12, 12)
rep_len(12, 5)
rep_len(c(1,2,3), 5)
rep_len(c(1,2,3), 20)
rep_len(c(1,2,3), 20)+2
rep_len(c(1,2,3), 20)*1.5
rep_len(c(1,2,3), 20)+c(1,2,3)
rep_len(c(1,2,3), 20)+5
rep_len(c(1,2,3), 20)[4]+4
a = rep_len(c(1,2,3), 20)[4]
a
a = rep_len(c(1,2,3), 20)
a
a[1]=4
a
rep_len
rep_len.code
rep_len
typeof(a)
class(a)
type(rep_len(c(1,2,3), 20))
typeof(rep_len(c(1,2,3), 20))
class(rep_len(c(1,2,3), 20))
rep_len(c(1,2,3), 20)[1] +1
library(Rcpp)
evalCpp("rep_len(1, 20)")
c <- c(1,2,3)
c[1]
c[[1]]
c <- lisy(1,2,3)
c <- list(1,2,3)
c[1]
c[[1]]
r = 1
n = 1000
hist(rgamma(10000, n, r))
hist(rgamma(10000, n, r), density = T)
hist(rgamma(10000, n, r), breaks = 100)
hist(rgamma(100000, n, r), breaks = 100)
r = 1
n = 10000
hist(rgamma(100000, n, r), breaks = 100)
sample = rnorm(1000, 2)
sum(sample*sample)
sample = rnorm(1000, 2)
sum(sample*sample)
expected = (n*2)^(0.5)
n = 1000
expected = (n*2)^(0.5)
expected
sqrt(sum(sample*sample))
expected = (n*2*2)^(0.5)
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
expected
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
n = 10000
expected = (n*2*2)^(0.5)
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
expected
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sample = rnorm(n, 2)
(sum(sample*sample))
sqrt
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
n = 10000
expected = (n*2*2)^(0.5)
expected
sample = rnorm(n, 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
expected = (n*2*2)^(0.5)
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
function (x, na.rm = FALSE)
sqrt(var(if (is.vector(x) || is.factor(x)) x else as.double(x),
na.rm = na.rm))
expected = (n*2*2)^(0.5)
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
expected
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
sample = rnorm(n, 0,sd = 2)
sqrt(sum(sample*sample))
install.packages("doParallel")
install.packages("argparse")
library(SingleCellExperiment)
install.packages("SingleCellExperiment")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
library(SingleCellExperiment)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
ap <- available.packages()
View(ap)
View(ap)
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E8)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
}
for(i in 1:1E6)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
}
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E6)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
if((i%%1000) == 0) print(i)
}
print(Sys.time()-start_time)
start_time <- Sys.time()
v <- 1:1E6
for(i in 1:1E5)
{
v <- v[(i%%900):((i%%900)+1E4)]+(1:1E4)*0.0001
if((i%%1000) == 0) print(i)
}
print(Sys.time()-start_time)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg38")
library(BSgenome.Hsapiens.UCSC.hg38)
a <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Hsapiens.UCSC.hg38)
nucleotides_pattern_positions <- function(chromosome, pattern, Genome = BSgenome.Mmusculus.UCSC.mm10)
{
ranges <- matchPattern(pattern,(Genome[[chromosome]]))
return(IRanges(ranges)@start)
}
binary_nucleotides_pattern_positions <- function(chromosome, pattern, Genome = BSgenome.Mmusculus.UCSC.mm10)
{
positions <- IRanges(matchPattern(pattern,(Genome[[chromosome]])))@start
chromosome_size <- length(Genome[[chromosome]])
return(sparseVector(i = positions, length = chromosome_size, x = T))
}
a <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Hsapiens.UCSC.hg38)
b <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Mmusculus.UCSC.mm10)
library(BSgenome.Mmusculus.UCSC.mm10)
b <- nucleotides_pattern_positions("chr1", "CG", Genome = BSgenome.Mmusculus.UCSC.mm10)
ranges <- matchPattern(pattern,(BSgenome.Hsapiens.UCSC.hg38))
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Mmusculus.UCSC.mm10, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:21])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:21) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
library(BSgenome.Mmusculus.UCSC.mm10)
require(Biostrings)
require(parallel)
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:23])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:21) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
s = get_sites("CG")
s
s$chr_name
unique(s$chr_name)
BSgenome.Hsapiens.UCSC.hg38@seqinfo
BSgenome.Hsapiens.UCSC.hg38@seqinfo@seqnames
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:23])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:24) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
Human_CpG_sites = get_sites("CG")
get_sites <- function(pattern = "CG")
{
Find <- function(Genome, Cores){
if (class(Genome) != "BSgenome") stop("Genome must be a BSgenome!")
XpY <- mclapply(seqlevels(Genome), function(x) start(matchPattern(pattern, Genome[[x]])), mc.cores = Cores)
return(
suppressWarnings(
do.call(c, mclapply(1:length(seqlevels(Genome)), function(x) GRanges(names(Genome)[x],
IRanges(XpY[[x]], width = 2)
), mc.cores=Cores))
)
)
}
mm10.XpY <- Find(Genome = BSgenome.Hsapiens.UCSC.hg38, Cores = 2)
total_length <- sum(mm10.XpY@seqnames@lengths[1:24])
chr_name <- rep_len("",total_length)
j <- 1
for(i in 1:24) {
l   <- mm10.XpY@seqnames@lengths[i]
chr <- mm10.XpY@seqinfo@seqnames[i]
chr_name[j:(j+l-1)] = chr
j = j + l
}
position <- mm10.XpY@ranges@start[1:total_length]
sites <- data.frame(chr_name, position)
return(sites)
}
rm(s)
Human_CpG_sites = get_sites("CG")
unique(Human_CpG_sites$chr_name)
save(Human_CpG_sites, file = "Human_CpG_sites.Rdata")
qnorm(10000)
qnorm(1)
norm(2)
pnorm(100000)
pnorm(mean = 10, sd = 10, q=10000)
pnorm(mean = 10, sd = 10, q=12)
pnorm(mean = 10, sd = 10, q=0)
N = pnorm(mean = 10, sd = 10, q=0)
N = 1-(pnorm(mean = 10, sd = 10, q=0))
N
(pnorm(mean = 10, sd = 10, q=12))/N
(1-pnorm(mean = 10, sd = 10, q=15))/N
(1-pnorm(mean = 10, sd = 10, q=0))/N
pnorm(mean = 0, sd = 1, q=0)
pnorm(mean = 0, sd = 1, q=1)
pnorm(mean = 0, sd = 1, q=2)
pnorm(mean = 0, sd = 1, q=0.5)
pnorm(mean = 0, sd = 1, q=0.5)-pnorm(mean = 0, sd = 1, q=-0.5)
pnorm(mean = 0, sd = 1, q=1)-pnorm(mean = 0, sd = 1, q=-1)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 0, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=4)-pnorm(mean = 4, sd = 2, q=2)
pnorm(mean = 4, sd = 2, q=6)-pnorm(mean = 4, sd = 2, q=2)
file_h1 = "../../MethylationCode/MethylationData/wgbs/ENCFF601NBW_H1_cell_line.bed.gz"
file_stomach = "../../MethylationCode/MethylationData/wgbs/ENCFF844EFX_stomach_man_51.bed.gz"
data_list = List(read_ENCODE_bed(file_h1, verbose = T), read_ENCODE_bed(file_stomach, verbose = T))
#################################################################################################
setwd(dir = "Scrivania/Tesi/Methylation-project/Code/")
source("WGBS_analysis_functions.R", chdir = T)
data_h1 <- read_ENCODE_bed(file_h1, verbose = T)
data_stomach <- read_ENCODE_bed(file_stomach, verbose = T)
data_h1_unstranded <- sum_strands(data_h1)
gc()
data_h1_unstranded
hist.default(data_h1_unstranded$reads)
max(data_h1_unstranded$reads)
hist.default(data_h1_unstranded$reads, breaks = 12)
hist.default(data_h1_unstranded$reads, breaks = 5)
hist(data_h1_unstranded$reads)
hist(data_h1_unstranded$reads[reads<500,])
hist(data_h1_unstranded[reads<500,"reads"])
hist.default(data_h1_unstranded[reads<500,]$reads)
hist.default(data_h1_unstranded[reads<100,]$reads)
hist.default(data_h1_unstranded[reads<80,]$reads)
hist.default(data_h1_unstranded[reads<80,]$reads, probability = T)
library(ggplot2)
hist.default(data_h1_unstranded$reads, probability = T, xlim = c(0,100))
hist.default(data_h1_unstranded$reads, probability = T, xlim = c(0,100), breaks = 100)
hist.default(data_h1_unstranded$reads, probability = T, xlim = c(0,100), breaks = 1000)
hist.default(data_h1_unstranded$reads, probability = T, xlim = c(0,100), breaks = 10000)
hist.default(data_h1_unstranded$reads, probability = T, xlim = c(0,100), breaks = 5000)
hist.default(data_h1_unstranded$reads, probability = T, xlim = c(0,100), breaks = 500)
hist.default(data_h1_unstranded$reads, probability = T, breaks = 500)
